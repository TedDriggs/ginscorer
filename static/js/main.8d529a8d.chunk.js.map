{"version":3,"sources":["State.ts","Effects.ts","components/AppHeader/AppHeader.tsx","components/util/Event.ts","components/Button/index.tsx","Actions.ts","components/util/Ref.ts","components/Drawer/Drawer.tsx","components/Drawer/Toggle.tsx","components/Form.tsx","ControlledInput.ts","components/Input/Input.tsx","components/PlayersInput/PlayersInput.tsx","components/PlayersForm.tsx","Reducer.ts","containers/CommandBar/index.tsx","models/outcome.ts","models/index.ts","models/stats.ts","components/NumberInput.tsx","components/Radio/Radio.tsx","components/RadioGroup/RadioGroup.tsx","components/GameInput/GameInput.tsx","components/ScoreColumn/ScoreColumn.tsx","components/ScrollViewer/index.tsx","components/SetView/Summary.tsx","components/SetView/SetView.tsx","components/StatsViewer/StatsViewer.tsx","components/MatchViewer/MatchResultViewer.tsx","components/MatchViewer/MatchViewer.tsx","containers/CurrentMatchViewer.ts","layouts/playing/Playing.tsx","App.tsx","registerServiceWorker.ts","index.tsx"],"names":["INITIAL_STATE","version","player1Name","player2Name","games","persistState","state","window","localStorage","setItem","JSON","stringify","Promise","resolve","AppHeader_AppHeader","react_default","a","createElement","className","consumeEvent","e","stopPropagation","preventDefault","Button","forwardRef","props","ref","Object","assign","classnames_default","onClick","button","creators","UndoGame","type","RenamePlayers","names","FinishGame","result","StartNewMatch","focusRef","current","focus","refChildHasFocus","contains","document","activeElement","TRANSITION_TIMEOUT_MS","Drawer_Drawer_Drawer","Component","[object Object]","this","titleButton","createRef","handleBackdropClick","onDismiss","handleKeyDown","key","dist","Escape","handleExit","react_dom","Fragment","CSSTransition","in","open","timeout","classNames","appear","mountOnEnter","unmountOnExit","onExit","onEntered","c-drawer--has-title","Boolean","title","hideTitle","onKeyDown","role","onTitleClick","Transition","children","body","DrawerTitleSpacer","ToggleDrawer","activator","setOpen","react","openDrawer","Form","onSubmit","disableSubmit","submitLabel","disabled","makeFieldChangeHandler","c","newVal","fieldName","value","onChange","name","Input_Input","_a","label","__rest","target","PlayersInput_PlayersInput_PlayersInput","handleChange","focusTarget","PlayersForm","isRenaming","setRenaming","setValue","undefined","input","stopRenaming","defaultValue","v","playerNameSelector","canUndoSelector","length","persisted","redux_loop_es","run","args","mapDispatchToProps","onStartNewMatch","onRenamePlayers","onUndoGame","CommandBar","es","playerNames","canUndo","reduceGames","frame1","frame1End","reduceSet","frame2","frame2End","frame3","isSetFinished","ginSet","finalResult","offset","endIndices","wins","Player","One","Two","scores","setGames","bonuses","reverse","nextEnd","pop","index","game","entries","console","info","Math","max","winner","points","runningTotal","push","player","PLAYERS","forEach","filter","wonBy","reduce","bonus","g","ginBonus","gin","b","getWinner","abs","currentScores","Gin","None","Normal","Super","computeMatchResult","sets","isHollywood","every","otherPlayer","nameOfPlayer","players","Game","guard","x","newPerPlayer","reduceGamesToWins","reduceGamesToMeanPoints","perPlayer","reduceGamesToMaxStreak","currentStreak","maxStreak","reduceGamesToBiggestWin","reduceGamesToGins","NumberInput","rest","NumberInput_rest","toString","evt","parseInputToInt","text","Number","parseInt","Radio_Radio_Radio","root","hasFocus","handleFocusChange","forceUpdate","_b","call","Radio_rest","c-radio--checked","selected","c-radio--disabled","c-radio--nonative","hideNative","c-radio--has-focus","checked","onFocus","onBlur","RadioGroup_RadioGroup_RadioGroup","first","RadioGroup_rest","c-radio-group--horizontal","horizontal","c-radio-group--hide-native","choices","map","choice","idx","PartialGame","DEFAULT","GameInput_GameInput_GameInput","GameInput_rest","min","ScoreColumn_ScoreColumn","ScoreColumn_rest","ScoreRow","BonusRow","isFirst","winnerCell","data-gin","loserCell","bonusCell","c-bonusrow--first","ScrollViewer_ScrollViewer","overflowX","overflowY","style","SetSummary","outerProps","Summary_rest","SetSummaryContainer","finished","c-set-summary--clickable","SetView_SetView_SetView","PureComponent","StatsViewer_StatsViewer","layout","StatsStack","StatsGrid","renderStats","formatter","StackRow","formatNumber","toFixed","formatGinCount","normals","supers","normal","whiteSpace","superSpan","opacity","StatsGridRow","row","lodash","meanWinSize","biggestWin","ginGames","MatchResultViewer_MatchResultViewer","onNewMatch","MatchViewer_GameForm","super","setState","handleSubmit","onSubmitGame","matchSelector","lib","reduceGamesToMatch","CurrentMatchViewer_mapDispatchToProps","CurrentMatchViewer","MatchViewer_rest","readOnly","gameFormRef","stats","reduceGamesToStats","drawerOpen","setDrawerOpen","closeGameForm","gameForm","c-match-viewer--finished","react_responsive_default","minWidth","s","i","maxWidth","Playing_Playing","store","redux","__REDUX_DEVTOOLS_EXTENSION__","action","slice","raw","getItem","parsed","parse","isState","error","retrieveState","src_App_0","isLocalhost","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","catch","getElementById","URL","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.8d529a8d.chunk.js","sourcesContent":["import { Game } from './models';\n\nexport const STATE_VERSION: 1 = 1;\n\nexport interface State {\n    version: number;\n    player1Name: string;\n    player2Name: string;\n    games: Game[];\n}\n\nexport const INITIAL_STATE: State = {\n    version: STATE_VERSION,\n    player1Name: 'Player 1',\n    player2Name: 'Player 2',\n    games: [],\n};\n\nexport const isState = (x: any): x is State =>\n    typeof x === 'object' &&\n    typeof x.player1Name === 'string' &&\n    typeof x.player2Name === 'string';\n","import { isState, State, STATE_VERSION } from './State';\n\nconst LOCAL_STORAGE_KEY = 'reduxState';\n\n/**\n * Write the current redux state into local storage.\n */\nexport const persistState = (state: State): Promise<void> => {\n    window.localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(state));\n    return Promise.resolve();\n};\n\n/**\n * Read the redux state from local storage.\n */\nexport const retrieveState = (): State | undefined => {\n    const raw = window.localStorage.getItem(LOCAL_STORAGE_KEY);\n    if (!raw) return;\n\n    try {\n        const parsed = JSON.parse(raw);\n        if (!isState(parsed)) return;\n        if (parsed.version !== STATE_VERSION) return;\n\n        return parsed;\n    } catch (e) {\n        console.error('Could not read state as JSON', e);\n        return;\n    }\n};\n","import React, { FC } from 'react';\n\nimport './AppHeader.css';\n\nexport const AppHeader: FC = () => (\n    <header className=\"c-app-header\">\n        <h1>Gin Scorer</h1>\n    </header>\n);\n","export interface ConsumableEvent {\n    preventDefault(): void;\n    stopPropagation(): void;\n}\n\nexport const consumeEvent = (e: ConsumableEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n};\n","import classNames from 'classnames';\nimport React from 'react';\n\nimport { consumeEvent } from '../util/Event';\n\nexport const Button = React.forwardRef<\n    { focus(): void },\n    Omit<React.ButtonHTMLAttributes<HTMLButtonElement>, 'onClick'> & {\n        onClick?(): void;\n    }\n>((props, ref) => (\n    <button\n        {...props}\n        ref={ref as any}\n        className={classNames('c-button', props.className)}\n        onClick={e => {\n            if (e.button || !props.onClick) return;\n            consumeEvent(e);\n            props.onClick();\n        }}\n    />\n));\n","import { Game, PlayerNames } from './models';\n\n/**\n * Action emitted when a game has been finished and a new result is ready.\n * The provided game will be added to the end of the game list.\n */\nexport interface FinishGame {\n    type: 'FinishGame';\n    result: Game;\n}\n\n/**\n * Remove the most recent game from the history; useful for correcting\n * mistakes in submission.\n */\nexport interface UndoGame {\n    type: 'UndoGame';\n}\n\n/**\n * Start a new match, clearing all game history.\n */\nexport interface StartNewMatch {\n    type: 'StartNewMatch';\n}\n\nexport interface RenamePlayers extends PlayerNames {\n    type: 'RenamePlayers';\n}\n\nexport type Action = RenamePlayers | FinishGame | StartNewMatch | UndoGame;\n\nexport const creators = {\n    UndoGame: (): UndoGame => ({\n        type: 'UndoGame',\n    }),\n    RenamePlayers: (names: PlayerNames): RenamePlayers => ({\n        ...names,\n        type: 'RenamePlayers',\n    }),\n    FinishGame: (result: Game): FinishGame => ({\n        type: 'FinishGame',\n        result,\n    }),\n    StartNewMatch: (): StartNewMatch => ({\n        type: 'StartNewMatch',\n    }),\n};\n","import { RefObject } from 'react';\n\nexport const focusRef = (ref: RefObject<{ focus(): void }>): void => {\n    if (ref.current) ref.current.focus();\n};\n\nexport const refChildHasFocus = (ref: RefObject<HTMLElement>) => (): boolean =>\n    (ref.current && ref.current.contains(document.activeElement)) || false;\n\nexport const mapRef = <T, U>(ref: RefObject<T>, mapFn: (r: T) => U): U | null =>\n    ref.current ? mapFn(ref.current) : null;\n","import classNames from 'classnames';\nimport React from 'react';\nimport { createPortal } from 'react-dom';\nimport { CSSTransition, Transition } from 'react-transition-group';\nimport { Key } from 'w3c-keys';\n\nimport { Button } from '../Button';\nimport { consumeEvent } from '../util/Event';\nimport { Focus } from '../util/Focus';\nimport { focusRef } from '../util/Ref';\nimport './Drawer.css';\n\nconst TRANSITION_TIMEOUT_MS = 125;\n\nexport interface DrawerProps {\n    open?: boolean;\n    hideTitle?: boolean;\n    title?: string;\n    onTitleClick?(): void;\n    onEntered?(): void;\n    /**\n     * Event handler called when the user attempts to dismiss the\n     * drawer. If no handler is provided, the user cannot dismiss\n     * the drawer.\n     */\n    onDismiss?(): void;\n}\n\nexport class Drawer extends React.Component<DrawerProps> {\n    private readonly titleButton = React.createRef<Focus>();\n\n    public render(): React.ReactNode {\n        const { props } = this;\n\n        return createPortal(\n            <>\n                <CSSTransition\n                    in={props.open}\n                    timeout={TRANSITION_TIMEOUT_MS}\n                    classNames=\"c-drawer__backdrop\"\n                    appear\n                    mountOnEnter\n                    unmountOnExit\n                >\n                    <div\n                        onClick={this.handleBackdropClick}\n                        className=\"c-drawer__backdrop\"\n                    />\n                </CSSTransition>\n                <CSSTransition\n                    in={props.open}\n                    classNames=\"c-drawer\"\n                    timeout={TRANSITION_TIMEOUT_MS}\n                    onExit={this.handleExit}\n                    onEntered={props.onEntered}\n                    appear\n                >\n                    <div\n                        className={classNames('c-drawer', {\n                            'c-drawer--has-title':\n                                Boolean(props.title) && !props.hideTitle,\n                        })}\n                        onKeyDown={this.handleKeyDown}\n                        role=\"dialog\"\n                    >\n                        {props.title && (\n                            <Button\n                                ref={this.titleButton}\n                                className=\"c-drawer__title\"\n                                onClick={props.onTitleClick}\n                            >\n                                <span className=\"c-drawer__title__text\">\n                                    {props.title}\n                                </span>\n                            </Button>\n                        )}\n                        <Transition\n                            in={props.open}\n                            timeout={TRANSITION_TIMEOUT_MS}\n                            appear\n                            mountOnEnter\n                            unmountOnExit\n                        >\n                            {props.children}\n                        </Transition>\n                    </div>\n                </CSSTransition>\n            </>,\n            document.body,\n        );\n    }\n\n    private readonly handleBackdropClick = (e: React.MouseEvent<any>) => {\n        if (e.button || !this.props.onDismiss) return;\n        this.props.onDismiss();\n    };\n\n    private readonly handleKeyDown = (e: React.KeyboardEvent<any>) => {\n        const { onDismiss } = this.props;\n\n        if (onDismiss && e.key === Key.Escape) {\n            consumeEvent(e);\n            onDismiss();\n        }\n    };\n\n    private readonly handleExit = () => {\n        focusRef(this.titleButton);\n    };\n}\n\n/**\n * Placeholder element which can be used to make sure scrolling content isn't\n * hidden by the drawer title.\n */\nexport const DrawerTitleSpacer: React.SFC = () => (\n    <div className=\"c-drawer-title-placeholder\" />\n);\n","import React, { FC, useState } from 'react';\nimport { Drawer } from '.';\n\nexport const ToggleDrawer: FC<{\n    activator(props: { openDrawer(): void }): React.ReactNode;\n}> = ({ activator, children }) => {\n    const [open, setOpen] = useState(false);\n    return (\n        <>\n            {activator({ openDrawer: () => setOpen(true) })}\n            <Drawer open={open} onDismiss={() => setOpen(false)}>\n                {children}\n            </Drawer>\n        </>\n    );\n};\n","import React, { FC } from 'react';\n\nimport { Button } from './Button';\nimport { consumeEvent } from './util/Event';\n\n/**\n * A wrapper for a native form that provides Enter-key submission abilities\n * and semantic correctness.\n */\nexport const Form: FC<{\n    className?: string;\n    disableSubmit?: boolean;\n    submitLabel?: React.ReactNode;\n    onSubmit(): void;\n}> = props => (\n    <form\n        className={props.className}\n        onSubmit={e => {\n            consumeEvent(e);\n            if (props.disableSubmit) return;\n            props.onSubmit();\n        }}\n    >\n        {props.children}\n        {props.submitLabel && (\n            <Button disabled={props.disableSubmit} type=\"submit\">\n                {props.submitLabel}\n            </Button>\n        )}\n    </form>\n);\n","import { Component } from 'react';\n\nexport type ChangeHandler<T> = (newVal: T, name?: string) => void;\n\nexport interface ControlledInput<T> {\n    value: T;\n    disabled?: boolean;\n    name?: string;\n    onChange: ChangeHandler<T>;\n}\n\nexport const makeFieldChangeHandler =\n    <T extends {}>(c: Component<ControlledInput<T>>) =>\n    (newVal: T[keyof T], fieldName: keyof T): void => {\n        const { value, onChange, disabled, name } = c.props;\n\n        if (disabled) return;\n\n        if (onChange) {\n            onChange(\n                {\n                    ...(value as any),\n                    [fieldName]: newVal,\n                },\n                name,\n            );\n        }\n    };\n","import classNames from 'classnames';\nimport React from 'react';\n\nimport { ControlledInput } from '../../ControlledInput';\nimport { Focus } from '../util/Focus';\nimport './Input.css';\n\nexport const Input = React.forwardRef<\n    Focus,\n    ControlledInput<string> & {\n        className?: string;\n        label?: string;\n    }\n>(({ onChange, label, className, ...props }, ref) => (\n    <label className={classNames('c-input', className)}>\n        {label && <div className=\"c-input-label\">{label}</div>}\n        <input\n            {...props}\n            ref={ref as any}\n            onChange={e => onChange(e.target.value, props.name)}\n        />\n    </label>\n));\n","import React from 'react';\n\nimport { ControlledInput, makeFieldChangeHandler } from '../../ControlledInput';\nimport { PlayerNames } from '../../models';\nimport { Input } from '../Input';\nimport { Focus } from '../util/Focus';\nimport { focusRef } from '../util/Ref';\nimport './PlayersInput.css';\n\nexport class PlayersInput extends React.Component<\n    ControlledInput<PlayerNames>\n> {\n    private readonly handleChange = makeFieldChangeHandler(this);\n    private readonly focusTarget = React.createRef<Focus>();\n\n    public render(): React.ReactNode {\n        const { value, disabled } = this.props;\n        return (\n            <div className=\"c-players-input\">\n                <Input\n                    ref={this.focusTarget}\n                    label=\"Player 1\"\n                    name=\"player1Name\"\n                    value={value.player1Name}\n                    disabled={disabled}\n                    onChange={this.handleChange}\n                />\n                <Input\n                    label=\"Player 2\"\n                    name=\"player2Name\"\n                    value={value.player2Name}\n                    disabled={disabled}\n                    onChange={this.handleChange}\n                />\n            </div>\n        );\n    }\n\n    public readonly focus = () => focusRef(this.focusTarget);\n}\n","import React, { FC, useRef, useState } from 'react';\n\nimport { PlayerNames } from '../models';\nimport { Button } from './Button';\nimport { Drawer } from './Drawer';\nimport { Form } from './Form';\nimport { PlayersInput } from './PlayersInput';\nimport { Focus } from './util/Focus';\n\nexport interface PlayersFormProps {\n    value: PlayerNames;\n    onPlayersSubmit(players: PlayerNames): void;\n}\n\nexport const PlayersForm: FC<{\n    defaultValue: PlayerNames;\n    onSubmit(names: PlayerNames): void;\n}> = props => {\n    const [isRenaming, setRenaming] = useState(false);\n    const [value, setValue] = useState<PlayerNames | undefined>(undefined);\n    const button = useRef<Focus>(null);\n    const input = useRef<PlayersInput>(null);\n\n    const stopRenaming = () => {\n        setRenaming(false);\n        setValue(undefined);\n        button.current?.focus();\n    };\n\n    return (\n        <>\n            <Button ref={button} onClick={() => setRenaming(true)}>\n                Rename Players\n            </Button>\n            <Drawer\n                open={isRenaming}\n                onDismiss={stopRenaming}\n                onEntered={() => input.current?.focus()}\n            >\n                <Form\n                    onSubmit={() => {\n                        if (!value) return;\n                        props.onSubmit(value);\n                        stopRenaming();\n                    }}\n                    submitLabel=\"Update\"\n                >\n                    <PlayersInput\n                        ref={input}\n                        value={value ?? props.defaultValue}\n                        onChange={v => setValue(v)}\n                    />\n                </Form>\n            </Drawer>\n        </>\n    );\n};\n","import { Cmd, Loop, loop, LoopReducer } from 'redux-loop';\nimport { Action } from './Actions';\nimport { persistState } from './Effects';\nimport { Game } from './models';\nimport { State } from './State';\n\nexport const gameSelector = (state: State): Game[] => state.games;\n\nexport const playerNameSelector = ({\n    player1Name,\n    player2Name,\n}: State): Pick<State, 'player1Name' | 'player2Name'> => ({\n    player1Name,\n    player2Name,\n});\n\nexport const canUndoSelector = ({ games }: State): boolean =>\n    Boolean(games.length);\n\nexport const reducer: LoopReducer<State, Action> = (\n    state: State,\n    action: Action,\n) => {\n    switch (action.type) {\n        case 'RenamePlayers': {\n            const { player1Name, player2Name } = action;\n            return persisted({\n                ...state,\n                player1Name,\n                player2Name,\n            });\n        }\n        case 'FinishGame': {\n            return persisted({\n                ...state,\n                games: [...state.games, action.result],\n            });\n        }\n        case 'UndoGame': {\n            return persisted({\n                ...state,\n                games: state.games.slice(0, state.games.length - 1),\n            });\n        }\n        case 'StartNewMatch': {\n            return persisted({\n                ...state,\n                games: [],\n            });\n        }\n        default: {\n            return state;\n        }\n    }\n};\n\nconst persisted = (state: State): Loop<State> =>\n    loop(\n        state,\n        Cmd.run(persistState, {\n            args: [state],\n        }),\n    );\n","import React, { FC } from 'react';\n\nimport { connect } from 'react-redux';\nimport { Button } from 'src/components/Button';\nimport { PlayerNames } from 'src/models';\nimport { creators } from '../../Actions';\nimport { PlayersForm } from '../../components/PlayersForm';\nimport { canUndoSelector, playerNameSelector } from '../../Reducer';\nimport { State } from '../../State';\n\ninterface StateProps {\n    playerNames: PlayerNames;\n    canUndo: boolean;\n}\n\ninterface DispatchProps {\n    onRenamePlayers: typeof creators.RenamePlayers;\n    onStartNewMatch(): void;\n    onUndoGame(): void;\n}\n\nconst mapStateToProps = (state: State): StateProps => ({\n    playerNames: playerNameSelector(state),\n    canUndo: canUndoSelector(state),\n});\n\nconst mapDispatchToProps: DispatchProps = {\n    onStartNewMatch: creators.StartNewMatch,\n    onRenamePlayers: creators.RenamePlayers,\n    onUndoGame: creators.UndoGame,\n};\n\nconst DisconnectedCommandBar: FC<StateProps & DispatchProps> = props => (\n    <div className=\"c-command-bar\">\n        <Button onClick={props.onUndoGame} disabled={!props.canUndo}>\n            Undo Last Game\n        </Button>\n        <Button onClick={props.onStartNewMatch}>New Match</Button>\n        <PlayersForm\n            defaultValue={props.playerNames}\n            onSubmit={props.onRenamePlayers}\n        />\n    </div>\n);\n\nexport const CommandBar = connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(DisconnectedCommandBar);\n","import { Game, Gin, otherPlayer, Player, PlayerNames, PLAYERS } from '.';\n\n// Output models for showing the result of a match.\n\n/**\n * A bonus awarded to a player at the end of a set. For example,\n * the first player to exceed 100 game points receives a 100-point\n * bonus for \"going over\".\n */\nexport interface Bonus {\n    player: Player;\n    points: number;\n    label: string;\n}\n\nexport interface GameInSet extends Game {\n    runningTotal: number;\n}\n\nexport type GinSet = GinSetInProgress | GinSetFinal;\n\nexport interface GinSetInProgress {\n    games: GameInSet[];\n    currentScores: {\n        [Player.One]: number;\n        [Player.Two]: number;\n    };\n    bonuses: Bonus[];\n    finalResult?: never;\n}\n\nexport interface GinSetFinal {\n    games: GameInSet[];\n    currentScores?: never;\n    bonuses: Bonus[];\n    finalResult: GinSetResult;\n}\n\nexport interface GinSetResult {\n    winner: Player;\n    /**\n     * The total number of points the player earned for the set.\n     */\n    points: number;\n}\n\nexport interface GinMatch extends PlayerNames {\n    games: Game[];\n    sets: GinSet[];\n    finalResult?: GinMatchResult;\n}\n\nexport interface GinMatchResult {\n    /**\n     * Whether the winning player won every single match. In this case,\n     * the `points` property will be 2x the sum of the three sets.\n     */\n    isHollywood: boolean;\n    winner: Player;\n    points: number;\n}\n\nexport const reduceGamesToMatch =\n    (players: PlayerNames) =>\n    (games: Game[]): GinMatch => {\n        const sets = reduceGames(games);\n        const finalResult = sets.every(isSetFinished)\n            ? computeMatchResult(sets, games)\n            : undefined;\n\n        return {\n            ...players,\n            games,\n            sets,\n            finalResult,\n        };\n    };\n\n/**\n * Reduce a sequence of games into three sets.\n *\n * @param games A sequence of games in order played\n */\nexport const reduceGames = (games: Game[]): [GinSet, GinSet, GinSet] => {\n    const [frame1, frame1End] = reduceSet(games);\n    const [frame2, frame2End] = reduceSet(games, 1, [frame1End]);\n    const [frame3] = reduceSet(games, 2, [frame1End, frame2End]);\n\n    return [frame1, frame2, frame3];\n};\n\n/**\n * Checks if a set is finished. This function assumes that sets are built by\n * `reduceSet` and therefore will always have bonuses applied as soon as a\n * player \"goes out\".\n */\nexport const isSetFinished = (ginSet: GinSet): ginSet is GinSetFinal =>\n    Boolean(ginSet.finalResult);\n\nexport const isSetInProgress = (ginSet: GinSet): ginSet is GinSetInProgress =>\n    Boolean(ginSet.currentScores);\n\n/**\n * Transform a sequence of games into a set.\n * @param games A raw sequence of games\n * @param offset The 0-indexed frame number. In gin, a player's first win\n * is not propagated to frames 2 or 3.\n * @param endIndices The index of the last game from the previous set.\n *\n * @return An array containing a gin set, and - if the set is finished - the\n * index of the last game processed.\n */\nconst reduceSet = (\n    games: Game[],\n    offset: number = 0,\n    endIndices: (number | undefined)[] = [],\n): [GinSet, number?] => {\n    /**\n     * Map of player ID to win count, adjusted for the frame entry requirement.\n     * This is used for applying bonuses for win count at the end of the frame,\n     * in addition to gating game entry into the frame.\n     */\n    const wins = {\n        [Player.One]: offset * -1,\n        [Player.Two]: offset * -1,\n    };\n\n    const scores = {\n        [Player.One]: 0,\n        [Player.Two]: 0,\n    };\n\n    const setGames: GameInSet[] = [];\n    const bonuses: Bonus[] = [];\n\n    endIndices.reverse();\n    let nextEnd = endIndices.pop();\n\n    for (const [index, game] of games.entries()) {\n        console.info('set', offset, 'game', index, nextEnd, wins);\n        // If we've passed the end of a previous set, then we reduce the barrier\n        // to entry for the current set by 1 if the player is winless.\n        if (typeof nextEnd === 'number' && index >= nextEnd + 1) {\n            wins[Player.One] = Math.max(\n                -1 * endIndices.length,\n                wins[Player.One],\n            );\n            wins[Player.Two] = Math.max(\n                -1 * endIndices.length,\n                wins[Player.Two],\n            );\n            nextEnd = endIndices.pop();\n        }\n\n        // Increment win counter to maybe qualify for frame and to\n        // ensure the player gets credit for the win in bonus calculation.\n        wins[game.winner] += 1;\n\n        // For frame 2 and frame 3, skip games that don't qualify\n        if (wins[game.winner] <= 0) continue;\n\n        scores[game.winner] += game.points;\n        const runningTotal = scores[game.winner];\n\n        setGames.push({\n            ...game,\n            runningTotal,\n        });\n\n        if (runningTotal >= 100) {\n            bonuses.push({\n                player: game.winner,\n                points: 100,\n                label: 'Going out',\n            });\n\n            PLAYERS.forEach(player => {\n                if (wins[player] > 0) {\n                    bonuses.push({\n                        player,\n                        points: 10 * wins[player],\n                        label: 'Wins',\n                    });\n                }\n            });\n\n            PLAYERS.forEach(player => {\n                const points = setGames\n                    .filter(wonBy(player))\n                    .reduce((bonus, g) => bonus + ginBonus(g.gin), 0);\n\n                if (points) {\n                    bonuses.push({\n                        player,\n                        points,\n                        label: 'Gins',\n                    });\n                }\n            });\n\n            if (wins[Player.Two] <= 0) {\n                bonuses.push({\n                    player: Player.One,\n                    points:\n                        runningTotal +\n                        bonuses\n                            .filter(g => g.player === Player.One)\n                            .reduce((b, { points }) => b + points, 0),\n                    label: 'Blitz',\n                });\n            }\n\n            if (wins[Player.One] <= 0) {\n                bonuses.push({\n                    player: Player.Two,\n                    points:\n                        runningTotal +\n                        bonuses\n                            .filter(g => g.player === Player.Two)\n                            .reduce((b, { points }) => b + points, 0),\n                    label: 'Blitz',\n                });\n            }\n\n            scores[Player.One] += bonuses\n                .filter(g => g.player === Player.One)\n                .reduce((b, { points }) => b + points, 0);\n\n            scores[Player.Two] += bonuses\n                .filter(g => g.player === Player.Two)\n                .reduce((b, { points }) => b + points, 0);\n\n            const finalResult = {\n                winner: getWinner(scores),\n                points: Math.abs(scores[Player.One] - scores[Player.Two]),\n            };\n\n            // We don't include running totals if the game has ended\n            return [{ bonuses, finalResult, games: setGames }, index];\n        }\n    }\n\n    return [\n        {\n            bonuses,\n            currentScores: scores,\n            games: setGames,\n        },\n        // The game didn't end, so no end marker is returned.\n        undefined,\n    ];\n};\n\nconst getWinner = (scores: {\n    [Player.One]: number;\n    [Player.Two]: number;\n}): Player =>\n    scores[Player.One] > scores[Player.Two] ? Player.One : Player.Two;\n\nconst ginBonus = (gin: Gin): number => {\n    switch (gin) {\n        case Gin.None:\n            return 0;\n        case Gin.Normal:\n            return 25;\n        case Gin.Super:\n            return 50;\n    }\n};\n\nconst wonBy =\n    (player: Player) =>\n    (game: Game): boolean =>\n        game.winner === player;\n\nconst computeMatchResult = (sets: GinSet[], games: Game[]): GinMatchResult => {\n    const scores = {\n        [Player.One]: 0,\n        [Player.Two]: 0,\n    };\n\n    sets.forEach(v => (scores[v.finalResult!.winner] += v.finalResult!.points));\n\n    const winner = getWinner(scores);\n    const isHollywood = games.every(wonBy(winner));\n    return {\n        winner,\n        isHollywood,\n        points: isHollywood\n            ? 2 * scores[winner]\n            : scores[winner] - scores[otherPlayer(winner)],\n    };\n};\n","export * from './outcome';\n\nexport enum Player {\n    One = 1,\n    Two = 2,\n}\n\nexport const PLAYERS = [Player.One, Player.Two];\n\nexport interface PlayerNames {\n    player1Name: string;\n    player2Name: string;\n}\n\n/**\n * Get the name of a player from a pair of names.\n */\nexport const nameOfPlayer = (players: PlayerNames, player: Player): string =>\n    player === Player.One ? players.player1Name : players.player2Name;\n\n/**\n * Get the opponent of the passed-in player.\n */\nexport const otherPlayer = (player: Player): Player =>\n    player === Player.One ? Player.Two : Player.One;\n\nexport enum Gin {\n    None = 'none',\n    Normal = 'normal',\n    Super = 'super',\n}\n\n/**\n * A single game of gin; undercuts are not tracked separately.\n */\nexport interface Game {\n    winner: Player;\n    points: number;\n    gin: Gin;\n}\n\nexport const Game = {\n    guard: (x: any): x is Game =>\n        x.winner !== null &&\n        typeof x === 'object' &&\n        typeof x.points === 'number' &&\n        typeof x.gin === 'string' &&\n        x.winner !== undefined,\n};\n","import { Game, Gin, otherPlayer, Player } from '.';\n\nexport interface PerPlayer<T = number> {\n    [Player.One]: T;\n    [Player.Two]: T;\n}\n\nexport interface Stats {\n    /**\n     * The number of games won by each player in the current match.\n     */\n    wins: PerPlayer;\n    /**\n     * The maximum number of consecutive games won by each player in\n     * the current match.\n     */\n    maxStreak: PerPlayer;\n    /**\n     * The average number of points each player received on winning a\n     * game in the current match.\n     */\n    meanWinSize: PerPlayer;\n    /**\n     * The max number of points earned by each player in a single game.\n     */\n    biggestWin: PerPlayer;\n    /**\n     * The number of games in which a player earned normal and super gins.\n     * A gin in multiple columns will only count once in this stat.\n     */\n    ginGames: PerPlayer<{ [Gin.Normal]: number; [Gin.Super]: number }>;\n}\n\nconst newPerPlayer = (): PerPlayer => ({\n    [Player.One]: 0,\n    [Player.Two]: 0,\n});\n\nexport const reduceGamesToStats = (games: Game[]): Stats => {\n    const wins = reduceGamesToWins(games);\n\n    return {\n        wins,\n        meanWinSize: reduceGamesToMeanPoints(games, wins),\n        maxStreak: reduceGamesToMaxStreak(games),\n        biggestWin: reduceGamesToBiggestWin(games),\n        ginGames: reduceGamesToGins(games),\n    };\n};\n\nconst reduceGamesToWins = (games: Game[]): PerPlayer =>\n    games.reduce((state, game) => {\n        state[game.winner] += 1;\n        return state;\n    }, newPerPlayer());\n\nconst reduceGamesToMeanPoints = (games: Game[], wins: PerPlayer): PerPlayer => {\n    const perPlayer = games.reduce((state, game) => {\n        state[game.winner] += game.points;\n        return state;\n    }, newPerPlayer());\n    if (wins[Player.One]) perPlayer[Player.One] /= wins[Player.One];\n    if (wins[Player.Two]) perPlayer[Player.Two] /= wins[Player.Two];\n\n    return perPlayer;\n};\n\nconst reduceGamesToMaxStreak = (games: Game[]): PerPlayer => {\n    const currentStreak = newPerPlayer();\n    const maxStreak = newPerPlayer();\n\n    for (const game of games) {\n        currentStreak[game.winner] += 1;\n        currentStreak[otherPlayer(game.winner)] = 0;\n\n        if (currentStreak[game.winner] > maxStreak[game.winner]) {\n            maxStreak[game.winner] = currentStreak[game.winner];\n        }\n    }\n\n    return maxStreak;\n};\n\nconst reduceGamesToBiggestWin = (games: Game[]): PerPlayer =>\n    games.reduce((state, game) => {\n        state[game.winner] = Math.max(state[game.winner], game.points);\n        return state;\n    }, newPerPlayer());\n\nconst reduceGamesToGins = (\n    games: Game[],\n): PerPlayer<{ [Gin.Normal]: number; [Gin.Super]: number }> =>\n    games.reduce(\n        (state, game) => {\n            if (game.gin !== Gin.None) {\n                state[game.winner][game.gin] += 1;\n            }\n\n            return state;\n        },\n        {\n            [Player.One]: { [Gin.Normal]: 0, [Gin.Super]: 0 },\n            [Player.Two]: { [Gin.Normal]: 0, [Gin.Super]: 0 },\n        },\n    );\n","import classNames from 'classnames';\nimport React, { FC } from 'react';\n\nimport { ControlledInput } from '../ControlledInput';\n\nexport interface NumberInputProps extends ControlledInput<number | null> {\n    min?: number;\n    max?: number;\n    step?: number;\n    className?: string;\n}\n\nexport const NumberInput: FC<NumberInputProps> = props => {\n    const { value, className, ...rest } = props;\n    return (\n        <input\n            {...rest}\n            className={classNames('c-number-input', className)}\n            type=\"number\"\n            value={value !== null ? value.toString() : ''}\n            onChange={evt => {\n                props.onChange(parseInputToInt(evt.target.value), props.name);\n            }}\n        />\n    );\n};\n\nconst parseInputToInt = (text: string): number | null =>\n    text === '' ? null : Number.parseInt(text, 10);\n","import classNames from 'classnames';\nimport React from 'react';\n\nimport { focusRef, refChildHasFocus } from '../util/Ref';\nimport './Radio.css';\n\nexport interface RadioProps<T extends string | number = string> {\n    className?: string;\n    label?: string;\n    selected: boolean;\n    value: T;\n    disabled?: boolean;\n    name?: string;\n    /**\n     * When `true`, the native radio element will be rendered as 0x0 to avoid\n     * showing. The caller should then use classes to style the component as-desired.\n     */\n    hideNative?: boolean;\n    onChange(newValue: T, name?: string): void;\n}\n\nexport class Radio<T extends string | number = string> extends React.Component<\n    RadioProps<T>\n> {\n    private readonly root = React.createRef<HTMLLabelElement>();\n\n    // tslint:disable-next-line:member-ordering\n    public readonly hasFocus = refChildHasFocus(this.root);\n\n    public render(): React.ReactNode {\n        const { className, children, value, label, ...props } = this.props;\n\n        return (\n            <label\n                ref={this.root}\n                className={classNames('c-radio', className, {\n                    'c-radio--checked': props.selected,\n                    'c-radio--disabled': props.disabled,\n                    'c-radio--nonative': props.hideNative,\n                    'c-radio--has-focus': this.hasFocus(),\n                })}\n            >\n                <input\n                    name={props.name}\n                    disabled={props.disabled}\n                    checked={props.selected}\n                    onChange={this.handleChange}\n                    value={value.toString()}\n                    type=\"radio\"\n                    onFocus={this.handleFocusChange}\n                    onBlur={this.handleFocusChange}\n                />\n                {label}\n            </label>\n        );\n    }\n\n    public readonly focus = () => focusRef(this.root);\n\n    private readonly handleFocusChange = () => this.forceUpdate();\n\n    private readonly handleChange = () => {\n        this.props.onChange?.(this.props.value, this.props.name);\n    };\n}\n","import classNames from 'classnames';\nimport React from 'react';\n\nimport { ControlledInput } from '../../ControlledInput';\nimport { Radio } from '../Radio';\nimport { focusRef } from '../util/Ref';\nimport './RadioGroup.css';\n\nexport interface Choice<T extends string | number = string> {\n    label: string;\n    value: T;\n}\n\nexport interface RadioGroupProps<T extends string | number = string>\n    extends ControlledInput<T> {\n    className?: string;\n    label?: string;\n    choices: Choice<T>[];\n    name: string;\n    hideNative?: boolean;\n    horizontal?: boolean;\n}\n\n/** A set of radio buttons */\nexport class RadioGroup<\n    T extends string | number = string,\n> extends React.Component<RadioGroupProps<T>> {\n    private readonly first = React.createRef<Radio<T>>();\n\n    public render(): React.ReactNode {\n        const { className, name, ...props } = this.props;\n        return (\n            <div\n                className={classNames('c-radio-group', className, {\n                    'c-radio-group--horizontal': props.horizontal,\n                    'c-radio-group--hide-native': props.hideNative,\n                })}\n            >\n                {props.label && (\n                    <span className=\"c-radio-group__label\">{props.label}</span>\n                )}\n                {props.choices.map((choice, idx) => (\n                    <Radio<T>\n                        {...choice}\n                        key={choice.value}\n                        ref={idx === 0 ? this.first : undefined}\n                        name={name}\n                        disabled={props.disabled}\n                        hideNative={props.hideNative}\n                        selected={props.value === choice.value}\n                        onChange={props.onChange}\n                    />\n                ))}\n            </div>\n        );\n    }\n\n    public focus = () => focusRef(this.first);\n}\n","import React from 'react';\n\nimport { ControlledInput, makeFieldChangeHandler } from '../../ControlledInput';\nimport { Game, Gin, Player } from '../../models';\nimport { NumberInput } from '../NumberInput';\nimport { RadioGroup } from '../RadioGroup';\nimport { focusRef } from '../util/Ref';\nimport './GameInput.css';\n\n/**\n * A variant of the `Game` interface optimized for input.\n */\nexport interface PartialGame {\n    winner: Game['winner'];\n    points: number | null;\n    gin: Game['gin'];\n}\n\nconst DEFAULT_PARTIAL_GAME: PartialGame = {\n    winner: Player.One,\n    points: null,\n    gin: Gin.None,\n};\n\nexport const PartialGame = {\n    DEFAULT: DEFAULT_PARTIAL_GAME,\n};\n\nexport interface GameInputProps extends ControlledInput<PartialGame> {\n    player1Name: string;\n    player2Name: string;\n}\n\nexport class GameInput extends React.Component<GameInputProps> {\n    private readonly focusTarget = React.createRef<RadioGroup<Player>>();\n    private readonly handleChange = makeFieldChangeHandler(this);\n\n    public render(): React.ReactNode {\n        const { value, disabled, ...props } = this.props;\n\n        return (\n            <div className=\"c-game-input\">\n                <RadioGroup<Player>\n                    name=\"winner\"\n                    className=\"c-game-input__players\"\n                    choices={[\n                        { value: Player.One, label: props.player1Name },\n                        { value: Player.Two, label: props.player2Name },\n                    ]}\n                    value={value.winner}\n                    disabled={disabled}\n                    label=\"Winner\"\n                    onChange={this.handleChange}\n                    hideNative\n                    horizontal\n                    ref={this.focusTarget}\n                />\n                <div className=\"c-game-input__points\">\n                    <NumberInput\n                        name=\"points\"\n                        value={value.points}\n                        min={1}\n                        disabled={disabled}\n                        onChange={this.handleChange}\n                    />\n                    &nbsp; points\n                </div>\n                <RadioGroup<Gin>\n                    name=\"gin\"\n                    value={value.gin}\n                    className=\"c-game-input__gin\"\n                    choices={[\n                        { value: Gin.None, label: 'No Gin' },\n                        { value: Gin.Normal, label: 'Gin' },\n                        { value: Gin.Super, label: 'Super Gin' },\n                    ]}\n                    disabled={disabled}\n                    onChange={this.handleChange}\n                    horizontal\n                    hideNative\n                />\n            </div>\n        );\n    }\n\n    public readonly focus = () => focusRef(this.focusTarget);\n}\n","import React, { FC } from 'react';\n\nimport classNames from 'classnames';\nimport { Bonus, GameInSet, Gin, GinSet, Player, PlayerNames } from 'src/models';\nimport './ScoreColumn.css';\n\nexport const ScoreColumn: FC<\n    PlayerNames & {\n        className?: string;\n        value: GinSet;\n    }\n> = ({ value, ...props }) => (\n    <div className={classNames('c-scorecolumn', props.className)}>\n        <div className=\"c-scorecolumn__header\">\n            <div className=\"c-scorecolumn__player\">{props.player1Name}</div>\n            <div className=\"c-scorecolumn__player\">{props.player2Name}</div>\n        </div>\n        {value.games.map((game, index) => (\n            <ScoreRow {...game} key={`game-${index}`} />\n        ))}\n        {value.bonuses.map((bonus, index) => (\n            <BonusRow key={`bonus-${index}`} {...bonus} isFirst={index === 0} />\n        ))}\n    </div>\n);\n\nconst ScoreRow: React.SFC<GameInSet> = ({ winner, gin, runningTotal }) => {\n    const winnerCell = (\n        <div className=\"c-scorerow__winner\" data-gin={gin} key=\"winner\">\n            {runningTotal}\n            {gin !== Gin.None && (\n                <span className=\"c-scorerow__winner__gin__star\">\n                    {' '}\n                    {gin === Gin.Normal && '★'}\n                    {gin === Gin.Super && '★★'}\n                </span>\n            )}\n        </div>\n    );\n    const loserCell = <div className=\"c-scorerow__loser\" key=\"loser\" />;\n\n    return (\n        <div className=\"c-scorerow\">\n            {winner === Player.One\n                ? [winnerCell, loserCell]\n                : [loserCell, winnerCell]}\n        </div>\n    );\n};\n\nconst BonusRow: React.SFC<Bonus & { isFirst?: boolean }> = props => {\n    const bonusCell = (\n        <div className=\"c-bonusrow__recipient\" key=\"winner\">\n            <span className=\"c-bonusrow__points\">{props.points}</span>\n            <span className=\"c-bonusrow__label\">{props.label}</span>\n        </div>\n    );\n\n    const loserCell = <div className=\"c-bonusrow__loser\" key=\"loser\" />;\n\n    return (\n        <div\n            className={classNames('c-bonusrow', {\n                'c-bonusrow--first': props.isFirst,\n            })}\n        >\n            {props.player === Player.One\n                ? [bonusCell, loserCell]\n                : [loserCell, bonusCell]}\n        </div>\n    );\n};\n","import classNames from 'classnames';\nimport React from 'react';\n\nimport './ScrollViewer.css';\n\nexport interface ScrollViewerProps {\n    className?: string;\n    overflowX?: 'hidden' | 'auto';\n    overflowY?: 'hidden' | 'auto';\n}\n\nexport const ScrollViewer: React.SFC<ScrollViewerProps> = ({\n    className,\n    children,\n    overflowX = 'auto' as 'auto',\n    overflowY = 'auto' as 'auto',\n}) => (\n    <div\n        className={classNames('c-scroll-viewer', className)}\n        style={{ overflowX, overflowY }}\n    >\n        {children}\n    </div>\n);\n","import React, { FC } from 'react';\n\nimport classNames from 'classnames';\nimport {\n    GinSet,\n    isSetFinished,\n    nameOfPlayer,\n    Player,\n    PlayerNames,\n} from '../../models';\nimport './Summary.css';\n\nexport interface SetSummaryProps extends PlayerNames {\n    className?: string;\n    value: GinSet;\n    onClick?(): void;\n}\n\nexport const SetSummary: FC<SetSummaryProps> = props => {\n    const { value, ...outerProps } = props;\n    // If a player has won the set, don't show loser's points\n    if (isSetFinished(value)) {\n        return (\n            <SetSummaryContainer {...outerProps} finished>\n                <span className=\"c-set-summary--final__winner\">\n                    {nameOfPlayer(props, value.finalResult.winner)} won\n                </span>\n                <span className=\"c-set-summary--final__points\">\n                    {value.finalResult.points}\n                </span>\n            </SetSummaryContainer>\n        );\n    }\n\n    return (\n        <SetSummaryContainer {...outerProps}>\n            <div className=\"c-set-summary__player\">\n                <span className=\"c-set-summary__player-name\">\n                    {props.player1Name}\n                </span>\n                <span className=\"c-set-summary__points\">\n                    {value.currentScores[Player.One]}\n                </span>\n            </div>\n            <div className=\"c-set-summary__player\">\n                <span className=\"c-set-summary__player-name\">\n                    {props.player2Name}\n                </span>\n                <span className=\"c-set-summary__points\">\n                    {value.currentScores[Player.Two]}\n                </span>\n            </div>\n        </SetSummaryContainer>\n    );\n};\n\n/**\n * Outer container element for the set summary.\n */\nconst SetSummaryContainer: FC<\n    Pick<SetSummaryProps, 'className' | 'onClick'> & { finished?: boolean }\n> = ({ className, onClick, finished, children }) => (\n    <div\n        className={classNames(\n            'c-set-summary',\n            finished ? 'c-set-summary--final' : 'c-set-summary--in-progress',\n            className,\n            {\n                'c-set-summary--clickable': Boolean(onClick),\n            },\n        )}\n        onClick={onClick}\n    >\n        {children}\n    </div>\n);\n","import React from 'react';\n\nimport { GinSet, PlayerNames } from '../../models';\nimport { ToggleDrawer } from '../Drawer';\nimport { ScoreColumn } from '../ScoreColumn';\nimport './SetView.css';\nimport { SetSummary } from './Summary';\n\nexport interface SetViewProps extends PlayerNames {\n    value: GinSet;\n}\n\nexport class SetView extends React.PureComponent<SetViewProps> {\n    public render(): React.ReactNode {\n        return (\n            <ToggleDrawer\n                activator={({ openDrawer }) => (\n                    <SetSummary\n                        {...this.props}\n                        onClick={openDrawer}\n                        className=\"c-set-view\"\n                    />\n                )}\n            >\n                <ScoreColumn\n                    {...this.props}\n                    className=\"c-set-view__score-column\"\n                />\n            </ToggleDrawer>\n        );\n    }\n}\n","import { identity } from 'lodash';\nimport React, { FC, ReactChild, ReactElement, ReactNode } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { Gin, nameOfPlayer, Player } from 'src/models';\nimport { PerPlayer, Stats } from 'src/models/stats';\nimport { playerNameSelector } from 'src/Reducer';\nimport './StatsViewer.css';\n\ntype StatRowRenderer = <T extends unknown>(\n    title: ReactNode,\n    value: PerPlayer<T>,\n    formatter: (value: T) => ReactChild,\n) => ReactNode;\n\nexport const StatsViewer: FC<{\n    value: Stats;\n    layout: 'grid' | 'stack';\n}> = ({ value, layout }) => {\n    switch (layout) {\n        case 'stack':\n            return <StatsStack value={value} />;\n        case 'grid':\n            return <StatsGrid value={value} />;\n    }\n};\n\nconst StatsStack: FC<{ value: Stats }> = ({ value }) => (\n    <div className=\"c-stats-viewer\">\n        {renderStats(\n            (title, v, formatter) => (\n                <StackRow title={title} value={v} formatter={formatter} />\n            ),\n            value,\n        )}\n    </div>\n);\n\nconst StackRow = <T extends unknown>(props: {\n    value: PerPlayer<T>;\n    title: ReactNode;\n    formatter(value: T): ReactChild;\n}): ReactElement => {\n    const players = useSelector(playerNameSelector);\n    return (\n        <div className=\"c-share-chart\">\n            <h3>{props.title}</h3>\n            {nameOfPlayer(players, Player.One)}:{' '}\n            {props.formatter(props.value[Player.One])}\n            <br />\n            {nameOfPlayer(players, Player.Two)}:{' '}\n            {props.formatter(props.value[Player.Two])}\n            <br />\n        </div>\n    );\n};\n\nconst formatNumber = (value: number) =>\n    value % 1 === 0 ? value.toString() : value.toFixed(2);\n\nconst formatGinCount = (value: {\n    [Gin.Normal]: number;\n    [Gin.Super]: number;\n}): ReactChild => {\n    const normals = value[Gin.Normal];\n    const supers = value[Gin.Super];\n\n    const normal = <span style={{ whiteSpace: 'nowrap' }}>{normals}★</span>;\n    const superSpan = <span style={{ whiteSpace: 'nowrap' }}>{supers}★★</span>;\n\n    if (normals && supers) {\n        return (\n            <>\n                {normal} <span style={{ opacity: 0.5 }}>|</span> {superSpan}\n            </>\n        );\n    } else if (normals) return normal;\n    else if (supers) return superSpan;\n    else return 0;\n};\n\nconst StatsGrid: FC<{ value: Stats }> = ({ value }) => {\n    const players = useSelector(playerNameSelector);\n\n    return (\n        <table className=\"c-stats-viewer c-stats-viewer--grid\">\n            <thead>\n                <tr>\n                    <td>{nameOfPlayer(players, Player.One)}</td>\n                    <td></td>\n                    <td>{nameOfPlayer(players, Player.Two)}</td>\n                </tr>\n            </thead>\n            <tbody>\n                {renderStats(\n                    (title, v, formatter) => (\n                        <StatsGridRow\n                            title={title}\n                            value={v}\n                            formatter={formatter}\n                        />\n                    ),\n                    value,\n                )}\n            </tbody>\n        </table>\n    );\n};\n\nconst StatsGridRow = <T extends unknown>(props: {\n    value: PerPlayer<T>;\n    title: ReactNode;\n    formatter(value: T): ReactChild;\n}): ReactElement => (\n    <tr>\n        <td>{props.formatter(props.value[Player.One])}</td>\n        <td>{props.title}</td>\n        <td>{props.formatter(props.value[Player.Two])}</td>\n    </tr>\n);\n\nconst renderStats = (row: StatRowRenderer, value: Stats): ReactNode => (\n    <>\n        {row('Wins', value.wins, identity)}\n        {row('Max Streak', value.maxStreak, identity)}\n        {row('Mean PPG', value.meanWinSize, formatNumber)}\n        {row('Biggest Win', value.biggestWin, identity)}\n        {row('Gins', value.ginGames, formatGinCount)}\n    </>\n);\n","import classNames from 'classnames';\nimport React, { FC } from 'react';\n\nimport { GinMatchResult, Player, PlayerNames } from 'src/models';\nimport { Button } from '../Button';\nimport './MatchResultViewer.css';\n\nexport const MatchResultViewer: FC<\n    GinMatchResult &\n        PlayerNames & {\n            className?: string;\n            onNewMatch?(): void;\n        }\n> = props => (\n    <div className={classNames('c-match-result-viewer', classNames)}>\n        <div className=\"c-match-result-viewer__winner\">\n            {props.winner === Player.One\n                ? props.player1Name\n                : props.player2Name}{' '}\n            wins!\n        </div>\n        <div className=\"c-match-result-viewer__points\">\n            <span className=\"c-match-result-viewer__points-value\">\n                {props.points}\n            </span>\n            &nbsp;\n            <span className=\"c-match-result-viewer__points-label\">points</span>\n        </div>\n        <div className=\"c-match-result-viewer__actions\">\n            {props.onNewMatch && (\n                <Button onClick={props.onNewMatch}>Play again</Button>\n            )}\n        </div>\n    </div>\n);\n","import classNames from 'classnames';\nimport React, { FC, useMemo, useRef, useState } from 'react';\nimport MediaQuery from 'react-responsive';\n\nimport { reduceGamesToStats } from 'src/models/stats';\nimport { Game, GinMatch } from '../../models';\nimport { Drawer, DrawerTitleSpacer } from '../Drawer/Drawer';\nimport { Form } from '../Form';\nimport { GameInput, GameInputProps, PartialGame } from '../GameInput';\nimport { ScoreColumn } from '../ScoreColumn';\nimport { ScrollViewer } from '../ScrollViewer';\nimport { SetView } from '../SetView';\nimport { StatsViewer } from '../StatsViewer';\nimport { focusRef } from '../util/Ref';\nimport { MatchResultViewer } from './MatchResultViewer';\nimport './MatchViewer.css';\n\nexport interface MatchViewerProps {\n    value: GinMatch;\n    readOnly?: boolean;\n    onSubmitGame?(game: Game): void;\n    onNewMatch?(): void;\n}\n\nexport const MatchViewer: FC<MatchViewerProps> = ({\n    value: { player1Name, player2Name, ...value },\n    readOnly,\n    ...props\n}) => {\n    const gameFormRef = useRef<GameForm>(null);\n    const stats = useMemo(() => reduceGamesToStats(value.games), [value.games]);\n    const [drawerOpen, setDrawerOpen] = useState(false);\n\n    const players = { player1Name, player2Name };\n\n    const closeGameForm = (): void => {\n        setDrawerOpen(false);\n    };\n\n    const gameForm = (\n        <GameForm\n            ref={gameFormRef}\n            {...players}\n            onSubmitGame={game => {\n                props.onSubmitGame?.(game);\n                closeGameForm();\n            }}\n        />\n    );\n\n    return (\n        <div\n            className={classNames('c-match-viewer', {\n                'c-match-viewer--finished': Boolean(value.finalResult),\n            })}\n        >\n            <MediaQuery minWidth={600}>\n                <ScrollViewer className=\"c-match-viewer__main\">\n                    <div className=\"c-match-viewer__sets\">\n                        {value.sets.map((s, i) => (\n                            <ScoreColumn key={i} {...players} value={s} />\n                        ))}\n                    </div>\n                    <StatsViewer value={stats} layout=\"stack\" />\n                </ScrollViewer>\n            </MediaQuery>\n            <MediaQuery maxWidth={600}>\n                <ScrollViewer overflowX=\"hidden\">\n                    {value.sets.map((v, i) => (\n                        <SetView key={i} value={v} {...players} />\n                    ))}\n                    <StatsViewer value={stats} layout=\"grid\" />\n                </ScrollViewer>\n            </MediaQuery>\n            {value.finalResult && (\n                <MatchResultViewer\n                    {...players}\n                    {...value.finalResult}\n                    onNewMatch={props.onNewMatch}\n                />\n            )}\n            {!readOnly && (\n                <>\n                    <MediaQuery maxWidth={1000}>\n                        <DrawerTitleSpacer />\n                        <Drawer\n                            open={drawerOpen}\n                            title=\"Add game\"\n                            onTitleClick={() => {\n                                setDrawerOpen(true);\n                                gameFormRef.current?.focus();\n                            }}\n                            onDismiss={closeGameForm}\n                            hideTitle={!!value.finalResult}\n                        >\n                            {gameForm}\n                        </Drawer>\n                    </MediaQuery>\n                    <MediaQuery minWidth={1000}>\n                        <div className=\"c-match-viewer__add-game\">\n                            <h1>Add game</h1>\n                            {gameForm}\n                        </div>\n                    </MediaQuery>\n                </>\n            )}\n        </div>\n    );\n};\n\ntype GameFormProps = Pick<MatchViewerProps, 'onSubmitGame'> &\n    Pick<GameInputProps, 'player1Name' | 'player2Name' | 'disabled'>;\n\nclass GameForm extends React.Component<GameFormProps, PartialGame> {\n    private readonly input = React.createRef<GameInput>();\n\n    constructor(props: GameFormProps) {\n        super(props);\n        this.state = PartialGame.DEFAULT;\n    }\n\n    public render() {\n        return (\n            <Form\n                className=\"c-gameform\"\n                onSubmit={this.handleSubmit}\n                disableSubmit={this.props.disabled || !Game.guard(this.state)}\n                submitLabel=\"Submit\"\n            >\n                <GameInput\n                    ref={this.input}\n                    player1Name={this.props.player1Name}\n                    player2Name={this.props.player2Name}\n                    disabled={this.props.disabled}\n                    value={this.state}\n                    onChange={this.handleChange}\n                />\n            </Form>\n        );\n    }\n\n    public readonly focus = () => focusRef(this.input);\n\n    private readonly handleChange = (value: PartialGame) => {\n        this.setState(value);\n    };\n\n    private readonly handleSubmit = () => {\n        // Don't allow submission of incomplete games\n        // TODO show an error in this case\n        if (!Game.guard(this.state)) return;\n\n        if (this.props.onSubmitGame) this.props.onSubmitGame(this.state);\n\n        // Wipe the state, so we're ready for the next game input.\n        this.setState(PartialGame.DEFAULT);\n\n        this.focus();\n    };\n}\n","import { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\n\nimport { creators } from '../Actions';\nimport { MatchViewer, MatchViewerProps } from '../components/MatchViewer';\nimport { reduceGamesToMatch } from '../models';\nimport { gameSelector, playerNameSelector } from '../Reducer';\nimport { State } from '../State';\n\nconst matchSelector = createSelector(\n    gameSelector,\n    playerNameSelector,\n    (games, players) => reduceGamesToMatch(players)(games),\n);\n\ntype StateProps = Pick<MatchViewerProps, 'value'>;\ntype DispatchProps = Pick<MatchViewerProps, 'onSubmitGame' | 'onNewMatch'>;\n\nconst mapStateToProps = (state: State): StateProps => ({\n    value: matchSelector(state),\n});\n\nconst mapDispatchToProps: DispatchProps = {\n    onSubmitGame: creators.FinishGame,\n    onNewMatch: creators.StartNewMatch,\n};\n\nexport const CurrentMatchViewer = connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(MatchViewer);\n","import React from 'react';\n\nimport { AppHeader } from '../../components/AppHeader';\nimport { CommandBar } from '../../containers/CommandBar';\nimport { CurrentMatchViewer } from '../../containers/CurrentMatchViewer';\n\nimport './Playing.css';\n\nexport const Playing: React.SFC = props => (\n    <div className=\"l-playing\">\n        <AppHeader />\n        <CommandBar />\n        <CurrentMatchViewer />\n    </div>\n);\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport { install } from 'redux-loop';\nimport './App.css';\n\nimport { retrieveState } from './Effects';\nimport { Playing } from './layouts/playing';\nimport { reducer } from './Reducer';\nimport { INITIAL_STATE } from './State';\n\n// XXX figure out why this didn't work.\nconst devtools = () =>\n    (window as any).__REDUX_DEVTOOLS_EXTENSION__ &&\n    (window as any).__REDUX_DEVTOOLS_EXTENSION__();\n\nexport const middleware = compose(applyMiddleware(devtools), install());\n\nconst store = createStore(\n    reducer,\n    retrieveState() || INITIAL_STATE,\n    // Hook enhancer for redux dev-tools\n    install(),\n);\n\nclass App extends React.Component {\n    public render() {\n        return (\n            <Provider store={store}>\n                <Playing />\n            </Provider>\n        );\n    }\n}\n\nexport default App;\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n        ),\n);\n\nexport default function register() {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            process.env.PUBLIC_URL!,\n            window.location.toString(),\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Lets check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://goo.gl/SC7cgQ',\n                    );\n                });\n            } else {\n                // Is not local host. Just register service worker\n                registerValidSW(swUrl);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker) {\n                    installingWorker.onstatechange = () => {\n                        if (installingWorker.state === 'installed') {\n                            if (navigator.serviceWorker.controller) {\n                                // At this point, the old content will have been purged and\n                                // the fresh content will have been added to the cache.\n                                // It's the perfect time to display a 'New content is\n                                // available; please refresh.' message in your web app.\n                                console.log(\n                                    'New content is available; please refresh.',\n                                );\n                            } else {\n                                // At this point, everything has been precached.\n                                // It's the perfect time to display a\n                                // 'Content is cached for offline use.' message.\n                                console.log(\n                                    'Content is cached for offline use.',\n                                );\n                            }\n                        }\n                    };\n                }\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            if (\n                response.status === 404 ||\n                response.headers.get('content-type')!.indexOf('javascript') ===\n                    -1\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.',\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root') as HTMLElement);\nregisterServiceWorker();\n"],"sourceRoot":""}