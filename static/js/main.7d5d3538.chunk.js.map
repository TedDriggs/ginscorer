{"version":3,"sources":["models/outcome.ts","models/index.ts","State.ts","Effects.ts","components/AppHeader/AppHeader.tsx","components/util/Event.ts","components/Button/index.tsx","Actions.ts","components/util/Ref.ts","components/Drawer/Drawer.tsx","components/Drawer/Toggle.tsx","components/Form.tsx","ControlledInput.ts","components/Input/Input.tsx","components/PlayersInput/PlayersInput.tsx","components/PlayersForm.tsx","Reducer.ts","containers/CommandBar/index.tsx","models/stats.ts","components/NumberInput.tsx","components/Radio/Radio.tsx","components/RadioGroup/RadioGroup.tsx","components/GameInput/GameInput.tsx","components/ScoreColumn/ScoreColumn.tsx","components/ScrollViewer/index.tsx","components/SetView/Summary.tsx","components/SetView/SetView.tsx","components/StatsViewer/StatsViewer.tsx","components/MatchViewer/MatchResultViewer.tsx","components/MatchViewer/MatchViewer.tsx","containers/CurrentMatchViewer.ts","layouts/playing/Playing.tsx","App.tsx","registerServiceWorker.ts","index.tsx"],"names":["reduceGames","games","frame1","frame1End","reduceSet","frame2","frame2End","frame3","isSetFinished","ginSet","Boolean","finalResult","offset","endIndices","wins","[object Object]","Player","One","Two","scores","setGames","bonuses","reverse","nextEnd","pop","index","game","entries","Math","max","length","winner","points","runningTotal","push","Object","assign","player","label","PLAYERS","forEach","filter","wonBy","reduce","bonus","g","ginBonus","gin","b","getWinner","abs","currentScores","undefined","Gin","None","Normal","Super","computeMatchResult","sets","v","isHollywood","every","otherPlayer","nameOfPlayer","players","player1Name","player2Name","Game","guard","x","State","state","version","migrateV1ToV2","UnknownVersionError","MigrationError","Error","message","super","this","INITIAL_STATE","initialDealer","persistState","window","localStorage","setItem","JSON","stringify","Promise","resolve","AppHeader_AppHeader","react_default","a","createElement","className","consumeEvent","e","stopPropagation","preventDefault","Button_Button","forwardRef","_a","ref","primary","props","__rest","classnames_default","onClick","button","confirmation","confirm","creators","UndoGame","type","RenamePlayers","names","FinishGame","result","StartNewMatch","SetInitialDealer","dealer","focusRef","current","focus","refChildHasFocus","_b","contains","document","activeElement","Drawer_Drawer","titleButton","react","react_dom","Fragment","CSSTransition","in","open","timeout","classNames","appear","mountOnEnter","unmountOnExit","onDismiss","call","onExit","onEntered","c-drawer--has-title","title","hideTitle","onKeyDown","key","dist","Escape","role","onTitleClick","Transition","children","body","DrawerTitleSpacer","ToggleDrawer","activator","setOpen","openDrawer","Form","style","onSubmit","disableSubmit","submitLabel","disabled","makeFieldChangeHandler","c","newVal","fieldName","value","onChange","name","Input_Input","Input_rest","target","PlayersInput_PlayersInput_PlayersInput","Component","handleChange","focusTarget","createRef","required","maxLength","PlayersForm","isRenaming","setRenaming","setValue","input","stopRenaming","marginLeft","marginRight","maxWidth","display","flexDirection","defaultValue","height","playerNameSelector","canUndoSelector","dealerSelector","matchHasStartedSelector","persisted","redux_loop_es","run","args","mapDispatchToProps","onStartNewMatch","onRenamePlayers","onUndoGame","CommandBar","es","playerNames","canUndo","hasMatchStarted","newPerPlayer","reduceGamesToWins","reduceGamesToMeanPoints","perPlayer","reduceGamesToMaxStreak","currentStreak","maxStreak","reduceGamesToBiggestWin","reduceGamesToGins","NumberInput","rest","NumberInput_rest","toString","evt","parseInputToInt","text","Number","parseInt","Radio_Radio_Radio","root","hasFocus","handleFocusChange","forceUpdate","Radio_rest","c-radio--checked","selected","c-radio--disabled","c-radio--nonative","hideNative","c-radio--has-focus","checked","onFocus","onBlur","RadioGroup_RadioGroup_RadioGroup","first","RadioGroup_rest","c-radio-group--horizontal","horizontal","c-radio-group--hide-native","choices","map","choice","idx","PartialGame","DEFAULT","GameInput_GameInput_GameInput","GameInput_rest","min","ScoreColumn_ScoreColumn","ScoreColumn_rest","ScoreRow","BonusRow","isFirst","winnerCell","data-gin","loserCell","bonusCell","c-bonusrow--first","ScrollViewer_ScrollViewer","overflowX","overflowY","SetSummary","outerProps","Summary_rest","SetSummaryContainer","finished","c-set-summary--clickable","SetView_SetView_SetView","PureComponent","StatsViewer_StatsViewer","layout","showDealer","StatsStack","StatsGrid","renderStats","formatter","StackRow","formatNumber","toFixed","formatGinCount","normals","supers","normal","whiteSpace","superSpan","opacity","DealerToken","StatsGridRow","row","lodash","meanWinSize","biggestWin","ginGames","dispatch","Arrow","direction","viewBox","width","d","fill","transform","MatchResultViewer_MatchResultViewer","onNewMatch","MatchViewer_GameForm","setState","handleSubmit","onSubmitGame","matchSelector","lib","reduceGamesToMatch","CurrentMatchViewer_mapDispatchToProps","CurrentMatchViewer","MatchViewer_rest","readOnly","gameFormRef","stats","reduceGamesToStats","drawerOpen","setDrawerOpen","closeGameForm","gameForm","c-match-viewer--finished","react_responsive_default","minWidth","s","i","Playing_Playing","store","redux","__REDUX_DEVTOOLS_EXTENSION__","action","slice","raw","getItem","parsed","parse","isState","console","error","retrieveState","src_App_0","isLocalhost","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","catch","getElementById","URL","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.7d5d3538.chunk.js","sourcesContent":["import { Game, Gin, otherPlayer, Player, PlayerNames, PLAYERS } from '.';\n\n// Output models for showing the result of a match.\n\n/**\n * A bonus awarded to a player at the end of a set. For example,\n * the first player to exceed 100 game points receives a 100-point\n * bonus for \"going over\".\n */\nexport interface Bonus {\n    player: Player;\n    points: number;\n    label: string;\n}\n\nexport interface GameInSet extends Game {\n    runningTotal: number;\n}\n\nexport type GinSet = GinSetInProgress | GinSetFinal;\n\nexport interface GinSetInProgress {\n    games: GameInSet[];\n    currentScores: {\n        [Player.One]: number;\n        [Player.Two]: number;\n    };\n    bonuses: Bonus[];\n    finalResult?: never;\n}\n\nexport interface GinSetFinal {\n    games: GameInSet[];\n    currentScores?: never;\n    bonuses: Bonus[];\n    finalResult: GinSetResult;\n}\n\nexport interface GinSetResult {\n    winner: Player;\n    /**\n     * The total number of points the player earned for the set.\n     */\n    points: number;\n}\n\nexport interface GinMatch extends PlayerNames {\n    games: Game[];\n    sets: GinSet[];\n    finalResult?: GinMatchResult;\n}\n\nexport interface GinMatchResult {\n    /**\n     * Whether the winning player won every single match. In this case,\n     * the `points` property will be 2x the sum of the three sets.\n     */\n    isHollywood: boolean;\n    winner: Player;\n    points: number;\n}\n\nexport const reduceGamesToMatch =\n    (players: PlayerNames) =>\n    (games: Game[]): GinMatch => {\n        const sets = reduceGames(games);\n        const finalResult = sets.every(isSetFinished)\n            ? computeMatchResult(sets, games)\n            : undefined;\n\n        return {\n            ...players,\n            games,\n            sets,\n            finalResult,\n        };\n    };\n\n/**\n * Reduce a sequence of games into three sets.\n *\n * @param games A sequence of games in order played\n */\nexport const reduceGames = (games: Game[]): [GinSet, GinSet, GinSet] => {\n    const [frame1, frame1End] = reduceSet(games);\n    const [frame2, frame2End] = reduceSet(games, 1, [frame1End]);\n    const [frame3] = reduceSet(games, 2, [frame1End, frame2End]);\n\n    return [frame1, frame2, frame3];\n};\n\n/**\n * Checks if a set is finished. This function assumes that sets are built by\n * `reduceSet` and therefore will always have bonuses applied as soon as a\n * player \"goes out\".\n */\nexport const isSetFinished = (ginSet: GinSet): ginSet is GinSetFinal =>\n    Boolean(ginSet.finalResult);\n\nexport const isSetInProgress = (ginSet: GinSet): ginSet is GinSetInProgress =>\n    Boolean(ginSet.currentScores);\n\n/**\n * Transform a sequence of games into a set.\n * @param games A raw sequence of games\n * @param offset The 0-indexed frame number. In gin, a player's first win\n * is not propagated to frames 2 or 3.\n * @param endIndices The index of the last game from the previous set.\n *\n * @return An array containing a gin set, and - if the set is finished - the\n * index of the last game processed.\n */\nconst reduceSet = (\n    games: Game[],\n    offset: number = 0,\n    endIndices: (number | undefined)[] = [],\n): [GinSet, number?] => {\n    /**\n     * Map of player ID to win count, adjusted for the frame entry requirement.\n     * This is used for applying bonuses for win count at the end of the frame,\n     * in addition to gating game entry into the frame.\n     */\n    const wins = {\n        [Player.One]: offset * -1,\n        [Player.Two]: offset * -1,\n    };\n\n    const scores = {\n        [Player.One]: 0,\n        [Player.Two]: 0,\n    };\n\n    const setGames: GameInSet[] = [];\n    const bonuses: Bonus[] = [];\n\n    endIndices.reverse();\n    let nextEnd = endIndices.pop();\n\n    for (const [index, game] of games.entries()) {\n        // If we've passed the end of a previous set, then we reduce the barrier\n        // to entry for the current set by 1 if the player is winless.\n        if (typeof nextEnd === 'number' && index >= nextEnd + 1) {\n            wins[Player.One] = Math.max(\n                -1 * endIndices.length,\n                wins[Player.One],\n            );\n            wins[Player.Two] = Math.max(\n                -1 * endIndices.length,\n                wins[Player.Two],\n            );\n            nextEnd = endIndices.pop();\n        }\n\n        // Increment win counter to maybe qualify for frame and to\n        // ensure the player gets credit for the win in bonus calculation.\n        wins[game.winner] += 1;\n\n        // For frame 2 and frame 3, skip games that don't qualify\n        if (wins[game.winner] <= 0) continue;\n\n        scores[game.winner] += game.points;\n        const runningTotal = scores[game.winner];\n\n        setGames.push({\n            ...game,\n            runningTotal,\n        });\n\n        if (runningTotal >= 100) {\n            bonuses.push({\n                player: game.winner,\n                points: 100,\n                label: 'Going out',\n            });\n\n            PLAYERS.forEach(player => {\n                if (wins[player] > 0) {\n                    bonuses.push({\n                        player,\n                        points: 10 * wins[player],\n                        label: 'Wins',\n                    });\n                }\n            });\n\n            PLAYERS.forEach(player => {\n                const points = setGames\n                    .filter(wonBy(player))\n                    .reduce((bonus, g) => bonus + ginBonus(g.gin), 0);\n\n                if (points) {\n                    bonuses.push({\n                        player,\n                        points,\n                        label: 'Gins',\n                    });\n                }\n            });\n\n            if (wins[Player.Two] <= 0) {\n                bonuses.push({\n                    player: Player.One,\n                    points:\n                        runningTotal +\n                        bonuses\n                            .filter(g => g.player === Player.One)\n                            .reduce((b, { points }) => b + points, 0),\n                    label: 'Blitz',\n                });\n            }\n\n            if (wins[Player.One] <= 0) {\n                bonuses.push({\n                    player: Player.Two,\n                    points:\n                        runningTotal +\n                        bonuses\n                            .filter(g => g.player === Player.Two)\n                            .reduce((b, { points }) => b + points, 0),\n                    label: 'Blitz',\n                });\n            }\n\n            scores[Player.One] += bonuses\n                .filter(g => g.player === Player.One)\n                .reduce((b, { points }) => b + points, 0);\n\n            scores[Player.Two] += bonuses\n                .filter(g => g.player === Player.Two)\n                .reduce((b, { points }) => b + points, 0);\n\n            const finalResult = {\n                winner: getWinner(scores),\n                points: Math.abs(scores[Player.One] - scores[Player.Two]),\n            };\n\n            // We don't include running totals if the game has ended\n            return [{ bonuses, finalResult, games: setGames }, index];\n        }\n    }\n\n    return [\n        {\n            bonuses,\n            currentScores: scores,\n            games: setGames,\n        },\n        // The game didn't end, so no end marker is returned.\n        undefined,\n    ];\n};\n\nconst getWinner = (scores: {\n    [Player.One]: number;\n    [Player.Two]: number;\n}): Player =>\n    scores[Player.One] > scores[Player.Two] ? Player.One : Player.Two;\n\nconst ginBonus = (gin: Gin): number => {\n    switch (gin) {\n        case Gin.None:\n            return 0;\n        case Gin.Normal:\n            return 25;\n        case Gin.Super:\n            return 50;\n    }\n};\n\nconst wonBy =\n    (player: Player) =>\n    (game: Game): boolean =>\n        game.winner === player;\n\nconst computeMatchResult = (sets: GinSet[], games: Game[]): GinMatchResult => {\n    const scores = {\n        [Player.One]: 0,\n        [Player.Two]: 0,\n    };\n\n    sets.forEach(v => (scores[v.finalResult!.winner] += v.finalResult!.points));\n\n    const winner = getWinner(scores);\n    const isHollywood = games.every(wonBy(winner));\n    return {\n        winner,\n        isHollywood,\n        points: isHollywood\n            ? 2 * scores[winner]\n            : scores[winner] - scores[otherPlayer(winner)],\n    };\n};\n","export * from './outcome';\n\nexport enum Player {\n    One = 1,\n    Two = 2,\n}\n\nexport const PLAYERS = [Player.One, Player.Two];\n\nexport interface PlayerNames {\n    player1Name: string;\n    player2Name: string;\n}\n\n/**\n * Get the name of a player from a pair of names.\n */\nexport const nameOfPlayer = (players: PlayerNames, player: Player): string =>\n    player === Player.One ? players.player1Name : players.player2Name;\n\n/**\n * Get the opponent of the passed-in player.\n */\nexport const otherPlayer = (player: Player): Player =>\n    player === Player.One ? Player.Two : Player.One;\n\nexport enum Gin {\n    None = 'none',\n    Normal = 'normal',\n    Super = 'super',\n}\n\n/**\n * A single game of gin; undercuts are not tracked separately.\n */\nexport interface Game {\n    winner: Player;\n    points: number;\n    gin: Gin;\n}\n\nexport const Game = {\n    guard: (x: any): x is Game =>\n        x.winner !== null &&\n        typeof x === 'object' &&\n        typeof x.points === 'number' &&\n        typeof x.gin === 'string' &&\n        x.winner !== undefined,\n};\n","import { Game, Player, PLAYERS } from './models';\n\nexport const LATEST_STATE_VERSION = 2 as const;\n\nexport interface StateV1 {\n    version: 1;\n    player1Name: string;\n    player2Name: string;\n    games: Game[];\n}\n\nexport const StateV1 = {\n    guard: (x: any): x is StateV1 =>\n        typeof x === 'object' &&\n        typeof x.player1Name === 'string' &&\n        typeof x.player2Name === 'string' &&\n        x.version === 1 &&\n        Array.isArray(x.games),\n};\n\nexport interface StateV2 {\n    version: 2;\n    player1Name: string;\n    player2Name: string;\n    games: Game[];\n    initialDealer: Player;\n}\n\nexport const StateV2 = {\n    guard: (x: any): x is StateV2 =>\n        typeof x === 'object' &&\n        typeof x.player1Name === 'string' &&\n        typeof x.player2Name === 'string' &&\n        x.version === 1 &&\n        Array.isArray(x.games) &&\n        PLAYERS.includes(x.initialDealer),\n};\n\nexport type HistoricalState = StateV1 | StateV2;\n\nexport type State = StateV2;\n\nexport const State = {\n    /**\n     * Migrate a state object forward to the latest version expected by\n     * the app.\n     *\n     * @param state A valid state emitted by an earlier version of the app\n     * @returns A state object on the current version\n     */\n    modernize: (state: HistoricalState): State => {\n        switch (state.version) {\n            case 2:\n                return state;\n            case 1:\n                return migrateV1ToV2(state);\n            default:\n                throw new UnknownVersionError(state);\n        }\n    },\n};\n\nclass MigrationError extends Error {\n    constructor(message: string, public readonly state: unknown) {\n        super(message);\n    }\n}\n\nclass UnknownVersionError extends MigrationError {\n    public readonly version: unknown;\n    constructor(state: HistoricalState) {\n        super(`Unknown state version '${state.version}'`, state);\n        this.version = state.version;\n    }\n}\n\nexport const INITIAL_STATE: State = {\n    version: LATEST_STATE_VERSION,\n    player1Name: 'Player 1',\n    player2Name: 'Player 2',\n    games: [],\n    initialDealer: Player.One,\n};\n\nexport const isState = (x: any): x is State =>\n    typeof x === 'object' &&\n    typeof x.player1Name === 'string' &&\n    typeof x.player2Name === 'string' &&\n    typeof x.version === 'number';\n\nconst migrateV1ToV2 = (state: StateV1): StateV2 => ({\n    ...state,\n    version: 2,\n    initialDealer: Player.One,\n});\n","import { isState, State } from './State';\n\nconst LOCAL_STORAGE_KEY = 'reduxState';\n\n/**\n * Write the current redux state into local storage.\n */\nexport const persistState = (state: State): Promise<void> => {\n    window.localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(state));\n    return Promise.resolve();\n};\n\n/**\n * Read the redux state from local storage.\n */\nexport const retrieveState = (): State | undefined => {\n    const raw = window.localStorage.getItem(LOCAL_STORAGE_KEY);\n    if (!raw) return;\n\n    try {\n        const parsed = JSON.parse(raw);\n        if (!isState(parsed)) return;\n        try {\n            return State.modernize(parsed);\n        } catch (e) {\n            console.error(e);\n            return;\n        }\n    } catch (e) {\n        console.error('Could not read state as JSON', e);\n        return;\n    }\n};\n","import React, { FC } from 'react';\n\nimport './AppHeader.css';\n\nexport const AppHeader: FC = () => (\n    <header className=\"c-app-header\">\n        <h1>Gin Scorer</h1>\n    </header>\n);\n","export interface ConsumableEvent {\n    preventDefault(): void;\n    stopPropagation(): void;\n}\n\nexport const consumeEvent = (e: ConsumableEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n};\n","import classNames from 'classnames';\nimport React from 'react';\n\nimport { consumeEvent } from '../util/Event';\n\nimport './Button.scss';\n\nexport const Button = React.forwardRef<\n    { focus(): void },\n    Omit<React.ButtonHTMLAttributes<HTMLButtonElement>, 'onClick'> & {\n        primary?: boolean;\n        /**\n         * When set to a non-empty string, a confirmation message to show to\n         * the user. If they click the button and confirm at the prompt,\n         * the button's `onClick` function will be called.\n         */\n        confirmation?: string;\n        onClick?(): void;\n    }\n>(({ primary, ...props }, ref) => (\n    <button\n        {...props}\n        ref={ref as any}\n        className={classNames(\n            'c-button',\n            primary && 'c-button--primary',\n            props.className,\n        )}\n        onClick={e => {\n            if (e.button || !props.onClick) return;\n            consumeEvent(e);\n            if (props.confirmation && !window.confirm(props.confirmation)) {\n                return;\n            }\n            props.onClick();\n        }}\n    />\n));\n","import { Game, Player, PlayerNames } from './models';\n\n/**\n * Action emitted when a game has been finished and a new result is ready.\n * The provided game will be added to the end of the game list.\n */\nexport interface FinishGame {\n    type: 'FinishGame';\n    result: Game;\n}\n\n/**\n * Remove the most recent game from the history; useful for correcting\n * mistakes in submission.\n */\nexport interface UndoGame {\n    type: 'UndoGame';\n}\n\n/**\n * Start a new match, clearing all game history.\n */\nexport interface StartNewMatch {\n    type: 'StartNewMatch';\n}\n\nexport interface RenamePlayers extends PlayerNames {\n    type: 'RenamePlayers';\n}\n\nexport interface SetInitialDealer {\n    type: 'SetInitialDealer';\n    dealer: Player;\n}\n\nexport type Action =\n    | RenamePlayers\n    | FinishGame\n    | StartNewMatch\n    | UndoGame\n    | SetInitialDealer;\n\nexport const creators = {\n    UndoGame: (): UndoGame => ({\n        type: 'UndoGame',\n    }),\n    RenamePlayers: (names: PlayerNames): RenamePlayers => ({\n        ...names,\n        type: 'RenamePlayers',\n    }),\n    FinishGame: (result: Game): FinishGame => ({\n        type: 'FinishGame',\n        result,\n    }),\n    StartNewMatch: (): StartNewMatch => ({\n        type: 'StartNewMatch',\n    }),\n    SetInitialDealer: (dealer: Player): SetInitialDealer => ({\n        type: 'SetInitialDealer',\n        dealer,\n    }),\n};\n","import { RefObject } from 'react';\n\nexport const focusRef = (ref: RefObject<{ focus(): void }>): void => {\n    ref.current?.focus();\n};\n\nexport const refChildHasFocus = (ref: RefObject<HTMLElement>) => (): boolean =>\n    ref.current?.contains(document.activeElement) ?? false;\n\nexport const mapRef = <T, U>(ref: RefObject<T>, mapFn: (r: T) => U): U | null =>\n    ref.current ? mapFn(ref.current) : null;\n","import classNames from 'classnames';\nimport React, { FC, useRef } from 'react';\nimport { createPortal } from 'react-dom';\nimport { CSSTransition, Transition } from 'react-transition-group';\nimport { Key } from 'w3c-keys';\n\nimport { Button } from '../Button';\nimport { consumeEvent } from '../util/Event';\nimport { Focus } from '../util/Focus';\nimport { focusRef } from '../util/Ref';\nimport './Drawer.css';\n\nconst TRANSITION_TIMEOUT_MS = 125;\n\nexport const Drawer: FC<{\n    open?: boolean;\n    hideTitle?: boolean;\n    title?: string;\n    onTitleClick?(): void;\n    onEntered?(): void;\n    /**\n     * Event handler called when the user attempts to dismiss the\n     * drawer. If no handler is provided, the user cannot dismiss\n     * the drawer.\n     */\n    onDismiss?(): void;\n}> = props => {\n    const titleButton = useRef<Focus>(null);\n    const handleKeyDown = (e: React.KeyboardEvent<unknown>): void => {\n        if (e.key === Key.Escape && props.onDismiss) {\n            consumeEvent(e);\n            props.onDismiss();\n        }\n    };\n\n    return createPortal(\n        <>\n            <CSSTransition\n                in={props.open}\n                timeout={TRANSITION_TIMEOUT_MS}\n                classNames=\"c-drawer__backdrop\"\n                appear\n                mountOnEnter\n                unmountOnExit\n            >\n                <div\n                    onClick={e => {\n                        // only consider primary clicks\n                        if (e.button !== 0) return;\n                        props.onDismiss?.();\n                    }}\n                    className=\"c-drawer__backdrop\"\n                />\n            </CSSTransition>\n            <CSSTransition\n                in={props.open}\n                classNames=\"c-drawer\"\n                timeout={TRANSITION_TIMEOUT_MS}\n                onExit={() => focusRef(titleButton)}\n                onEntered={props.onEntered}\n                appear\n            >\n                <div\n                    className={classNames('c-drawer', {\n                        'c-drawer--has-title':\n                            Boolean(props.title) && !props.hideTitle,\n                    })}\n                    onKeyDown={handleKeyDown}\n                    role=\"dialog\"\n                >\n                    {props.title && (\n                        <Button\n                            ref={titleButton}\n                            className=\"c-drawer__title\"\n                            onClick={props.onTitleClick}\n                        >\n                            <span className=\"c-drawer__title__text\">\n                                {props.title}\n                            </span>\n                        </Button>\n                    )}\n                    <Transition\n                        in={props.open}\n                        timeout={TRANSITION_TIMEOUT_MS}\n                        appear\n                        mountOnEnter\n                        unmountOnExit\n                    >\n                        {props.children}\n                    </Transition>\n                </div>\n            </CSSTransition>\n        </>,\n        document.body,\n    );\n};\n\n/**\n * Placeholder element which can be used to make sure scrolling content isn't\n * hidden by the drawer title.\n */\nexport const DrawerTitleSpacer: FC = () => (\n    <div className=\"c-drawer-title-placeholder\" />\n);\n","import React, { FC, useState } from 'react';\nimport { Drawer } from '.';\n\nexport const ToggleDrawer: FC<{\n    activator(props: { openDrawer(): void }): React.ReactNode;\n}> = ({ activator, children }) => {\n    const [open, setOpen] = useState(false);\n    return (\n        <>\n            {activator({ openDrawer: () => setOpen(true) })}\n            <Drawer open={open} onDismiss={() => setOpen(false)}>\n                {children}\n            </Drawer>\n        </>\n    );\n};\n","import React, { FC } from 'react';\n\nimport { Button } from './Button';\nimport { consumeEvent } from './util/Event';\n\n/**\n * A wrapper for a native form that provides Enter-key submission abilities\n * and semantic correctness.\n */\nexport const Form: FC<{\n    className?: string;\n    style?: React.CSSProperties;\n    disableSubmit?: boolean;\n    submitLabel?: React.ReactNode;\n    onSubmit(): void;\n}> = props => (\n    <form\n        style={props.style}\n        className={props.className}\n        onSubmit={e => {\n            consumeEvent(e);\n            if (props.disableSubmit) return;\n            props.onSubmit();\n        }}\n    >\n        {props.children}\n        {props.submitLabel && (\n            <Button primary disabled={props.disableSubmit} type=\"submit\">\n                {props.submitLabel}\n            </Button>\n        )}\n    </form>\n);\n","import { Component } from 'react';\n\nexport type ChangeHandler<T> = (newVal: T, name?: string) => void;\n\nexport interface ControlledInput<T> {\n    value: T;\n    disabled?: boolean;\n    name?: string;\n    onChange: ChangeHandler<T>;\n}\n\nexport const makeFieldChangeHandler =\n    <T extends {}>(c: Component<ControlledInput<T>>) =>\n    (newVal: T[keyof T], fieldName: keyof T): void => {\n        const { value, onChange, disabled, name } = c.props;\n\n        if (disabled) return;\n\n        if (onChange) {\n            onChange(\n                {\n                    ...(value as any),\n                    [fieldName]: newVal,\n                },\n                name,\n            );\n        }\n    };\n","import classNames from 'classnames';\nimport React from 'react';\n\nimport { ControlledInput } from '../../ControlledInput';\nimport { Focus } from '../util/Focus';\nimport './Input.css';\n\nexport const Input = React.forwardRef<\n    Focus,\n    ControlledInput<string> & {\n        className?: string;\n        label?: string;\n    } & Pick<\n            React.InputHTMLAttributes<HTMLInputElement>,\n            'required' | 'maxLength'\n        >\n>(({ onChange, label, className, ...props }, ref) => (\n    <label className={classNames('c-input', className)}>\n        {label && <div className=\"c-input-label\">{label}</div>}\n        <input\n            {...props}\n            ref={ref as any}\n            onChange={e => onChange(e.target.value, props.name)}\n        />\n    </label>\n));\n","import React from 'react';\n\nimport { ControlledInput, makeFieldChangeHandler } from '../../ControlledInput';\nimport { PlayerNames } from '../../models';\nimport { Input } from '../Input';\nimport { Focus } from '../util/Focus';\nimport { focusRef } from '../util/Ref';\nimport './PlayersInput.css';\n\nexport class PlayersInput extends React.Component<\n    ControlledInput<PlayerNames>\n> {\n    private readonly handleChange = makeFieldChangeHandler(this);\n    private readonly focusTarget = React.createRef<Focus>();\n\n    public render(): React.ReactNode {\n        const { value, disabled } = this.props;\n        return (\n            <div className=\"c-players-input\">\n                <Input\n                    ref={this.focusTarget}\n                    label=\"Player 1\"\n                    name=\"player1Name\"\n                    value={value.player1Name}\n                    disabled={disabled}\n                    onChange={this.handleChange}\n                    required\n                    maxLength={15}\n                />\n                <Input\n                    label=\"Player 2\"\n                    name=\"player2Name\"\n                    value={value.player2Name}\n                    disabled={disabled}\n                    onChange={this.handleChange}\n                    required\n                    maxLength={15}\n                />\n            </div>\n        );\n    }\n\n    public readonly focus = () => focusRef(this.focusTarget);\n}\n","import React, { FC, useRef, useState } from 'react';\n\nimport { PlayerNames } from '../models';\nimport { Button } from './Button';\nimport { Drawer } from './Drawer';\nimport { Form } from './Form';\nimport { PlayersInput } from './PlayersInput';\nimport { Focus } from './util/Focus';\n\nexport interface PlayersFormProps {\n    value: PlayerNames;\n    onPlayersSubmit(players: PlayerNames): void;\n}\n\nexport const PlayersForm: FC<{\n    defaultValue: PlayerNames;\n    onSubmit(names: PlayerNames): void;\n}> = props => {\n    const [isRenaming, setRenaming] = useState(false);\n    const [value, setValue] = useState<PlayerNames | undefined>(undefined);\n    const button = useRef<Focus>(null);\n    const input = useRef<PlayersInput>(null);\n\n    const stopRenaming = () => {\n        setRenaming(false);\n        setValue(undefined);\n        button.current?.focus();\n    };\n\n    return (\n        <>\n            <Button ref={button} onClick={() => setRenaming(true)}>\n                Rename Players\n            </Button>\n            <Drawer\n                title={isRenaming ? 'Rename Players' : undefined}\n                open={isRenaming}\n                onDismiss={stopRenaming}\n                onEntered={() => input.current?.focus()}\n            >\n                <Form\n                    style={{\n                        marginLeft: 10,\n                        marginRight: 10,\n                        maxWidth: '30em',\n                        display: 'flex',\n                        flexDirection: 'column',\n                    }}\n                    onSubmit={() => {\n                        if (!value) return;\n                        props.onSubmit(value);\n                        stopRenaming();\n                    }}\n                >\n                    <PlayersInput\n                        ref={input}\n                        value={value ?? props.defaultValue}\n                        onChange={v => setValue(v)}\n                    />\n                    <div style={{ height: 20 }} />\n                    <Button primary type=\"submit\">\n                        Update\n                    </Button>\n                </Form>\n            </Drawer>\n        </>\n    );\n};\n","import { Cmd, Loop, loop, LoopReducer } from 'redux-loop';\nimport { Action } from './Actions';\nimport { persistState } from './Effects';\nimport { Game, nameOfPlayer, otherPlayer, Player } from './models';\nimport { State } from './State';\n\nexport const gameSelector = (state: State): Game[] => state.games;\n\nexport const playerNameSelector = ({\n    player1Name,\n    player2Name,\n}: State): Pick<State, 'player1Name' | 'player2Name'> => ({\n    player1Name,\n    player2Name,\n});\n\nexport const canUndoSelector = ({ games }: State): boolean =>\n    Boolean(games.length);\n\nexport const dealerSelector = ({ games, initialDealer }: State): Player =>\n    games.length % 2 === 0 ? initialDealer : otherPlayer(initialDealer);\n\nexport const dealerNameSelector = (state: State): string =>\n    nameOfPlayer(state, dealerSelector(state));\n\nexport const matchHasStartedSelector = (state: State): boolean =>\n    Boolean(state.games.length);\n\nexport const reducer: LoopReducer<State, Action> = (\n    state: State,\n    action: Action,\n) => {\n    switch (action.type) {\n        case 'RenamePlayers': {\n            const { player1Name, player2Name } = action;\n            return persisted({\n                ...state,\n                player1Name,\n                player2Name,\n            });\n        }\n        case 'FinishGame': {\n            return persisted({\n                ...state,\n                games: [...state.games, action.result],\n            });\n        }\n        case 'UndoGame': {\n            return persisted({\n                ...state,\n                games: state.games.slice(0, state.games.length - 1),\n            });\n        }\n        case 'StartNewMatch': {\n            return persisted({\n                ...state,\n                games: [],\n            });\n        }\n        case 'SetInitialDealer': {\n            // If the match is in progress, don't allow the initial dealer to\n            // change.\n            if (state.games.length) return state;\n\n            return persisted({\n                ...state,\n                initialDealer: action.dealer,\n            });\n        }\n        default: {\n            return state;\n        }\n    }\n};\n\nconst persisted = (state: State): Loop<State> =>\n    loop(\n        state,\n        Cmd.run(persistState, {\n            args: [state],\n        }),\n    );\n","import React, { FC } from 'react';\n\nimport { connect } from 'react-redux';\nimport { Button } from 'src/components/Button';\nimport { PlayerNames } from 'src/models';\nimport { creators } from '../../Actions';\nimport { PlayersForm } from '../../components/PlayersForm';\nimport {\n    canUndoSelector,\n    matchHasStartedSelector,\n    playerNameSelector,\n} from '../../Reducer';\nimport { State } from '../../State';\n\ninterface StateProps {\n    playerNames: PlayerNames;\n    canUndo: boolean;\n    hasMatchStarted: boolean;\n}\n\ninterface DispatchProps {\n    onRenamePlayers: typeof creators.RenamePlayers;\n    onStartNewMatch(): void;\n    onUndoGame(): void;\n}\n\nconst mapStateToProps = (state: State): StateProps => ({\n    playerNames: playerNameSelector(state),\n    canUndo: canUndoSelector(state),\n    hasMatchStarted: matchHasStartedSelector(state),\n});\n\nconst mapDispatchToProps: DispatchProps = {\n    onStartNewMatch: creators.StartNewMatch,\n    onRenamePlayers: creators.RenamePlayers,\n    onUndoGame: creators.UndoGame,\n};\n\nconst DisconnectedCommandBar: FC<StateProps & DispatchProps> = props => (\n    <div className=\"c-command-bar\">\n        <Button onClick={props.onUndoGame} disabled={!props.canUndo}>\n            Undo Last Game\n        </Button>\n        <Button\n            onClick={props.onStartNewMatch}\n            disabled={!props.hasMatchStarted}\n            confirmation=\"Are you sure you want to start a new match?\"\n        >\n            New Match\n        </Button>\n        <PlayersForm\n            defaultValue={props.playerNames}\n            onSubmit={props.onRenamePlayers}\n        />\n    </div>\n);\n\nexport const CommandBar = connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(DisconnectedCommandBar);\n","import { Game, Gin, otherPlayer, Player } from '.';\n\nexport interface PerPlayer<T = number> {\n    [Player.One]: T;\n    [Player.Two]: T;\n}\n\nexport interface Stats {\n    /**\n     * The number of games won by each player in the current match.\n     */\n    wins: PerPlayer;\n    /**\n     * The maximum number of consecutive games won by each player in\n     * the current match.\n     */\n    maxStreak: PerPlayer;\n    /**\n     * The average number of points each player received on winning a\n     * game in the current match.\n     */\n    meanWinSize: PerPlayer;\n    /**\n     * The max number of points earned by each player in a single game.\n     */\n    biggestWin: PerPlayer;\n    /**\n     * The number of games in which a player earned normal and super gins.\n     * A gin in multiple columns will only count once in this stat.\n     */\n    ginGames: PerPlayer<{ [Gin.Normal]: number; [Gin.Super]: number }>;\n}\n\nconst newPerPlayer = (): PerPlayer => ({\n    [Player.One]: 0,\n    [Player.Two]: 0,\n});\n\nexport const reduceGamesToStats = (games: Game[]): Stats => {\n    const wins = reduceGamesToWins(games);\n\n    return {\n        wins,\n        meanWinSize: reduceGamesToMeanPoints(games, wins),\n        maxStreak: reduceGamesToMaxStreak(games),\n        biggestWin: reduceGamesToBiggestWin(games),\n        ginGames: reduceGamesToGins(games),\n    };\n};\n\nconst reduceGamesToWins = (games: Game[]): PerPlayer =>\n    games.reduce((state, game) => {\n        state[game.winner] += 1;\n        return state;\n    }, newPerPlayer());\n\nconst reduceGamesToMeanPoints = (games: Game[], wins: PerPlayer): PerPlayer => {\n    const perPlayer = games.reduce((state, game) => {\n        state[game.winner] += game.points;\n        return state;\n    }, newPerPlayer());\n    if (wins[Player.One]) perPlayer[Player.One] /= wins[Player.One];\n    if (wins[Player.Two]) perPlayer[Player.Two] /= wins[Player.Two];\n\n    return perPlayer;\n};\n\nconst reduceGamesToMaxStreak = (games: Game[]): PerPlayer => {\n    const currentStreak = newPerPlayer();\n    const maxStreak = newPerPlayer();\n\n    for (const game of games) {\n        currentStreak[game.winner] += 1;\n        currentStreak[otherPlayer(game.winner)] = 0;\n\n        if (currentStreak[game.winner] > maxStreak[game.winner]) {\n            maxStreak[game.winner] = currentStreak[game.winner];\n        }\n    }\n\n    return maxStreak;\n};\n\nconst reduceGamesToBiggestWin = (games: Game[]): PerPlayer =>\n    games.reduce((state, game) => {\n        state[game.winner] = Math.max(state[game.winner], game.points);\n        return state;\n    }, newPerPlayer());\n\nconst reduceGamesToGins = (\n    games: Game[],\n): PerPlayer<{ [Gin.Normal]: number; [Gin.Super]: number }> =>\n    games.reduce(\n        (state, game) => {\n            if (game.gin !== Gin.None) {\n                state[game.winner][game.gin] += 1;\n            }\n\n            return state;\n        },\n        {\n            [Player.One]: { [Gin.Normal]: 0, [Gin.Super]: 0 },\n            [Player.Two]: { [Gin.Normal]: 0, [Gin.Super]: 0 },\n        },\n    );\n","import classNames from 'classnames';\nimport React, { FC } from 'react';\n\nimport { ControlledInput } from '../ControlledInput';\n\nexport interface NumberInputProps extends ControlledInput<number | null> {\n    min?: number;\n    max?: number;\n    step?: number;\n    className?: string;\n}\n\nexport const NumberInput: FC<NumberInputProps> = props => {\n    const { value, className, ...rest } = props;\n    return (\n        <input\n            {...rest}\n            className={classNames('c-number-input', className)}\n            type=\"number\"\n            value={value !== null ? value.toString() : ''}\n            onChange={evt => {\n                props.onChange(parseInputToInt(evt.target.value), props.name);\n            }}\n        />\n    );\n};\n\nconst parseInputToInt = (text: string): number | null =>\n    text === '' ? null : Number.parseInt(text, 10);\n","import classNames from 'classnames';\nimport React from 'react';\n\nimport { focusRef, refChildHasFocus } from '../util/Ref';\nimport './Radio.css';\n\nexport interface RadioProps<T extends string | number = string> {\n    className?: string;\n    label?: string;\n    selected: boolean;\n    value: T;\n    disabled?: boolean;\n    name?: string;\n    /**\n     * When `true`, the native radio element will be rendered as 0x0 to avoid\n     * showing. The caller should then use classes to style the component as-desired.\n     */\n    hideNative?: boolean;\n    onChange(newValue: T, name?: string): void;\n}\n\nexport class Radio<T extends string | number = string> extends React.Component<\n    RadioProps<T>\n> {\n    private readonly root = React.createRef<HTMLLabelElement>();\n\n    // tslint:disable-next-line:member-ordering\n    public readonly hasFocus = refChildHasFocus(this.root);\n\n    public render(): React.ReactNode {\n        const { className, children, value, label, ...props } = this.props;\n\n        return (\n            <label\n                ref={this.root}\n                className={classNames('c-radio', className, {\n                    'c-radio--checked': props.selected,\n                    'c-radio--disabled': props.disabled,\n                    'c-radio--nonative': props.hideNative,\n                    'c-radio--has-focus': this.hasFocus(),\n                })}\n            >\n                <input\n                    name={props.name}\n                    disabled={props.disabled}\n                    checked={props.selected}\n                    onChange={this.handleChange}\n                    value={value.toString()}\n                    type=\"radio\"\n                    onFocus={this.handleFocusChange}\n                    onBlur={this.handleFocusChange}\n                />\n                {label}\n            </label>\n        );\n    }\n\n    public readonly focus = () => focusRef(this.root);\n\n    private readonly handleFocusChange = () => this.forceUpdate();\n\n    private readonly handleChange = () => {\n        this.props.onChange?.(this.props.value, this.props.name);\n    };\n}\n","import classNames from 'classnames';\nimport React from 'react';\n\nimport { ControlledInput } from '../../ControlledInput';\nimport { Radio } from '../Radio';\nimport { focusRef } from '../util/Ref';\nimport './RadioGroup.css';\n\nexport interface Choice<T extends string | number = string> {\n    label: string;\n    value: T;\n}\n\nexport interface RadioGroupProps<T extends string | number = string>\n    extends ControlledInput<T> {\n    className?: string;\n    label?: string;\n    choices: Choice<T>[];\n    name: string;\n    hideNative?: boolean;\n    horizontal?: boolean;\n}\n\n/** A set of radio buttons */\nexport class RadioGroup<\n    T extends string | number = string,\n> extends React.Component<RadioGroupProps<T>> {\n    private readonly first = React.createRef<Radio<T>>();\n\n    public render(): React.ReactNode {\n        const { className, name, ...props } = this.props;\n        return (\n            <div\n                className={classNames('c-radio-group', className, {\n                    'c-radio-group--horizontal': props.horizontal,\n                    'c-radio-group--hide-native': props.hideNative,\n                })}\n            >\n                {props.label && (\n                    <span className=\"c-radio-group__label\">{props.label}</span>\n                )}\n                {props.choices.map((choice, idx) => (\n                    <Radio<T>\n                        {...choice}\n                        key={choice.value}\n                        ref={idx === 0 ? this.first : undefined}\n                        name={name}\n                        disabled={props.disabled}\n                        hideNative={props.hideNative}\n                        selected={props.value === choice.value}\n                        onChange={props.onChange}\n                    />\n                ))}\n            </div>\n        );\n    }\n\n    public focus = () => focusRef(this.first);\n}\n","import React from 'react';\n\nimport { ControlledInput, makeFieldChangeHandler } from '../../ControlledInput';\nimport { Game, Gin, Player } from '../../models';\nimport { NumberInput } from '../NumberInput';\nimport { RadioGroup } from '../RadioGroup';\nimport { focusRef } from '../util/Ref';\nimport './GameInput.css';\n\n/**\n * A variant of the `Game` interface optimized for input.\n */\nexport interface PartialGame {\n    winner: Game['winner'];\n    points: number | null;\n    gin: Game['gin'];\n}\n\nconst DEFAULT_PARTIAL_GAME: PartialGame = {\n    winner: Player.One,\n    points: null,\n    gin: Gin.None,\n};\n\nexport const PartialGame = {\n    DEFAULT: DEFAULT_PARTIAL_GAME,\n};\n\nexport interface GameInputProps extends ControlledInput<PartialGame> {\n    player1Name: string;\n    player2Name: string;\n}\n\nexport class GameInput extends React.Component<GameInputProps> {\n    private readonly focusTarget = React.createRef<RadioGroup<Player>>();\n    private readonly handleChange = makeFieldChangeHandler(this);\n\n    public render(): React.ReactNode {\n        const { value, disabled, ...props } = this.props;\n\n        return (\n            <div className=\"c-game-input\">\n                <RadioGroup<Player>\n                    name=\"winner\"\n                    className=\"c-game-input__players\"\n                    choices={[\n                        { value: Player.One, label: props.player1Name },\n                        { value: Player.Two, label: props.player2Name },\n                    ]}\n                    value={value.winner}\n                    disabled={disabled}\n                    label=\"Winner\"\n                    onChange={this.handleChange}\n                    hideNative\n                    horizontal\n                    ref={this.focusTarget}\n                />\n                <div className=\"c-game-input__points\">\n                    <NumberInput\n                        name=\"points\"\n                        value={value.points}\n                        min={1}\n                        disabled={disabled}\n                        onChange={this.handleChange}\n                    />\n                    &nbsp; points\n                </div>\n                <RadioGroup<Gin>\n                    name=\"gin\"\n                    value={value.gin}\n                    className=\"c-game-input__gin\"\n                    choices={[\n                        { value: Gin.None, label: 'No Gin' },\n                        { value: Gin.Normal, label: 'Gin' },\n                        { value: Gin.Super, label: 'Super Gin' },\n                    ]}\n                    disabled={disabled}\n                    onChange={this.handleChange}\n                    horizontal\n                    hideNative\n                />\n            </div>\n        );\n    }\n\n    public readonly focus = () => focusRef(this.focusTarget);\n}\n","import React, { FC } from 'react';\n\nimport classNames from 'classnames';\nimport { Bonus, GameInSet, Gin, GinSet, Player, PlayerNames } from 'src/models';\nimport './ScoreColumn.css';\n\nexport const ScoreColumn: FC<\n    PlayerNames & {\n        className?: string;\n        value: GinSet;\n    }\n> = ({ value, ...props }) => (\n    <div className={classNames('c-scorecolumn', props.className)}>\n        <div className=\"c-scorecolumn__header\">\n            <div className=\"c-scorecolumn__player\">{props.player1Name}</div>\n            <div className=\"c-scorecolumn__player\">{props.player2Name}</div>\n        </div>\n        {value.games.map((game, index) => (\n            <ScoreRow {...game} key={`game-${index}`} />\n        ))}\n        {value.bonuses.map((bonus, index) => (\n            <BonusRow key={`bonus-${index}`} {...bonus} isFirst={index === 0} />\n        ))}\n    </div>\n);\n\nconst ScoreRow: FC<GameInSet> = ({ winner, gin, runningTotal }) => {\n    const winnerCell = (\n        <div className=\"c-scorerow__winner\" data-gin={gin} key=\"winner\">\n            {runningTotal}\n            {gin !== Gin.None && (\n                <span className=\"c-scorerow__winner__gin__star\">\n                    {' '}\n                    {gin === Gin.Normal && '★'}\n                    {gin === Gin.Super && '★★'}\n                </span>\n            )}\n        </div>\n    );\n    const loserCell = <div className=\"c-scorerow__loser\" key=\"loser\" />;\n\n    return (\n        <div className=\"c-scorerow\">\n            {winner === Player.One\n                ? [winnerCell, loserCell]\n                : [loserCell, winnerCell]}\n        </div>\n    );\n};\n\nconst BonusRow: FC<Bonus & { isFirst?: boolean }> = props => {\n    const bonusCell = (\n        <div className=\"c-bonusrow__recipient\" key=\"winner\">\n            <span className=\"c-bonusrow__points\">{props.points}</span>\n            <span className=\"c-bonusrow__label\">{props.label}</span>\n        </div>\n    );\n\n    const loserCell = <div className=\"c-bonusrow__loser\" key=\"loser\" />;\n\n    return (\n        <div\n            className={classNames('c-bonusrow', {\n                'c-bonusrow--first': props.isFirst,\n            })}\n        >\n            {props.player === Player.One\n                ? [bonusCell, loserCell]\n                : [loserCell, bonusCell]}\n        </div>\n    );\n};\n","import classNames from 'classnames';\nimport React, { FC } from 'react';\n\nimport './ScrollViewer.css';\n\nexport const ScrollViewer: FC<{\n    className?: string;\n    overflowX?: 'hidden' | 'auto';\n    overflowY?: 'hidden' | 'auto';\n}> = ({\n    className,\n    children,\n    overflowX = 'auto' as 'auto',\n    overflowY = 'auto' as 'auto',\n}) => (\n    <div\n        className={classNames('c-scroll-viewer', className)}\n        style={{ overflowX, overflowY }}\n    >\n        {children}\n    </div>\n);\n","import React, { FC } from 'react';\n\nimport classNames from 'classnames';\nimport {\n    GinSet,\n    isSetFinished,\n    nameOfPlayer,\n    Player,\n    PlayerNames,\n} from '../../models';\nimport './Summary.css';\n\nexport interface SetSummaryProps extends PlayerNames {\n    className?: string;\n    value: GinSet;\n    onClick?(): void;\n}\n\nexport const SetSummary: FC<SetSummaryProps> = props => {\n    const { value, ...outerProps } = props;\n    // If a player has won the set, don't show loser's points\n    if (isSetFinished(value)) {\n        return (\n            <SetSummaryContainer {...outerProps} finished>\n                <span className=\"c-set-summary--final__winner\">\n                    {nameOfPlayer(props, value.finalResult.winner)} won\n                </span>\n                <span className=\"c-set-summary--final__points\">\n                    {value.finalResult.points}\n                </span>\n            </SetSummaryContainer>\n        );\n    }\n\n    return (\n        <SetSummaryContainer {...outerProps}>\n            <div className=\"c-set-summary__player\">\n                <span className=\"c-set-summary__player-name\">\n                    {props.player1Name}\n                </span>\n                <span className=\"c-set-summary__points\">\n                    {value.currentScores[Player.One]}\n                </span>\n            </div>\n            <div className=\"c-set-summary__player\">\n                <span className=\"c-set-summary__player-name\">\n                    {props.player2Name}\n                </span>\n                <span className=\"c-set-summary__points\">\n                    {value.currentScores[Player.Two]}\n                </span>\n            </div>\n        </SetSummaryContainer>\n    );\n};\n\n/**\n * Outer container element for the set summary.\n */\nconst SetSummaryContainer: FC<\n    Pick<SetSummaryProps, 'className' | 'onClick'> & { finished?: boolean }\n> = ({ className, onClick, finished, children }) => (\n    <div\n        className={classNames(\n            'c-set-summary',\n            finished ? 'c-set-summary--final' : 'c-set-summary--in-progress',\n            className,\n            {\n                'c-set-summary--clickable': Boolean(onClick),\n            },\n        )}\n        onClick={onClick}\n    >\n        {children}\n    </div>\n);\n","import React from 'react';\n\nimport { GinSet, PlayerNames } from '../../models';\nimport { ToggleDrawer } from '../Drawer';\nimport { ScoreColumn } from '../ScoreColumn';\nimport './SetView.css';\nimport { SetSummary } from './Summary';\n\nexport interface SetViewProps extends PlayerNames {\n    value: GinSet;\n}\n\nexport class SetView extends React.PureComponent<SetViewProps> {\n    public render(): React.ReactNode {\n        return (\n            <ToggleDrawer\n                activator={({ openDrawer }) => (\n                    <SetSummary\n                        {...this.props}\n                        onClick={openDrawer}\n                        className=\"c-set-view\"\n                    />\n                )}\n            >\n                <ScoreColumn\n                    {...this.props}\n                    className=\"c-set-view__score-column\"\n                />\n            </ToggleDrawer>\n        );\n    }\n}\n","import classNames from 'classnames';\nimport { identity } from 'lodash';\nimport React, { FC, ReactChild, ReactElement, ReactNode } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { Action, creators } from 'src/Actions';\n\nimport { Gin, nameOfPlayer, otherPlayer, Player } from 'src/models';\nimport { PerPlayer, Stats } from 'src/models/stats';\nimport {\n    dealerSelector,\n    matchHasStartedSelector,\n    playerNameSelector,\n} from 'src/Reducer';\nimport './StatsViewer.css';\n\ntype StatRowRenderer = <T extends unknown>(\n    title: ReactNode,\n    value: PerPlayer<T>,\n    formatter: (value: T) => ReactChild,\n) => ReactNode;\n\nexport const StatsViewer: FC<{\n    value: Stats;\n    showDealer: boolean;\n    layout: 'grid' | 'stack';\n}> = ({ layout, value, showDealer }) => {\n    const dealer = useSelector(dealerSelector);\n    switch (layout) {\n        case 'stack':\n            return (\n                <StatsStack\n                    value={value}\n                    dealer={showDealer ? dealer : undefined}\n                />\n            );\n        case 'grid':\n            return (\n                <StatsGrid\n                    value={value}\n                    dealer={showDealer ? dealer : undefined}\n                />\n            );\n    }\n};\n\nconst StatsStack: FC<{ value: Stats; dealer: Player | undefined }> = ({\n    value,\n    dealer,\n}) => {\n    const players = useSelector(playerNameSelector);\n    return (\n        <div className=\"c-stats-viewer\">\n            {dealer !== undefined && (\n                <div>Dealer: {nameOfPlayer(players, dealer)}</div>\n            )}\n            {renderStats(\n                (title, v, formatter) => (\n                    <StackRow title={title} value={v} formatter={formatter} />\n                ),\n                value,\n            )}\n        </div>\n    );\n};\n\nconst StackRow = <T extends unknown>(props: {\n    value: PerPlayer<T>;\n    title: ReactNode;\n    formatter(value: T): ReactChild;\n}): ReactElement => {\n    const players = useSelector(playerNameSelector);\n    return (\n        <div className=\"c-share-chart\">\n            <h3>{props.title}</h3>\n            {nameOfPlayer(players, Player.One)}:{' '}\n            {props.formatter(props.value[Player.One])}\n            <br />\n            {nameOfPlayer(players, Player.Two)}:{' '}\n            {props.formatter(props.value[Player.Two])}\n            <br />\n        </div>\n    );\n};\n\nconst formatNumber = (value: number) =>\n    value % 1 === 0 ? value.toString() : value.toFixed(2);\n\nconst formatGinCount = (value: {\n    [Gin.Normal]: number;\n    [Gin.Super]: number;\n}): ReactChild => {\n    const normals = value[Gin.Normal];\n    const supers = value[Gin.Super];\n\n    const normal = <span style={{ whiteSpace: 'nowrap' }}>{normals}★</span>;\n    const superSpan = <span style={{ whiteSpace: 'nowrap' }}>{supers}★★</span>;\n\n    if (normals && supers) {\n        return (\n            <>\n                {normal} <span style={{ opacity: 0.5 }}>|</span> {superSpan}\n            </>\n        );\n    } else if (normals) return normal;\n    else if (supers) return superSpan;\n    else return 0;\n};\n\nconst StatsGrid: FC<{ value: Stats; dealer: Player | undefined }> = ({\n    value,\n    dealer,\n}) => {\n    const players = useSelector(playerNameSelector);\n\n    return (\n        <table className=\"c-stats-viewer c-stats-viewer--grid\">\n            <thead>\n                <tr>\n                    <td className=\"c-stats-viewer--grid__player\">\n                        {nameOfPlayer(players, Player.One)}\n                    </td>\n                    <td>\n                        {dealer !== undefined && (\n                            <DealerToken dealer={dealer} />\n                        )}\n                    </td>\n                    <td className=\"c-stats-viewer--grid__player\">\n                        {nameOfPlayer(players, Player.Two)}\n                    </td>\n                </tr>\n            </thead>\n            <tbody>\n                {renderStats(\n                    (title, v, formatter) => (\n                        <StatsGridRow\n                            title={title}\n                            value={v}\n                            formatter={formatter}\n                        />\n                    ),\n                    value,\n                )}\n            </tbody>\n        </table>\n    );\n};\n\nconst StatsGridRow = <T extends unknown>(props: {\n    value: PerPlayer<T>;\n    title: ReactNode;\n    formatter(value: T): ReactChild;\n}): ReactElement => (\n    <tr>\n        <td>{props.formatter(props.value[Player.One])}</td>\n        <td>{props.title}</td>\n        <td>{props.formatter(props.value[Player.Two])}</td>\n    </tr>\n);\n\nconst renderStats = (row: StatRowRenderer, value: Stats): ReactNode => (\n    <>\n        {row('Wins', value.wins, identity)}\n        {row('Max Streak', value.maxStreak, identity)}\n        {row('Mean PPG', value.meanWinSize, formatNumber)}\n        {row('Biggest Win', value.biggestWin, identity)}\n        {row('Gins', value.ginGames, formatGinCount)}\n    </>\n);\n\n/**\n * Badge for the player who is currently the dealer in the stats grid.\n */\nconst DealerToken: FC<{ dealer: Player }> = ({ dealer }) => {\n    const hasMatchStarted = useSelector(matchHasStartedSelector);\n    const dispatch = useDispatch<Dispatch<Action>>();\n    return (\n        <div\n            className={classNames(\n                'c-dealer-token',\n                dealer === Player.One\n                    ? 'c-dealer-token--p1'\n                    : 'c-dealer-token--p2',\n            )}\n            onClick={\n                hasMatchStarted\n                    ? undefined\n                    : () =>\n                          dispatch(\n                              creators.SetInitialDealer(otherPlayer(dealer)),\n                          )\n            }\n        >\n            <span className=\"c-dealer-token__arrow c-dealer-token__arrow--p1\">\n                <Arrow direction=\"left\" />\n            </span>{' '}\n            Dealer{' '}\n            <span className=\"c-dealer-token__arrow c-dealer-token__arrow--p2\">\n                <Arrow direction=\"right\" />\n            </span>\n        </div>\n    );\n};\n\n/**\n * Platform-agnostic sideways-pointing arrow. ▶️, the right-pointing triangle\n * emoji, renders as a stylized play button on mobile operating systems which\n * is undesirable.\n */\nconst Arrow: FC<{ direction: 'left' | 'right' }> = ({ direction }) => (\n    <svg viewBox=\"0 0 5 6\" width={10} height={12}>\n        <path\n            d=\"M 0 0 L 5 3 L 0 6 Z\"\n            fill=\"black\"\n            transform={direction === 'left' ? 'rotate(180 2.5 3)' : undefined}\n        ></path>\n    </svg>\n);\n","import classNames from 'classnames';\nimport React, { FC } from 'react';\n\nimport { GinMatchResult, Player, PlayerNames } from 'src/models';\nimport { Button } from '../Button';\nimport './MatchResultViewer.css';\n\nexport const MatchResultViewer: FC<\n    GinMatchResult &\n        PlayerNames & {\n            className?: string;\n            onNewMatch?(): void;\n        }\n> = props => (\n    <div className={classNames('c-match-result-viewer', classNames)}>\n        <div className=\"c-match-result-viewer__winner\">\n            {props.winner === Player.One\n                ? props.player1Name\n                : props.player2Name}{' '}\n            wins!\n        </div>\n        <div className=\"c-match-result-viewer__points\">\n            <span className=\"c-match-result-viewer__points-value\">\n                {props.points}\n            </span>\n            &nbsp;\n            <span className=\"c-match-result-viewer__points-label\">points</span>\n        </div>\n        <div className=\"c-match-result-viewer__actions\">\n            {props.onNewMatch && (\n                <Button onClick={props.onNewMatch}>Play again</Button>\n            )}\n        </div>\n    </div>\n);\n","import classNames from 'classnames';\nimport React, { FC, useMemo, useRef, useState } from 'react';\nimport MediaQuery from 'react-responsive';\n\nimport { reduceGamesToStats } from 'src/models/stats';\nimport { Game, GinMatch } from '../../models';\nimport { Drawer, DrawerTitleSpacer } from '../Drawer/Drawer';\nimport { Form } from '../Form';\nimport { GameInput, GameInputProps, PartialGame } from '../GameInput';\nimport { ScoreColumn } from '../ScoreColumn';\nimport { ScrollViewer } from '../ScrollViewer';\nimport { SetView } from '../SetView';\nimport { StatsViewer } from '../StatsViewer';\nimport { focusRef } from '../util/Ref';\nimport { MatchResultViewer } from './MatchResultViewer';\nimport './MatchViewer.css';\n\nexport interface MatchViewerProps {\n    value: GinMatch;\n    readOnly?: boolean;\n    onSubmitGame?(game: Game): void;\n    onNewMatch?(): void;\n}\n\nexport const MatchViewer: FC<MatchViewerProps> = ({\n    value: { player1Name, player2Name, ...value },\n    readOnly,\n    ...props\n}) => {\n    const gameFormRef = useRef<GameForm>(null);\n    const stats = useMemo(() => reduceGamesToStats(value.games), [value.games]);\n    const [drawerOpen, setDrawerOpen] = useState(false);\n\n    const players = { player1Name, player2Name };\n\n    const closeGameForm = (): void => {\n        setDrawerOpen(false);\n    };\n\n    const gameForm = (\n        <GameForm\n            ref={gameFormRef}\n            {...players}\n            onSubmitGame={game => {\n                props.onSubmitGame?.(game);\n                closeGameForm();\n            }}\n        />\n    );\n\n    return (\n        <div\n            className={classNames('c-match-viewer', {\n                'c-match-viewer--finished': Boolean(value.finalResult),\n            })}\n        >\n            <MediaQuery minWidth={600}>\n                <ScrollViewer className=\"c-match-viewer__main\">\n                    <div className=\"c-match-viewer__sets\">\n                        {value.sets.map((s, i) => (\n                            <ScoreColumn key={i} {...players} value={s} />\n                        ))}\n                    </div>\n                    <StatsViewer\n                        layout=\"stack\"\n                        value={stats}\n                        showDealer={!value.finalResult}\n                    />\n                </ScrollViewer>\n            </MediaQuery>\n            <MediaQuery maxWidth={600}>\n                <ScrollViewer overflowX=\"hidden\">\n                    {value.sets.map((v, i) => (\n                        <SetView key={i} value={v} {...players} />\n                    ))}\n                    <StatsViewer\n                        layout=\"grid\"\n                        value={stats}\n                        showDealer={!value.finalResult}\n                    />\n                </ScrollViewer>\n            </MediaQuery>\n            {value.finalResult && (\n                <MatchResultViewer\n                    {...players}\n                    {...value.finalResult}\n                    onNewMatch={props.onNewMatch}\n                />\n            )}\n            {!readOnly && (\n                <>\n                    <MediaQuery maxWidth={1000}>\n                        <DrawerTitleSpacer />\n                        <Drawer\n                            open={drawerOpen}\n                            title=\"Add game\"\n                            onTitleClick={() => {\n                                setDrawerOpen(true);\n                                gameFormRef.current?.focus();\n                            }}\n                            onDismiss={closeGameForm}\n                            hideTitle={!!value.finalResult}\n                        >\n                            {gameForm}\n                        </Drawer>\n                    </MediaQuery>\n                    <MediaQuery minWidth={1000}>\n                        <div className=\"c-match-viewer__add-game\">\n                            <h1>Add game</h1>\n                            {gameForm}\n                        </div>\n                    </MediaQuery>\n                </>\n            )}\n        </div>\n    );\n};\n\ntype GameFormProps = Pick<MatchViewerProps, 'onSubmitGame'> &\n    Pick<GameInputProps, 'player1Name' | 'player2Name' | 'disabled'>;\n\nclass GameForm extends React.Component<GameFormProps, PartialGame> {\n    private readonly input = React.createRef<GameInput>();\n\n    constructor(props: GameFormProps) {\n        super(props);\n        this.state = PartialGame.DEFAULT;\n    }\n\n    public render() {\n        return (\n            <Form\n                className=\"c-gameform\"\n                onSubmit={this.handleSubmit}\n                disableSubmit={this.props.disabled || !Game.guard(this.state)}\n                submitLabel=\"Submit\"\n            >\n                <GameInput\n                    ref={this.input}\n                    player1Name={this.props.player1Name}\n                    player2Name={this.props.player2Name}\n                    disabled={this.props.disabled}\n                    value={this.state}\n                    onChange={this.handleChange}\n                />\n            </Form>\n        );\n    }\n\n    public readonly focus = () => focusRef(this.input);\n\n    private readonly handleChange = (value: PartialGame) => {\n        this.setState(value);\n    };\n\n    private readonly handleSubmit = () => {\n        // Don't allow submission of incomplete games\n        // TODO show an error in this case\n        if (!Game.guard(this.state)) return;\n\n        if (this.props.onSubmitGame) this.props.onSubmitGame(this.state);\n\n        // Wipe the state, so we're ready for the next game input.\n        this.setState(PartialGame.DEFAULT);\n\n        this.focus();\n    };\n}\n","import { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\n\nimport { creators } from '../Actions';\nimport { MatchViewer, MatchViewerProps } from '../components/MatchViewer';\nimport { reduceGamesToMatch } from '../models';\nimport { gameSelector, playerNameSelector } from '../Reducer';\nimport { State } from '../State';\n\nconst matchSelector = createSelector(\n    gameSelector,\n    playerNameSelector,\n    (games, players) => reduceGamesToMatch(players)(games),\n);\n\ntype StateProps = Pick<MatchViewerProps, 'value'>;\ntype DispatchProps = Pick<MatchViewerProps, 'onSubmitGame' | 'onNewMatch'>;\n\nconst mapStateToProps = (state: State): StateProps => ({\n    value: matchSelector(state),\n});\n\nconst mapDispatchToProps: DispatchProps = {\n    onSubmitGame: creators.FinishGame,\n    onNewMatch: creators.StartNewMatch,\n};\n\nexport const CurrentMatchViewer = connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(MatchViewer);\n","import React, { FC } from 'react';\n\nimport { AppHeader } from '../../components/AppHeader';\nimport { CommandBar } from '../../containers/CommandBar';\nimport { CurrentMatchViewer } from '../../containers/CurrentMatchViewer';\n\nimport './Playing.css';\n\nexport const Playing: FC = props => (\n    <div className=\"l-playing\">\n        <AppHeader />\n        <CommandBar />\n        <CurrentMatchViewer />\n    </div>\n);\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport { install } from 'redux-loop';\nimport './App.css';\n\nimport { retrieveState } from './Effects';\nimport { Playing } from './layouts/playing';\nimport { reducer } from './Reducer';\nimport { INITIAL_STATE } from './State';\n\n// XXX figure out why this didn't work.\nconst devtools = () =>\n    (window as any).__REDUX_DEVTOOLS_EXTENSION__ &&\n    (window as any).__REDUX_DEVTOOLS_EXTENSION__();\n\nexport const middleware = compose(applyMiddleware(devtools), install());\n\nconst store = createStore(\n    reducer,\n    retrieveState() || INITIAL_STATE,\n    // Hook enhancer for redux dev-tools\n    install(),\n);\n\nclass App extends React.Component {\n    public render() {\n        return (\n            <Provider store={store}>\n                <Playing />\n            </Provider>\n        );\n    }\n}\n\nexport default App;\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n        ),\n);\n\nexport default function register() {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            process.env.PUBLIC_URL!,\n            window.location.toString(),\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Lets check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://goo.gl/SC7cgQ',\n                    );\n                });\n            } else {\n                // Is not local host. Just register service worker\n                registerValidSW(swUrl);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker) {\n                    installingWorker.onstatechange = () => {\n                        if (installingWorker.state === 'installed') {\n                            if (navigator.serviceWorker.controller) {\n                                // At this point, the old content will have been purged and\n                                // the fresh content will have been added to the cache.\n                                // It's the perfect time to display a 'New content is\n                                // available; please refresh.' message in your web app.\n                                console.log(\n                                    'New content is available; please refresh.',\n                                );\n                            } else {\n                                // At this point, everything has been precached.\n                                // It's the perfect time to display a\n                                // 'Content is cached for offline use.' message.\n                                console.log(\n                                    'Content is cached for offline use.',\n                                );\n                            }\n                        }\n                    };\n                }\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            if (\n                response.status === 404 ||\n                response.headers.get('content-type')!.indexOf('javascript') ===\n                    -1\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.',\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root') as HTMLElement);\nregisterServiceWorker();\n"],"sourceRoot":""}