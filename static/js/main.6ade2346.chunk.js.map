{"version":3,"sources":["State.ts","Effects.ts","components/AppHeader/AppHeader.tsx","components/util/Event.ts","components/Button/index.tsx","Actions.ts","components/util/Ref.ts","components/Drawer/Drawer.tsx","components/Drawer/Toggle.tsx","components/Form.tsx","ControlledInput.ts","components/Input/Input.tsx","components/PlayersInput/PlayersInput.tsx","components/PlayersForm.tsx","Reducer.ts","containers/CommandBar/index.tsx","models/outcome.ts","models/index.ts","models/stats.ts","components/NumberInput.tsx","components/Radio/Radio.tsx","components/RadioGroup/RadioGroup.tsx","components/GameInput/GameInput.tsx","components/ScoreColumn/ScoreColumn.tsx","components/ScrollViewer/index.tsx","components/SetView/Summary.tsx","components/SetView/SetView.tsx","components/StatsViewer/StatsViewer.tsx","components/MatchViewer/MatchResultViewer.tsx","components/MatchViewer/MatchViewer.tsx","containers/CurrentMatchViewer.ts","layouts/playing/Playing.tsx","App.tsx","registerServiceWorker.ts","index.tsx"],"names":["INITIAL_STATE","version","player1Name","player2Name","games","persistState","state","window","localStorage","setItem","JSON","stringify","Promise","resolve","AppHeader_AppHeader","props","react_default","a","createElement","className","consumeEvent","e","stopPropagation","preventDefault","Button","forwardRef","ref","Object","assign","classnames_default","onClick","button","creators","UndoGame","type","RenamePlayers","names","FinishGame","result","StartNewMatch","focusRef","current","focus","refChildHasFocus","contains","document","activeElement","TRANSITION_TIMEOUT_MS","Drawer_Drawer_Drawer","Component","[object Object]","this","titleButton","createRef","handleBackdropClick","onDismiss","handleKeyDown","key","dist","Escape","handleExit","react_dom","Fragment","CSSTransition","in","open","timeout","classNames","appear","mountOnEnter","unmountOnExit","onExit","onEntered","c-drawer--has-title","Boolean","title","hideTitle","onKeyDown","role","onTitleClick","Transition","children","body","DrawerTitleSpacer","ToggleDrawer","activator","setOpen","react","openDrawer","Form","onSubmit","disableSubmit","submitLabel","disabled","makeFieldChangeHandler","c","newVal","fieldName","value","onChange","name","Input_Input","_a","label","__rest","target","PlayersInput_PlayersInput_PlayersInput","handleChange","focusTarget","PlayersForm","isRenaming","setRenaming","setValue","undefined","input","stopRenaming","defaultValue","v","playerNameSelector","canUndoSelector","length","persisted","redux_loop_es","run","args","mapDispatchToProps","onStartNewMatch","onRenamePlayers","onUndoGame","CommandBar","es","playerNames","canUndo","reduceGames","frame1","frame1End","reduceSet","frame2","frame2End","frame3","isSetFinished","ginSet","finalResult","offset","endIndices","wins","Player","One","Two","scores","setGames","bonuses","reverse","nextEnd","pop","index","game","entries","console","info","Math","max","winner","points","runningTotal","push","player","PLAYERS","forEach","filter","wonBy","reduce","bonus","g","ginBonus","gin","b","getWinner","abs","currentScores","Gin","None","Normal","Super","computeMatchResult","sets","isHollywood","every","otherPlayer","nameOfPlayer","players","Game","guard","x","newPerPlayer","reduceGamesToWins","reduceGamesToMeanPoints","perPlayer","reduceGamesToMaxStreak","currentStreak","maxStreak","reduceGamesToBiggestWin","NumberInput_NumberInput","evt","parsed","Number","parseInt","NumberInput_rest","toString","Radio_Radio_Radio","root","hasFocus","handleFocusChange","forceUpdate","_b","call","Radio_rest","c-radio--checked","selected","c-radio--disabled","c-radio--nonative","hideNative","c-radio--has-focus","checked","onFocus","onBlur","RadioGroup_RadioGroup_RadioGroup","first","RadioGroup_rest","c-radio-group--horizontal","horizontal","c-radio-group--hide-native","choices","map","choice","idx","PartialGame","DEFAULT","GameInput_GameInput_GameInput","GameInput_rest","min","ScoreColumn_ScoreColumn","ScoreColumn_rest","ScoreRow","BonusRow","isFirst","winnerCell","data-gin","loserCell","bonusCell","c-bonusrow--first","ScrollViewer_ScrollViewer","overflowX","overflowY","style","SetSummary","outerProps","Summary_rest","SetSummaryContainer","finished","c-set-summary--clickable","SetView_SetView_SetView","PureComponent","StatsViewer_StatsViewer","StatsViewer_rest","ShareChart","meanWinSize","biggestWin","formatNumber","toFixed","MatchResultViewer_MatchResultViewer","onNewMatch","MatchViewer_GameForm","super","setState","handleSubmit","onSubmitGame","matchSelector","lib","reduceGamesToMatch","CurrentMatchViewer_mapDispatchToProps","CurrentMatchViewer","MatchViewer_rest","readOnly","gameFormRef","stats","reduceGamesToStats","drawerOpen","setDrawerOpen","closeGameForm","gameForm","c-match-viewer--finished","react_responsive_default","minWidth","s","i","maxWidth","Playing_Playing","store","redux","__REDUX_DEVTOOLS_EXTENSION__","action","slice","raw","getItem","parse","isState","error","retrieveState","src_App_0","isLocalhost","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","catch","getElementById","URL","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"+hBAEO,MASMA,EAAuB,CAChCC,QAV4B,EAW5BC,YAAa,WACbC,YAAa,WACbC,MAAO,ICREC,EAAgBC,IACzBC,OAAOC,aAAaC,QANE,aAMyBC,KAAKC,UAAUL,IACvDM,QAAQC,iBCHZ,MAAMC,EAAuCC,GAChDC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,gBACdH,EAAAC,EAAAC,cAAA,6CCHD,MAAME,EAAgBC,IACzBA,EAAEC,kBACFD,EAAEE,kBCFOC,EAASR,EAAAC,EAAMQ,WAK1B,CAACV,EAAOW,IACNV,EAAAC,EAAAC,cAAA,SAAAS,OAAAC,OAAA,GACQb,EAAK,CACTW,IAAKA,EACLP,UAAWU,IAAW,WAAYd,EAAMI,WACxCW,QAAST,KACDA,EAAEU,QAAWhB,EAAMe,UACvBV,EAAaC,GACbN,EAAMe,gBCcLE,EAAW,CACpBC,SAAU,KAAgB,CACtBC,KAAM,aAEVC,cAAgBC,GAAsCT,OAAAC,OAAAD,OAAAC,OAAA,GAC/CQ,GAAK,CACRF,KAAM,kBAEVG,WAAaC,IAA6B,CACtCJ,KAAM,aACNI,WAEJC,cAAe,KAAqB,CAChCL,KAAM,+CC3CP,MAAMM,EAAYd,IACjBA,EAAIe,SAASf,EAAIe,QAAQC,SAGpBC,EAAoBjB,GAAgC,IAC5DA,EAAIe,SAAWf,EAAIe,QAAQG,SAASC,SAASC,iBAAmB,QCKrE,MAAMC,EAAwB,IAgBvB,MAAMC,UAAehC,EAAAC,EAAMgC,UAAlCC,kCACqBC,KAAAC,YAAcpC,EAAAC,EAAMoC,YA+DpBF,KAAAG,oBAAsB,CAACjC,KAChCA,EAAEU,QAAWoB,KAAKpC,MAAMwC,WAC5BJ,KAAKpC,MAAMwC,cAGEJ,KAAAK,cAAgB,CAACnC,IAC9B,MAAMkC,UAAEA,GAAcJ,KAAKpC,MAEvBwC,GAAalC,EAAEoC,MAAQC,EAAA,EAAIC,SAC3BvC,EAAaC,GACbkC,OAISJ,KAAAS,WAAa,MAC1BpB,EAASW,KAAKC,eA5EXF,SACH,MAAMnC,MAAEA,GAAUoC,KAElB,OAAOxB,OAAAkC,EAAA,aAAAlC,CACHX,EAAAC,EAAAC,cAAAF,EAAAC,EAAA6C,SAAA,KACI9C,EAAAC,EAAAC,cAAC6C,EAAA,EAAa,CACVC,GAAIjD,EAAMkD,KACVC,QAASnB,EACToB,WAAW,qBACXC,QAAM,EACNC,cAAY,EACZC,eAAa,GAEbtD,EAAAC,EAAAC,cAAA,OACIY,QAASqB,KAAKG,oBACdnC,UAAU,wBAGlBH,EAAAC,EAAAC,cAAC6C,EAAA,EAAa,CACVC,GAAIjD,EAAMkD,KACVE,WAAW,WACXD,QAASnB,EACTwB,OAAQpB,KAAKS,WACbY,UAAWzD,EAAMyD,UACjBJ,QAAM,GAENpD,EAAAC,EAAAC,cAAA,OACIC,UAAWU,IAAW,WAAY,CAC9B4C,sBACIC,QAAQ3D,EAAM4D,SAAW5D,EAAM6D,YAEvCC,UAAW1B,KAAKK,cAChBsB,KAAK,UAEJ/D,EAAM4D,OACH3D,EAAAC,EAAAC,cAACM,EAAM,CACHE,IAAKyB,KAAKC,YACVjC,UAAU,kBACVW,QAASf,EAAMgE,cAEf/D,EAAAC,EAAAC,cAAA,QAAMC,UAAU,yBACXJ,EAAM4D,QAInB3D,EAAAC,EAAAC,cAAC8D,EAAA,EAAU,CACPhB,GAAIjD,EAAMkD,KACVC,QAASnB,EACTqB,QAAM,EACNC,cAAY,EACZC,eAAa,GAEZvD,EAAMkE,aAKvBpC,SAASqC,OA2Bd,MAAMC,EAA+B,IACxCnE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+BCjHNiE,EAER,EAAGC,YAAWJ,eACf,MAAOhB,EAAMqB,GAAW3D,OAAA4D,EAAA,SAAA5D,EAAS,GACjC,OACIX,EAAAC,EAAAC,cAAAF,EAAAC,EAAA6C,SAAA,KACKuB,EAAU,CAAEG,WAAY,IAAMF,GAAQ,KACvCtE,EAAAC,EAAAC,cAAC8B,EAAM,CAACiB,KAAMA,EAAMV,UAAW,IAAM+B,GAAQ,IACxCL,KCFJQ,EAKR1E,GACDC,EAAAC,EAAAC,cAAA,QACIC,UAAWJ,EAAMI,UACjBuE,SAAUrE,IACND,EAAaC,GACTN,EAAM4E,eACV5E,EAAM2E,aAGT3E,EAAMkE,SACNlE,EAAM6E,aACH5E,EAAAC,EAAAC,cAACM,EAAM,CAACqE,SAAU9E,EAAM4E,cAAezD,KAAK,UACvCnB,EAAM6E,cCfVE,EACTC,GACC,CAACC,EAAoBC,KACtB,MAAMC,MAAEA,EAAKC,SAAEA,EAAQN,SAAEA,EAAQO,KAAEA,GAASL,EAAEhF,MAE1C8E,GAEAM,GACAA,EAAQxE,OAAAC,OAAAD,OAAAC,OAAA,GAEIsE,GAAa,CACjBhD,CAAC+C,GAAYD,IAEjBI,2VCjBL,MAAMC,EAAQrF,EAAAC,EAAMQ,WAMzB,CAAC6E,EAA0C5E,SAA1CyE,SAAEA,EAAQI,MAAEA,EAAKpF,UAAEA,GAASmF,EAAEvF,EAAAyF,EAAAF,EAAA,kCAAoB,OACjDtF,EAAAC,EAAAC,cAAA,SAAOC,UAAWU,IAAW,UAAWV,IACnCoF,GAASvF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAiBoF,GAC1CvF,EAAAC,EAAAC,cAAA,QAAAS,OAAAC,OAAA,GACQb,EAAK,CACTW,IAAKA,EACLyE,SAAU9E,GAAK8E,EAAS9E,EAAEoF,OAAOP,MAAOnF,EAAMqF,kBCVnD,MAAMM,UAAqB1F,EAAAC,EAAMgC,UAAxCC,kCAGqBC,KAAAwD,aAAeb,EAAuB3C,MACtCA,KAAAyD,YAAc5F,EAAAC,EAAMoC,YAyBrBF,KAAAT,MAAQ,KAAMF,EAASW,KAAKyD,cAvBrC1D,SACH,MAAMgD,MAAEA,EAAKL,SAAEA,GAAa1C,KAAKpC,MACjC,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAACmF,EAAK,CACF3E,IAAKyB,KAAKyD,YACVL,MAAM,WACNH,KAAK,cACLF,MAAOA,EAAMhG,YACb2F,SAAUA,EACVM,SAAUhD,KAAKwD,eAEnB3F,EAAAC,EAAAC,cAACmF,EAAK,CACFE,MAAM,WACNH,KAAK,cACLF,MAAOA,EAAM/F,YACb0F,SAAUA,EACVM,SAAUhD,KAAKwD,iBClB5B,MAAME,EAGR9F,IACD,MAAO+F,EAAYC,GAAepF,OAAA4D,EAAA,SAAA5D,EAAS,IACpCuE,EAAOc,GAAYrF,OAAA4D,EAAA,SAAA5D,MAAkCsF,GACtDlF,EAASJ,OAAA4D,EAAA,OAAA5D,CAAc,MACvBuF,EAAQvF,OAAA4D,EAAA,OAAA5D,CAAqB,MAE7BwF,EAAe,WACjBJ,GAAY,GACZC,OAASC,GACK,QAAdX,EAAAvE,EAAOU,eAAO,IAAA6D,KAAE5D,SAGpB,OACI1B,EAAAC,EAAAC,cAAAF,EAAAC,EAAA6C,SAAA,KACI9C,EAAAC,EAAAC,cAACM,EAAM,CAACE,IAAKK,EAAQD,QAAS,IAAMiF,GAAY,IAAK,kBAGrD/F,EAAAC,EAAAC,cAAC8B,EAAM,CACHiB,KAAM6C,EACNvD,UAAW4D,EACX3C,UAAW,KAAK,IAAA8B,EAAA,OAAc,QAAdA,EAACY,EAAMzE,eAAO,IAAA6D,OAAA,EAAAA,EAAE5D,UAEhC1B,EAAAC,EAAAC,cAACuE,EAAI,CAACC,SAAU,KACPQ,IACLnF,EAAM2E,SAASQ,GACfiB,MACDvB,YAAY,UACX5E,EAAAC,EAAAC,cAACwF,EAAY,CACThF,IAAKwF,EACLhB,MAAY,OAALA,QAAK,IAALA,IAASnF,EAAMqG,aACtBjB,SAAUkB,GAAKL,EAASK,SCvCnCC,EAAqB,EAC9BpH,cACAC,kBACqD,CACrDD,cACAC,gBAGSoH,EAAkB,EAAGnH,WAC9BsE,QAAQtE,EAAMoH,QAuCZC,EAAanH,GACfqB,OAAA+F,EAAA,EAAA/F,CACIrB,EACAoH,EAAA,EAAIC,IAAItH,EAAc,CAClBuH,KAAM,CAACtH,MClCbuH,EAAoC,CACtCC,gBAAiB9F,EAASO,cAC1BwF,gBAAiB/F,EAASG,cAC1B6F,WAAYhG,EAASC,UAgBZgG,EAAatG,OAAAuG,EAAA,EAAAvG,CAxBDrB,IAA6B,CAClD6H,YAAab,EAAmBhH,GAChC8H,QAASb,EAAgBjH,KAwBzBuH,EAFsBlG,CAbqCZ,GAC3DC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAACM,EAAM,CAACM,QAASf,EAAMiH,WAAYnC,UAAW9E,EAAMqH,SAAO,kBAG3DpH,EAAAC,EAAAC,cAACM,EAAM,CAACM,QAASf,EAAM+G,iBAAe,aACtC9G,EAAAC,EAAAC,cAAC2F,EAAW,CACRO,aAAcrG,EAAMoH,YACpBzC,SAAU3E,EAAMgH,gDCsBrB,MAqBMM,EAAejI,IACxB,MAAOkI,EAAQC,GAAaC,EAAUpI,IAC/BqI,EAAQC,GAAaF,EAAUpI,EAAO,EAAG,CAACmI,KAC1CI,GAAUH,EAAUpI,EAAO,EAAG,CAACmI,EAAWG,IAEjD,MAAO,CAACJ,EAAQG,EAAQE,IAQfC,EAAiBC,GAC1BnE,QAAQmE,EAAOC,aAebN,EAAY,CACdpI,EACA2I,EAAiB,EACjBC,EAAqC,MAOrC,MAAMC,EAAO,CACT/F,CAACgG,EAAOC,MAAgB,EAAVJ,EACd7F,CAACgG,EAAOE,MAAgB,EAAVL,GAGZM,EAAS,CACXnG,CAACgG,EAAOC,KAAM,EACdjG,CAACgG,EAAOE,KAAM,GAGZE,EAAwB,GACxBC,EAAmB,GAEzBP,EAAWQ,UACX,IAAIC,EAAUT,EAAWU,MAEzB,IAAK,MAAOC,EAAOC,KAASxJ,EAAMyJ,UAAW,CAezC,GAdAC,QAAQC,KAAK,MAAOhB,EAAQ,OAAQY,EAAOF,EAASR,GAG7B,kBAAZQ,GAAwBE,GAASF,EAAU,IAClDR,EAAKC,EAAOC,KAAOa,KAAKC,KAAK,EAAKjB,EAAiB,OAAGC,EAAKC,EAAOC,MAClEF,EAAKC,EAAOE,KAAOY,KAAKC,KAAK,EAAKjB,EAAiB,OAAGC,EAAKC,EAAOE,MAClEK,EAAUT,EAAWU,OAKzBT,EAAKW,EAAKM,SAAW,EAGjBjB,EAAKW,EAAKM,SAAW,EAAG,SAE5Bb,EAAOO,EAAKM,SAAWN,EAAKO,OAC5B,MAAMC,EAAef,EAAOO,EAAKM,QAOjC,GALAZ,EAASe,KAAI1I,OAAAC,OAAAD,OAAAC,OAAA,GACNgI,GAAI,CACPQ,kBAGAA,GAAgB,IAAK,CACrBb,EAAQc,KAAK,CACTC,OAAQV,EAAKM,OACbC,OAAQ,IACR5D,MAAO,cAGXgE,EAAQC,QAAQF,IACRrB,EAAKqB,GAAU,GACff,EAAQc,KAAK,CACTC,SACAH,OAAQ,GAAKlB,EAAKqB,GAClB/D,MAAO,WAKnBgE,EAAQC,QAAQF,IACZ,MAAMH,EAASb,EACVmB,OAAOC,EAAMJ,IACbK,OAAO,CAACC,EAAOC,IAAMD,EAAQE,EAASD,EAAEE,KAAM,GAE/CZ,GACAZ,EAAQc,KAAK,CACTC,SACAH,SACA5D,MAAO,WAKf0C,EAAKC,EAAOE,MAAQ,GACpBG,EAAQc,KAAK,CACTC,OAAQpB,EAAOC,IACfgB,OACIC,EACAb,EACKkB,OAAOI,GAAKA,EAAEP,SAAWpB,EAAOC,KAChCwB,OAAO,CAACK,GAAKb,YAAaa,EAAIb,EAAQ,GAC/C5D,MAAO,UAIX0C,EAAKC,EAAOC,MAAQ,GACpBI,EAAQc,KAAK,CACTC,OAAQpB,EAAOE,IACfe,OACIC,EACAb,EACKkB,OAAOI,GAAKA,EAAEP,SAAWpB,EAAOE,KAChCuB,OAAO,CAACK,GAAKb,YAAaa,EAAIb,EAAQ,GAC/C5D,MAAO,UAIf8C,EAAOH,EAAOC,MAAQI,EACjBkB,OAAOI,GAAKA,EAAEP,SAAWpB,EAAOC,KAChCwB,OAAO,CAACK,GAAKb,YAAaa,EAAIb,EAAQ,GAE3Cd,EAAOH,EAAOE,MAAQG,EACjBkB,OAAOI,GAAKA,EAAEP,SAAWpB,EAAOE,KAChCuB,OAAO,CAACK,GAAKb,YAAaa,EAAIb,EAAQ,GAE3C,MAAMrB,EAAc,CAChBoB,OAAQe,EAAU5B,GAClBc,OAAQH,KAAKkB,IAAI7B,EAAOH,EAAOC,KAAOE,EAAOH,EAAOE,OAIxD,MAAO,CAAC,CAAEG,UAAST,cAAa1I,MAAOkJ,GAAYK,IAI3D,MAAO,CACH,CACIJ,UACA4B,cAAe9B,EACfjJ,MAAOkJ,QAGXrC,IAIFgE,EAAa5B,GAIfA,EAAOH,EAAOC,KAAOE,EAAOH,EAAOE,KAAOF,EAAOC,IAAMD,EAAOE,IAE5D0B,EAAYC,IACd,OAAQA,GACJ,KAAKK,EAAIC,KACL,OAAO,EACX,KAAKD,EAAIE,OACL,OAAO,GACX,KAAKF,EAAIG,MACL,OAAO,KAIbb,EAASJ,GAAoBV,GAC/BA,EAAKM,SAAWI,EAEdkB,EAAqB,CAACC,EAAgBrL,KACxC,MAAMiJ,EAAS,CACXnG,CAACgG,EAAOC,KAAM,EACdjG,CAACgG,EAAOE,KAAM,GAGlBqC,EAAKjB,QAAQnD,GAAMgC,EAAOhC,EAAEyB,YAAaoB,SAAW7C,EAAEyB,YAAaqB,QAEnE,MAAMD,EAASe,EAAU5B,GACnBqC,EAActL,EAAMuL,MAAMjB,EAAMR,IACtC,MAAO,CACHA,SACAwB,cACAvB,OAAQuB,EACF,EAAIrC,EAAOa,GACXb,EAAOa,GAAUb,EAAOuC,EAAY1B,MCxRlD,IAAYhB,GAAZ,SAAYA,GACRA,IAAA,aACAA,IAAA,aAFJ,CAAYA,MAAM,KAKX,MAAMqB,EAAU,CAACrB,EAAOC,IAAKD,EAAOE,KAU9ByC,EAAe,CAACC,EAAsBxB,IAC/CA,IAAWpB,EAAOC,IAAM2C,EAAQ5L,YAAc4L,EAAQ3L,YAK7CyL,EAAetB,GACxBA,IAAWpB,EAAOC,IAAMD,EAAOE,IAAMF,EAAOC,IAEhD,IAAYiC,GAAZ,SAAYA,GACRA,EAAA,YACAA,EAAA,gBACAA,EAAA,cAHJ,CAAYA,MAAG,KAeR,MAAMW,EAAO,CAChBC,MAAQC,GACS,OAAbA,EAAE/B,QACW,kBAAN+B,GACa,kBAAbA,EAAE9B,QACQ,kBAAV8B,EAAElB,UACI9D,IAAbgF,EAAE/B,QCnBJgC,EAAe,KAAiB,CAClChJ,CAACgG,EAAOC,KAAM,EACdjG,CAACgG,EAAOE,KAAM,IAcZ+C,GAAqB/L,GACvBA,EAAMuK,OAAO,CAACrK,EAAOsJ,KACjBtJ,EAAMsJ,EAAKM,SAAW,EACf5J,GACR4L,KAEDE,GAA0B,CAAChM,EAAe6I,KAC5C,MAAMoD,EAAYjM,EAAMuK,OAAO,CAACrK,EAAOsJ,KACnCtJ,EAAMsJ,EAAKM,SAAWN,EAAKO,OACpB7J,GACR4L,KAIH,OAHIjD,EAAKC,EAAOC,OAAMkD,EAAUnD,EAAOC,MAAQF,EAAKC,EAAOC,MACvDF,EAAKC,EAAOE,OAAMiD,EAAUnD,EAAOE,MAAQH,EAAKC,EAAOE,MAEpDiD,GAGLC,GAA0BlM,IAC5B,MAAMmM,EAAgBL,IAChBM,EAAYN,IAElB,IAAK,MAAMtC,KAAQxJ,EACfmM,EAAc3C,EAAKM,SAAW,EAC9BqC,EAAcX,EAAYhC,EAAKM,SAAW,EAEtCqC,EAAc3C,EAAKM,QAAUsC,EAAU5C,EAAKM,UAC5CsC,EAAU5C,EAAKM,QAAUqC,EAAc3C,EAAKM,SAIpD,OAAOsC,GAGLC,GAA2BrM,GAC7BA,EAAMuK,OAAO,CAACrK,EAAOsJ,KACjBtJ,EAAMsJ,EAAKM,QAAUF,KAAKC,IAAI3J,EAAMsJ,EAAKM,QAASN,EAAKO,QAChD7J,GACR4L,uVCrEA,MAAMQ,WAAoB1L,EAAAC,EAAMgC,UAAvCC,kCAcqBC,KAAAwD,aAAe,CAC5BgG,IAEA,MAAMzG,MAAEA,GAAUyG,EAAIlG,OAChBmG,EAAmB,KAAV1G,EAAe,KAAO2G,OAAOC,SAAS5G,EAAO,IACxD/C,KAAKpC,MAAMoF,UACXhD,KAAKpC,MAAMoF,SAASyG,EAAQzJ,KAAKpC,MAAMqF,QAnBxClD,SACH,MAAMoD,EAAAnD,KAAApC,OAAAmF,MAAEA,EAAK/E,UAAEA,GAASmF,EAAEvF,EAAAgM,GAAAzG,EAAA,uBAC1B,OACItF,EAAAC,EAAAC,cAAA,QAAAS,OAAAC,OAAA,GACQb,EAAK,CACTI,UAAWU,IAAW,iBAAkBV,GACxCe,KAAK,SACLgE,MAAiB,OAAVA,EAAiBA,EAAM8G,WAAa,GAC3C7G,SAAUhD,KAAKwD,yWCAxB,MAAMsG,WAAkDjM,EAAAC,EAAMgC,UAArEC,kCAGqBC,KAAA+J,KAAOlM,EAAAC,EAAMoC,YAGdF,KAAAgK,SAAWxK,EAAiBQ,KAAK+J,MA8BjC/J,KAAAT,MAAQ,KAAMF,EAASW,KAAK+J,OAE3B/J,KAAAiK,kBAAoB,KAAMjK,KAAKkK,eAE/BlK,KAAAwD,aAAe,cACT,QAAnB2G,GAAAhH,EAAAnD,KAAKpC,OAAMoF,gBAAQ,IAAAmH,KAAAC,KAAAjH,EAAGnD,KAAKpC,MAAMmF,MAAO/C,KAAKpC,MAAMqF,QAjChDlD,SACH,MAAMoD,EAAAnD,KAAApC,OAAAI,UAAEA,EAAS8D,SAAEA,EAAQiB,MAAEA,EAAKK,MAAEA,GAAKD,EAAEvF,EAAAyM,GAAAlH,EAAA,0CAE3C,OACItF,EAAAC,EAAAC,cAAA,SACIQ,IAAKyB,KAAK+J,KACV/L,UAAWU,IAAW,UAAWV,EAAW,CACxCsM,mBAAoB1M,EAAM2M,SAC1BC,oBAAqB5M,EAAM8E,SAC3B+H,oBAAqB7M,EAAM8M,WAC3BC,qBAAsB3K,KAAKgK,cAG/BnM,EAAAC,EAAAC,cAAA,SACIkF,KAAMrF,EAAMqF,KACZP,SAAU9E,EAAM8E,SAChBkI,QAAShN,EAAM2M,SACfvH,SAAUhD,KAAKwD,aACfT,MAAOA,EAAM8G,WACb9K,KAAK,QACL8L,QAAS7K,KAAKiK,kBACda,OAAQ9K,KAAKiK,oBAEhB7G,4VC5BV,MAAM2H,WAEHlN,EAAAC,EAAMgC,UAFhBC,kCAGqBC,KAAAgL,MAAQnN,EAAAC,EAAMoC,YA8BxBF,KAAAT,MAAQ,KAAMF,EAASW,KAAKgL,QA5B5BjL,SACH,MAAMoD,EAAAnD,KAAApC,OAAAI,UAAEA,EAASiF,KAAEA,GAAIE,EAAEvF,EAAAqN,GAAA9H,EAAA,sBACzB,OACItF,EAAAC,EAAAC,cAAA,OACIC,UAAWU,IAAW,gBAAiBV,EAAW,CAC9CkN,4BAA6BtN,EAAMuN,WACnCC,6BAA8BxN,EAAM8M,cAGvC9M,EAAMwF,OACHvF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,wBAAwBJ,EAAMwF,OAEjDxF,EAAMyN,QAAQC,IAAI,CAACC,EAAQC,IACxB3N,EAAAC,EAAAC,cAAC+L,GAAKtL,OAAAC,OAAA,GACE8M,EAAM,CACVjL,IAAKiL,EAAOxI,MACZxE,IAAa,IAARiN,EAAYxL,KAAKgL,WAAQlH,EAC9Bb,KAAMA,EACNP,SAAU9E,EAAM8E,SAChBgI,WAAY9M,EAAM8M,WAClBH,SAAU3M,EAAMmF,QAAUwI,EAAOxI,MACjCC,SAAUpF,EAAMoF,uWChCxC,MAMayI,GAAc,CACvBC,QAPsC,CACtC3E,OAAQhB,EAAOC,IACfgB,OAAQ,KACRY,IAAKK,EAAIC,OAYN,MAAMyD,WAAkB9N,EAAAC,EAAMgC,UAArCC,kCACqBC,KAAAyD,YAAc5F,EAAAC,EAAMoC,YACpBF,KAAAwD,aAAeb,EAAuB3C,MAkDvCA,KAAAT,MAAQ,KAAMF,EAASW,KAAKyD,cAhDrC1D,SACH,MAAMoD,EAAAnD,KAAApC,OAAAmF,MAAEA,EAAKL,SAAEA,GAAQS,EAAEvF,EAAAgO,GAAAzI,EAAA,sBAEzB,OACItF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAACgN,GAAU,CACP9H,KAAK,SACLjF,UAAU,wBACVqN,QAAS,CACL,CAAEtI,MAAOgD,EAAOC,IAAK5C,MAAOxF,EAAMb,aAClC,CAAEgG,MAAOgD,EAAOE,IAAK7C,MAAOxF,EAAMZ,cAEtC+F,MAAOA,EAAMgE,OACbrE,SAAUA,EACVU,MAAM,SACNJ,SAAUhD,KAAKwD,aACfkH,YAAU,EACVS,YAAU,EACV5M,IAAKyB,KAAKyD,cAEd5F,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACXH,EAAAC,EAAAC,cAACwL,GAAW,CACRtG,KAAK,SACLF,MAAOA,EAAMiE,OACb6E,IAAK,EACLnJ,SAAUA,EACVM,SAAUhD,KAAKwD,8BAIvB3F,EAAAC,EAAAC,cAACgN,GAAU,CACP9H,KAAK,MACLF,MAAOA,EAAM6E,IACb5J,UAAU,oBACVqN,QAAS,CACL,CAAEtI,MAAOkF,EAAIC,KAAM9E,MAAO,UAC1B,CAAEL,MAAOkF,EAAIE,OAAQ/E,MAAO,OAC5B,CAAEL,MAAOkF,EAAIG,MAAOhF,MAAO,cAE/BV,SAAUA,EACVM,SAAUhD,KAAKwD,aACf2H,YAAU,EACVT,YAAU,8VCpEvB,MAAMoB,GAKR3I,QAAAJ,MAAEA,GAAKI,EAAEvF,EAAAmO,GAAA5I,EAAA,WAAe,OACzBtF,EAAAC,EAAAC,cAAA,OAAKC,UAAWU,IAAW,gBAAiBd,EAAMI,YAC9CH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBAAyBJ,EAAMb,aAC9Cc,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBAAyBJ,EAAMZ,cAEjD+F,EAAM9F,MAAMqO,IAAI,CAAC7E,EAAMD,IACpB3I,EAAAC,EAAAC,cAACiO,GAAQxN,OAAAC,OAAA,GAAKgI,EAAI,CAAEnG,YAAakG,QAEpCzD,EAAMqD,QAAQkF,IAAI,CAAC7D,EAAOjB,IACvB3I,EAAAC,EAAAC,cAACkO,GAAQzN,OAAAC,OAAA,CAAC6B,aAAckG,KAAaiB,EAAK,CAAEyE,QAAmB,IAAV1F,QAK3DwF,GAAiC,EAAGjF,SAAQa,MAAKX,mBACnD,MAAMkF,EACFtO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBAAoBoO,WAAWxE,EAAKtH,IAAI,UAClD2G,EACAW,IAAQK,EAAIE,QAAU,IACtBP,IAAQK,EAAIG,OAAS,MAGxBiE,EAAYxO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBAAoBsC,IAAI,UAEzD,OACIzC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACV+I,IAAWhB,EAAOC,IACb,CAACmG,EAAYE,GACb,CAACA,EAAWF,KAKxBF,GAAqDrO,IACvD,MAAM0O,EACFzO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBAAwBsC,IAAI,UACvCzC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,sBAAsBJ,EAAMoJ,QAC5CnJ,EAAAC,EAAAC,cAAA,QAAMC,UAAU,qBAAqBJ,EAAMwF,QAI7CiJ,EAAYxO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBAAoBsC,IAAI,UAEzD,OACIzC,EAAAC,EAAAC,cAAA,OACIC,UAAWU,IAAW,aAAc,CAChC6N,oBAAqB3O,EAAMsO,WAG9BtO,EAAMuJ,SAAWpB,EAAOC,IACnB,CAACsG,EAAWD,GACZ,CAACA,EAAWC,WCzDvB,MAAME,GAA6C,EACtDxO,YACA8D,WACA2K,YAAY,OACZC,YAAY,UAEZ7O,EAAAC,EAAAC,cAAA,OACIC,UAAWU,IAAW,kBAAmBV,GACzC2O,MAAO,CAAEF,YAAWC,cAEnB5K,iWCHF,MAAM8K,GAAkChP,IAC3C,MAAMmF,MAAEA,GAAyBnF,EAAlBiP,EAAAC,GAAAlP,EAAA,WAEf,OAAI6H,EAAc1C,GAEVlF,EAAAC,EAAAC,cAACgP,GAAmBvO,OAAAC,OAAA,GAAKoO,EAAU,CAAEG,UAAQ,IACzCnP,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gCACX0K,EAAa9K,EAAOmF,EAAM4C,YAAYoB,gBAE3ClJ,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gCACX+E,EAAM4C,YAAYqB,SAO/BnJ,EAAAC,EAAAC,cAACgP,GAAmBvO,OAAAC,OAAA,GAAKoO,GACrBhP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACXH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,8BACXJ,EAAMb,aAEXc,EAAAC,EAAAC,cAAA,QAAMC,UAAU,yBACX+E,EAAMiF,cAAcjC,EAAOC,OAGpCnI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACXH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,8BACXJ,EAAMZ,aAEXa,EAAAC,EAAAC,cAAA,QAAMC,UAAU,yBACX+E,EAAMiF,cAAcjC,EAAOE,SAU1C8G,GAEF,EAAG/O,YAAWW,UAASqO,WAAUlL,cACjCjE,EAAAC,EAAAC,cAAA,OACIC,UAAWU,IACP,gBACAsO,EAAW,uBAAyB,6BACpChP,EACA,CACIiP,2BAA4B1L,QAAQ5C,KAG5CA,QAASA,GAERmD,GC7DF,MAAMoL,WAAgBrP,EAAAC,EAAMqP,cACxBpN,SACH,OACIlC,EAAAC,EAAAC,cAACkE,EAAY,CACTC,UAAW,EAAGG,gBACVxE,EAAAC,EAAAC,cAAC6O,GAAUpO,OAAAC,OAAA,GACHuB,KAAKpC,MAAK,CACde,QAAS0D,EACTrE,UAAU,iBAIlBH,EAAAC,EAAAC,cAAC+N,GAAWtN,OAAAC,OAAA,GACJuB,KAAKpC,MAAK,CACdI,UAAU,wXCnBvB,MAAMoP,GAKRjK,QAAApG,YAAEA,EAAWC,YAAEA,EAAW+F,MAAEA,GAAKI,EAAEvF,EAAAyP,GAAAlK,EAAA,uCACpC,MAAMwF,EAAU,CAAE5L,cAAaC,eAC/B,OACIa,EAAAC,EAAAC,cAAA,OAAKC,UAAWU,IAAW,iBAAkBd,EAAMI,YAC/CH,EAAAC,EAAAC,cAACuP,GAAU9O,OAAAC,OAAA,CAAC+C,MAAM,QAAWmH,EAAa5F,EAAM+C,OAChDjI,EAAAC,EAAAC,cAACuP,GAAU9O,OAAAC,OAAA,CAAC+C,MAAM,cAAiBmH,EAAa5F,EAAMsG,YACtDxL,EAAAC,EAAAC,cAACuP,GAAU9O,OAAAC,OAAA,CAAC+C,MAAM,YAAemH,EAAa5F,EAAMwK,cACpD1P,EAAAC,EAAAC,cAACuP,GAAU9O,OAAAC,OAAA,CACP+C,MAAM,eACFmH,EACA5F,EAAMyK,eAMpBF,GAKF1P,GACAC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,UAAKH,EAAM4D,OACVkH,EAAa9K,EAAOmI,EAAOC,UAAQyH,GAAa7P,EAAMmI,EAAOC,MAC9DnI,EAAAC,EAAAC,cAAA,WACC2K,EAAa9K,EAAOmI,EAAOE,UAAQwH,GAAa7P,EAAMmI,EAAOE,MAC9DpI,EAAAC,EAAAC,cAAA,YAIF0P,GAAgB1K,GAClBA,EAAQ,IAAM,EAAIA,EAAM8G,WAAa9G,EAAM2K,QAAQ,SCrChD,MAAMC,GAMT/P,GACAC,EAAAC,EAAAC,cAAA,OAAKC,UAAWU,IAAW,wBAAyBA,EAAAZ,IAChDD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iCACVJ,EAAMmJ,SAAWhB,EAAOC,IACnBpI,EAAMb,YACNa,EAAMZ,YAAa,aAG7Ba,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iCACXH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,uCACXJ,EAAMoJ,eAGXnJ,EAAAC,EAAAC,cAAA,QAAMC,UAAU,uCAAqC,WAEzDH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kCACVJ,EAAMgQ,YACH/P,EAAAC,EAAAC,cAACM,EAAM,CAACM,QAASf,EAAMgQ,YAAU,wWCmFjD,MAAMC,WAAiBhQ,EAAAC,EAAMgC,UAGzBC,YAAYnC,GACRkQ,MAAMlQ,GAHOoC,KAAA+D,MAAQlG,EAAAC,EAAMoC,YA2BfF,KAAAT,MAAQ,KAAMF,EAASW,KAAK+D,QAE3B/D,KAAAwD,aAAe,CAACT,IAC7B/C,KAAK+N,SAAShL,KAGD/C,KAAAgO,aAAe,MAGvBpF,EAAKC,MAAM7I,KAAK7C,SAEjB6C,KAAKpC,MAAMqQ,cAAcjO,KAAKpC,MAAMqQ,aAAajO,KAAK7C,OAG1D6C,KAAK+N,SAAStC,GAAYC,SAE1B1L,KAAKT,WAvCLS,KAAK7C,MAAQsO,GAAYC,QAGtB3L,SACH,OACIlC,EAAAC,EAAAC,cAACuE,EAAI,CACDtE,UAAU,aACVuE,SAAUvC,KAAKgO,aACfxL,cAAexC,KAAKpC,MAAM8E,WAAakG,EAAKC,MAAM7I,KAAK7C,OACvDsF,YAAY,UAEZ5E,EAAAC,EAAAC,cAAC4N,GAAS,CACNpN,IAAKyB,KAAK+D,MACVhH,YAAaiD,KAAKpC,MAAMb,YACxBC,YAAagD,KAAKpC,MAAMZ,YACxB0F,SAAU1C,KAAKpC,MAAM8E,SACrBK,MAAO/C,KAAK7C,MACZ6F,SAAUhD,KAAKwD,iBC9HnC,MAAM0K,GAAgB1P,OAAA2P,EAAA,eAAA3P,ChBHOrB,GAAyBA,EAAMF,MgBKxDkH,EACA,CAAClH,EAAO0L,IdkDsB,CAACA,GAC/B1L,IAEA,MAAMqL,EAAOpD,EAAYjI,GACnB0I,EAAc2C,EAAKE,MAAM/C,GACzB4C,EAAmBC,EAAMrL,QACzB6G,EAEN,OAAAtF,OAAAC,OAAAD,OAAAC,OAAA,GACOkK,GAAO,CACV1L,QACAqL,OACA3C,iBc9DgByI,CAAmBzF,EAAnByF,CAA4BnR,IAU9CoR,GAAoC,CACtCJ,aAAcpP,EAASK,WACvB0O,WAAY/O,EAASO,eAGZkP,GAAqB9P,OAAAuG,EAAA,EAAAvG,CATTrB,IAA6B,CAClD4F,MAAOmL,GAAc/Q,KAUrBkR,GAF8B7P,CDHgB2E,QAC9CgH,EAAAhH,EAAAJ,OAAAhG,YAASA,EAAWC,YAAEA,GAAWmN,EAAEpH,EAAAwL,GAAApE,EAAA,gCADWqE,SAE9CA,GAAQrL,EACRvF,EAAA2Q,GAAApL,EAAA,sBAEA,MAAMsL,EAAcjQ,OAAA4D,EAAA,OAAA5D,CAAiB,MAC/BkQ,EAAQlQ,OAAA4D,EAAA,QAAA5D,CAAQ,IXGQ,CAACvB,IAC/B,MAAM6I,EAAOkD,GAAkB/L,GAE/B,MAAO,CACH6I,OACAyH,YAAatE,GAAwBhM,EAAO6I,GAC5CuD,UAAWF,GAAuBlM,GAClCuQ,WAAYlE,GAAwBrM,KWVZ0R,CAAmB5L,EAAM9F,OAAQ,CAAC8F,EAAM9F,SAC7D2R,EAAYC,GAAiBrQ,OAAA4D,EAAA,SAAA5D,EAAS,GAEvCmK,EAAU,CAAE5L,cAAaC,eAEzB8R,EAAgB,KAClBD,GAAc,IAGZE,EACFlR,EAAAC,EAAAC,cAAC8P,GAAQrP,OAAAC,OAAA,CACLF,IAAKkQ,GACD9F,EAAO,CACXsF,aAAcxH,UACQ,QAAlBtD,EAAAvF,EAAMqQ,oBAAY,IAAA9K,KAAAiH,KAAlBxM,EAAqB6I,GACrBqI,QAKZ,OACIjR,EAAAC,EAAAC,cAAA,OACIC,UAAWU,IAAW,iBAAkB,CACpCsQ,2BAA4BzN,QAAQwB,EAAM4C,gBAG9C9H,EAAAC,EAAAC,cAACkR,EAAAnR,EAAU,CAACoR,SAAU,KAClBrR,EAAAC,EAAAC,cAACyO,GAAY,CAACxO,UAAU,wBACpBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACV+E,EAAMuF,KAAKgD,IAAI,CAAC6D,EAAGC,IAChBvR,EAAAC,EAAAC,cAAC+N,GAAWtN,OAAAC,OAAA,CAAC6B,IAAK8O,GAAOzG,EAAO,CAAE5F,MAAOoM,OAGjDtR,EAAAC,EAAAC,cAACqP,GAAW5O,OAAAC,OAAA,CAACsE,MAAO2L,GAAW/F,MAGvC9K,EAAAC,EAAAC,cAACkR,EAAAnR,EAAU,CAACuR,SAAU,KAClBxR,EAAAC,EAAAC,cAACyO,GAAY,CAACC,UAAU,UACnB1J,EAAMuF,KAAKgD,IAAI,CAACpH,EAAGkL,IAChBvR,EAAAC,EAAAC,cAACmP,GAAO1O,OAAAC,OAAA,CAAC6B,IAAK8O,EAAGrM,MAAOmB,GAAOyE,KAEnC9K,EAAAC,EAAAC,cAACqP,GAAW5O,OAAAC,OAAA,CAACsE,MAAO2L,GAAW/F,MAGtC5F,EAAM4C,aACH9H,EAAAC,EAAAC,cAAC4P,GAAiBnP,OAAAC,OAAA,GACVkK,EACA5F,EAAM4C,YAAW,CACrBiI,WAAYhQ,EAAMgQ,eAGxBY,GACE3Q,EAAAC,EAAAC,cAAAF,EAAAC,EAAA6C,SAAA,KACI9C,EAAAC,EAAAC,cAACkR,EAAAnR,EAAU,CAACuR,SAAU,KAClBxR,EAAAC,EAAAC,cAACiE,EAAiB,MAClBnE,EAAAC,EAAAC,cAAC8B,EAAM,CACHiB,KAAM8N,EACNpN,MAAM,WACNI,aAAc,WACViN,GAAc,GACK,QAAnB1L,EAAAsL,EAAYnP,eAAO,IAAA6D,KAAE5D,SAEzBa,UAAW0O,EACXrN,YAAasB,EAAM4C,aAElBoJ,IAGTlR,EAAAC,EAAAC,cAACkR,EAAAnR,EAAU,CAACoR,SAAU,KAClBrR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BACXH,EAAAC,EAAAC,cAAA,sBACCgR,cE7FtB,MAAMO,GAAqB1R,GAC9BC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAACJ,EAAS,MACVE,EAAAC,EAAAC,cAAC+G,EAAU,MACXjH,EAAAC,EAAAC,cAACuQ,GAAkB,OCSrBiB,IALoB/Q,OAAAgR,EAAA,EAAAhR,CACtBA,OAAAgR,EAAA,EAAAhR,CALa,IACZpB,OAAeqS,8BACfrS,OAAeqS,gCAIhBjR,OAAA+F,EAAA,EAAA/F,IAGUA,OAAAgR,EAAA,EAAAhR,ClBFqC,CAC/CrB,EACAuS,KAEA,OAAQA,EAAO3Q,MACX,IAAK,gBAAiB,CAClB,MAAMhC,YAAEA,EAAWC,YAAEA,GAAgB0S,EACrC,OAAOpL,EAAS9F,OAAAC,OAAAD,OAAAC,OAAA,GACTtB,GAAK,CACRJ,cACAC,iBAGR,IAAK,aACD,OAAOsH,EAAS9F,OAAAC,OAAAD,OAAAC,OAAA,GACTtB,GAAK,CACRF,MAAO,IAAIE,EAAMF,MAAOyS,EAAOvQ,WAGvC,IAAK,WACD,OAAOmF,EAAS9F,OAAAC,OAAAD,OAAAC,OAAA,GACTtB,GAAK,CACRF,MAAOE,EAAMF,MAAM0S,MAAM,EAAGxS,EAAMF,MAAMoH,OAAS,MAGzD,IAAK,gBACD,OAAOC,EAAS9F,OAAAC,OAAAD,OAAAC,OAAA,GACTtB,GAAK,CACRF,MAAO,MAGf,QACI,OAAOE,IbpCU,MACzB,MAAMyS,EAAMxS,OAAOC,aAAawS,QAdV,cAetB,GAAKD,EAEL,IACI,MAAMnG,EAASlM,KAAKuS,MAAMF,GAC1B,IDHe,CAAC9G,GACP,kBAANA,GACkB,kBAAlBA,EAAE/L,aACgB,kBAAlB+L,EAAE9L,YCAA+S,CAAQtG,GAAS,OACtB,GDpBwB,ICoBpBA,EAAO3M,QAA2B,OAEtC,OAAO2M,EACT,MAAOvL,GAEL,YADAyI,QAAQqJ,MAAM,+BAAgC9R,K+BHlD+R,IAAmBpT,EAEnB2B,OAAA+F,EAAA,EAAA/F,KAaW,IAAA0R,GAVf,cAAkBrS,EAAAC,EAAMgC,UACbC,SACH,OACIlC,EAAAC,EAAAC,cAACgH,EAAA,EAAQ,CAACwK,MAAOA,IACb1R,EAAAC,EAAAC,cAACuR,GAAO,eCrBxB,MAAMa,GAAc5O,QACW,cAA7BnE,OAAOgT,SAASC,UAEe,UAA7BjT,OAAOgT,SAASC,UAEhBjT,OAAOgT,SAASC,SAASC,MACvB,2DAyCN,SAASC,GAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,KAAKC,IACJA,EAAaC,cAAgB,MAC3B,MAAMC,EAAmBF,EAAaG,WAClCD,IACFA,EAAiBE,cAAgB,MACA,cAA3BF,EAAiB5T,QACfsT,UAAUC,cAAcQ,WAK1BvK,QAAQwK,IAAI,6CAKZxK,QAAQwK,IAAI,8CAOvBC,MAAMpB,IACLrJ,QAAQqJ,MAAM,4CAA6CA,KC/EjEtP,EAAA,OACE7C,EAAAC,EAAAC,cAACmS,GAAG,MACJxQ,SAAS2R,eAAe,SDaX,WACb,GAA6C,kBAAmBZ,UAAW,CAMzE,GAJkB,IAAIa,IACpB,aACAlU,OAAOgT,SAASvG,YAEJ0H,SAAWnU,OAAOgT,SAASmB,OAIvC,OAGFnU,OAAOoU,iBAAiB,OAAQ,KAC9B,MAAMhB,EAAQ,+BAEVL,IAmDV,SAAiCK,GAE/BiB,MAAMjB,GACHI,KAAKc,IAGkB,MAApBA,EAASC,SACwD,IAAjED,EAASE,QAAQC,IAAI,gBAAiBC,QAAQ,cAG9CrB,UAAUC,cAAcqB,MAAMnB,KAAKC,IACjCA,EAAamB,aAAapB,KAAK,KAC7BxT,OAAOgT,SAAS6B,aAKpB1B,GAAgBC,KAGnBY,MAAM,KACLzK,QAAQwK,IACN,mEAvEAe,CAAwB1B,GAIxBC,UAAUC,cAAcqB,MAAMnB,KAAK,KACjCjK,QAAQwK,IACN,+GAMJZ,GAAgBC,MC1CxBG","file":"static/js/main.6ade2346.chunk.js","sourcesContent":["import { Game } from './models';\n\nexport const STATE_VERSION: 1 = 1;\n\nexport interface State {\n    version: number;\n    player1Name: string;\n    player2Name: string;\n    games: Game[];\n}\n\nexport const INITIAL_STATE: State = {\n    version: STATE_VERSION,\n    player1Name: 'Player 1',\n    player2Name: 'Player 2',\n    games: [],\n};\n\nexport const isState = (x: any): x is State =>\n    typeof x === 'object' &&\n    typeof x.player1Name === 'string' &&\n    typeof x.player2Name === 'string';\n","import { isState, State, STATE_VERSION } from './State';\n\nconst LOCAL_STORAGE_KEY = 'reduxState';\n\n/**\n * Write the current redux state into local storage.\n */\nexport const persistState = (state: State): Promise<void> => {\n    window.localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(state));\n    return Promise.resolve();\n};\n\n/**\n * Read the redux state from local storage.\n */\nexport const retrieveState = (): State | undefined => {\n    const raw = window.localStorage.getItem(LOCAL_STORAGE_KEY);\n    if (!raw) return;\n\n    try {\n        const parsed = JSON.parse(raw);\n        if (!isState(parsed)) return;\n        if (parsed.version !== STATE_VERSION) return;\n\n        return parsed;\n    } catch (e) {\n        console.error('Could not read state as JSON', e);\n        return;\n    }\n};\n","import React from 'react';\n\nimport './AppHeader.css';\n\nexport interface AppHeaderProps {}\n\nexport const AppHeader: React.SFC<AppHeaderProps> = props => (\n    <header className=\"c-app-header\">\n        <h1>Gin Scorer</h1>\n    </header>\n);\n","export interface ConsumableEvent {\n    preventDefault(): void;\n    stopPropagation(): void;\n}\n\nexport const consumeEvent = (e: ConsumableEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n}","import classNames from 'classnames';\nimport React from 'react';\n\nimport { consumeEvent } from '../util/Event';\n\nexport const Button = React.forwardRef<\n    { focus(): void },\n    Omit<React.ButtonHTMLAttributes<HTMLButtonElement>, 'onClick'> & {\n        onClick?(): void;\n    }\n>((props, ref) => (\n    <button\n        {...props}\n        ref={ref as any}\n        className={classNames('c-button', props.className)}\n        onClick={e => {\n            if (e.button || !props.onClick) return;\n            consumeEvent(e);\n            props.onClick();\n        }}\n    />\n));\n","import { Game, PlayerNames } from './models';\n\n/**\n * Action emitted when a game has been finished and a new result is ready.\n * The provided game will be added to the end of the game list.\n */\nexport interface FinishGame {\n    type: 'FinishGame';\n    result: Game;\n}\n\n/**\n * Remove the most recent game from the history; useful for correcting\n * mistakes in submission.\n */\nexport interface UndoGame {\n    type: 'UndoGame';\n}\n\n/**\n * Start a new match, clearing all game history.\n */\nexport interface StartNewMatch {\n    type: 'StartNewMatch';\n}\n\nexport interface RenamePlayers extends PlayerNames {\n    type: 'RenamePlayers';\n}\n\nexport type Action = RenamePlayers | FinishGame | StartNewMatch | UndoGame;\n\nexport const creators = {\n    UndoGame: (): UndoGame => ({\n        type: 'UndoGame',\n    }),\n    RenamePlayers: (names: PlayerNames): RenamePlayers => ({\n        ...names,\n        type: 'RenamePlayers',\n    }),\n    FinishGame: (result: Game): FinishGame => ({\n        type: 'FinishGame',\n        result,\n    }),\n    StartNewMatch: (): StartNewMatch => ({\n        type: 'StartNewMatch',\n    }),\n};\n","import { RefObject } from 'react';\n\nexport const focusRef = (ref: RefObject<{ focus(): void }>): void => {\n    if (ref.current) ref.current.focus();\n};\n\nexport const refChildHasFocus = (ref: RefObject<HTMLElement>) => (): boolean =>\n    (ref.current && ref.current.contains(document.activeElement)) || false;\n\nexport const mapRef = <T, U>(ref: RefObject<T>, mapFn: (r: T) => U): U | null =>\n    ref.current ? mapFn(ref.current) : null;\n","import classNames from 'classnames';\nimport React from 'react';\nimport { createPortal } from 'react-dom';\nimport { CSSTransition, Transition } from 'react-transition-group';\nimport { Key } from 'w3c-keys';\n\nimport { Button } from '../Button';\nimport { consumeEvent } from '../util/Event';\nimport { Focus } from '../util/Focus';\nimport { focusRef } from '../util/Ref';\nimport './Drawer.css';\n\nconst TRANSITION_TIMEOUT_MS = 125;\n\nexport interface DrawerProps {\n    open?: boolean;\n    hideTitle?: boolean;\n    title?: string;\n    onTitleClick?(): void;\n    onEntered?(): void;\n    /**\n     * Event handler called when the user attempts to dismiss the\n     * drawer. If no handler is provided, the user cannot dismiss\n     * the drawer.\n     */\n    onDismiss?(): void;\n}\n\nexport class Drawer extends React.Component<DrawerProps> {\n    private readonly titleButton = React.createRef<Focus>();\n\n    public render(): React.ReactNode {\n        const { props } = this;\n\n        return createPortal(\n            <>\n                <CSSTransition\n                    in={props.open}\n                    timeout={TRANSITION_TIMEOUT_MS}\n                    classNames=\"c-drawer__backdrop\"\n                    appear\n                    mountOnEnter\n                    unmountOnExit\n                >\n                    <div\n                        onClick={this.handleBackdropClick}\n                        className=\"c-drawer__backdrop\"\n                    />\n                </CSSTransition>\n                <CSSTransition\n                    in={props.open}\n                    classNames=\"c-drawer\"\n                    timeout={TRANSITION_TIMEOUT_MS}\n                    onExit={this.handleExit}\n                    onEntered={props.onEntered}\n                    appear\n                >\n                    <div\n                        className={classNames('c-drawer', {\n                            'c-drawer--has-title':\n                                Boolean(props.title) && !props.hideTitle,\n                        })}\n                        onKeyDown={this.handleKeyDown}\n                        role=\"dialog\"\n                    >\n                        {props.title && (\n                            <Button\n                                ref={this.titleButton}\n                                className=\"c-drawer__title\"\n                                onClick={props.onTitleClick}\n                            >\n                                <span className=\"c-drawer__title__text\">\n                                    {props.title}\n                                </span>\n                            </Button>\n                        )}\n                        <Transition\n                            in={props.open}\n                            timeout={TRANSITION_TIMEOUT_MS}\n                            appear\n                            mountOnEnter\n                            unmountOnExit\n                        >\n                            {props.children}\n                        </Transition>\n                    </div>\n                </CSSTransition>\n            </>,\n            document.body,\n        );\n    }\n\n    private readonly handleBackdropClick = (e: React.MouseEvent<any>) => {\n        if (e.button || !this.props.onDismiss) return;\n        this.props.onDismiss();\n    };\n\n    private readonly handleKeyDown = (e: React.KeyboardEvent<any>) => {\n        const { onDismiss } = this.props;\n\n        if (onDismiss && e.key === Key.Escape) {\n            consumeEvent(e);\n            onDismiss();\n        }\n    };\n\n    private readonly handleExit = () => {\n        focusRef(this.titleButton);\n    };\n}\n\n/**\n * Placeholder element which can be used to make sure scrolling content isn't\n * hidden by the drawer title.\n */\nexport const DrawerTitleSpacer: React.SFC = () => (\n    <div className=\"c-drawer-title-placeholder\" />\n);\n","import React, { FC, useState } from 'react';\nimport { Drawer } from '.';\n\nexport const ToggleDrawer: FC<{\n    activator(props: { openDrawer(): void }): React.ReactNode;\n}> = ({ activator, children }) => {\n    const [open, setOpen] = useState(false);\n    return (\n        <>\n            {activator({ openDrawer: () => setOpen(true) })}\n            <Drawer open={open} onDismiss={() => setOpen(false)}>\n                {children}\n            </Drawer>\n        </>\n    );\n};\n","import React, { FC } from 'react';\n\nimport { Button } from './Button';\nimport { consumeEvent } from './util/Event';\n\n/**\n * A wrapper for a native form that provides Enter-key submission abilities\n * and semantic correctness.\n */\nexport const Form: FC<{\n    className?: string;\n    disableSubmit?: boolean;\n    submitLabel?: React.ReactNode;\n    onSubmit(): void;\n}> = props => (\n    <form\n        className={props.className}\n        onSubmit={e => {\n            consumeEvent(e);\n            if (props.disableSubmit) return;\n            props.onSubmit();\n        }}\n    >\n        {props.children}\n        {props.submitLabel && (\n            <Button disabled={props.disableSubmit} type=\"submit\">\n                {props.submitLabel}\n            </Button>\n        )}\n    </form>\n);\n","import { Component } from 'react';\n\nexport type ChangeHandler<T> = (newVal: T, name?: string) => void;\n\nexport interface ControlledInput<T> {\n    value: T;\n    disabled?: boolean;\n    name?: string;\n    onChange: ChangeHandler<T>;\n}\n\nexport const makeFieldChangeHandler = <T extends {}>(\n    c: Component<ControlledInput<T>>,\n) => (newVal: T[keyof T], fieldName: keyof T): void => {\n    const { value, onChange, disabled, name } = c.props;\n\n    if (disabled) return;\n\n    if (onChange) {\n        onChange(\n            {\n                ...(value as any),\n                [fieldName]: newVal,\n            },\n            name,\n        );\n    }\n};\n","import classNames from 'classnames';\nimport React from 'react';\n\nimport { ControlledInput } from '../../ControlledInput';\nimport { Focus } from '../util/Focus';\nimport './Input.css';\n\nexport const Input = React.forwardRef<\n    Focus,\n    ControlledInput<string> & {\n        className?: string;\n        label?: string;\n    }\n>(({ onChange, label, className, ...props }, ref) => (\n    <label className={classNames('c-input', className)}>\n        {label && <div className=\"c-input-label\">{label}</div>}\n        <input\n            {...props}\n            ref={ref as any}\n            onChange={e => onChange(e.target.value, props.name)}\n        />\n    </label>\n));\n","import React from 'react';\n\nimport { ControlledInput, makeFieldChangeHandler } from '../../ControlledInput';\nimport { PlayerNames } from '../../models';\nimport { Input } from '../Input';\nimport { Focus } from '../util/Focus';\nimport { focusRef } from '../util/Ref';\nimport './PlayersInput.css';\n\nexport class PlayersInput extends React.Component<\n    ControlledInput<PlayerNames>\n> {\n    private readonly handleChange = makeFieldChangeHandler(this);\n    private readonly focusTarget = React.createRef<Focus>();\n\n    public render(): React.ReactNode {\n        const { value, disabled } = this.props;\n        return (\n            <div className=\"c-players-input\">\n                <Input\n                    ref={this.focusTarget}\n                    label=\"Player 1\"\n                    name=\"player1Name\"\n                    value={value.player1Name}\n                    disabled={disabled}\n                    onChange={this.handleChange}\n                />\n                <Input\n                    label=\"Player 2\"\n                    name=\"player2Name\"\n                    value={value.player2Name}\n                    disabled={disabled}\n                    onChange={this.handleChange}\n                />\n            </div>\n        );\n    }\n\n    public readonly focus = () => focusRef(this.focusTarget);\n}\n","import React, { FC, useRef, useState } from 'react';\n\nimport { PlayerNames } from '../models';\nimport { Button } from './Button';\nimport { Drawer } from './Drawer';\nimport { Form } from './Form';\nimport { PlayersInput } from './PlayersInput';\nimport { Focus } from './util/Focus';\n\nexport interface PlayersFormProps {\n    value: PlayerNames;\n    onPlayersSubmit(players: PlayerNames): void;\n}\n\nexport const PlayersForm: FC<{\n    defaultValue: PlayerNames;\n    onSubmit(names: PlayerNames): void;\n}> = props => {\n    const [isRenaming, setRenaming] = useState(false);\n    const [value, setValue] = useState<PlayerNames | undefined>(undefined);\n    const button = useRef<Focus>(null);\n    const input = useRef<PlayersInput>(null);\n\n    const stopRenaming = () => {\n        setRenaming(false);\n        setValue(undefined);\n        button.current?.focus();\n    };\n\n    return (\n        <>\n            <Button ref={button} onClick={() => setRenaming(true)}>\n                Rename Players\n            </Button>\n            <Drawer\n                open={isRenaming}\n                onDismiss={stopRenaming}\n                onEntered={() => input.current?.focus()}\n            >\n                <Form onSubmit={() => {\n                    if (!value) return;\n                    props.onSubmit(value);\n                    stopRenaming();\n                }} submitLabel=\"Update\">\n                    <PlayersInput\n                        ref={input}\n                        value={value ?? props.defaultValue}\n                        onChange={v => setValue(v)}\n                    />\n                </Form>\n            </Drawer>\n        </>\n    );\n}","import { Cmd, Loop, loop, LoopReducer } from 'redux-loop';\nimport { Action } from './Actions';\nimport { persistState } from './Effects';\nimport { Game } from './models';\nimport { State } from './State';\n\nexport const gameSelector = (state: State): Game[] => state.games;\n\nexport const playerNameSelector = ({\n    player1Name,\n    player2Name,\n}: State): Pick<State, 'player1Name' | 'player2Name'> => ({\n    player1Name,\n    player2Name,\n});\n\nexport const canUndoSelector = ({ games }: State): boolean =>\n    Boolean(games.length);\n\nexport const reducer: LoopReducer<State, Action> = (\n    state: State,\n    action: Action,\n) => {\n    switch (action.type) {\n        case 'RenamePlayers': {\n            const { player1Name, player2Name } = action;\n            return persisted({\n                ...state,\n                player1Name,\n                player2Name,\n            });\n        }\n        case 'FinishGame': {\n            return persisted({\n                ...state,\n                games: [...state.games, action.result],\n            });\n        }\n        case 'UndoGame': {\n            return persisted({\n                ...state,\n                games: state.games.slice(0, state.games.length - 1),\n            });\n        }\n        case 'StartNewMatch': {\n            return persisted({\n                ...state,\n                games: [],\n            });\n        }\n        default: {\n            return state;\n        }\n    }\n};\n\nconst persisted = (state: State): Loop<State, Action> =>\n    loop(\n        state,\n        Cmd.run(persistState, {\n            args: [state],\n        }),\n    );\n","import React, { FC } from 'react';\n\nimport { connect } from 'react-redux';\nimport { Button } from 'src/components/Button';\nimport { PlayerNames } from 'src/models';\nimport { creators } from '../../Actions';\nimport { PlayersForm } from '../../components/PlayersForm';\nimport { canUndoSelector, playerNameSelector } from '../../Reducer';\nimport { State } from '../../State';\n\ninterface StateProps {\n    playerNames: PlayerNames;\n    canUndo: boolean;\n}\n\ninterface DispatchProps {\n    onRenamePlayers: typeof creators.RenamePlayers;\n    onStartNewMatch(): void;\n    onUndoGame(): void;\n}\n\nconst mapStateToProps = (state: State): StateProps => ({\n    playerNames: playerNameSelector(state),\n    canUndo: canUndoSelector(state),\n});\n\nconst mapDispatchToProps: DispatchProps = {\n    onStartNewMatch: creators.StartNewMatch,\n    onRenamePlayers: creators.RenamePlayers,\n    onUndoGame: creators.UndoGame,\n};\n\nconst DisconnectedCommandBar: FC<StateProps & DispatchProps> = props => (\n    <div className=\"c-command-bar\">\n        <Button onClick={props.onUndoGame} disabled={!props.canUndo}>\n            Undo Last Game\n        </Button>\n        <Button onClick={props.onStartNewMatch}>New Match</Button>\n        <PlayersForm\n            defaultValue={props.playerNames}\n            onSubmit={props.onRenamePlayers}\n        />\n    </div>\n);\n\nexport const CommandBar = connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(DisconnectedCommandBar);\n","import { Game, Gin, otherPlayer, Player, PlayerNames, PLAYERS } from '.';\n\n// Output models for showing the result of a match.\n\n/**\n * A bonus awarded to a player at the end of a set. For example,\n * the first player to exceed 100 game points receives a 100-point\n * bonus for \"going over\".\n */\nexport interface Bonus {\n    player: Player;\n    points: number;\n    label: string;\n}\n\nexport interface GameInSet extends Game {\n    runningTotal: number;\n}\n\nexport type GinSet = GinSetInProgress | GinSetFinal;\n\nexport interface GinSetInProgress {\n    games: GameInSet[];\n    currentScores: {\n        [Player.One]: number;\n        [Player.Two]: number;\n    };\n    bonuses: Bonus[];\n    finalResult?: never;\n}\n\nexport interface GinSetFinal {\n    games: GameInSet[];\n    currentScores?: never;\n    bonuses: Bonus[];\n    finalResult: GinSetResult;\n}\n\nexport interface GinSetResult {\n    winner: Player;\n    /**\n     * The total number of points the player earned for the set.\n     */\n    points: number;\n}\n\nexport interface GinMatch extends PlayerNames {\n    games: Game[];\n    sets: GinSet[];\n    finalResult?: GinMatchResult;\n}\n\nexport interface GinMatchResult {\n    /**\n     * Whether the winning player won every single match. In this case,\n     * the `points` property will be 2x the sum of the three sets.\n     */\n    isHollywood: boolean;\n    winner: Player;\n    points: number;\n}\n\nexport const reduceGamesToMatch = (players: PlayerNames) => (\n    games: Game[],\n): GinMatch => {\n    const sets = reduceGames(games);\n    const finalResult = sets.every(isSetFinished)\n        ? computeMatchResult(sets, games)\n        : undefined;\n\n    return {\n        ...players,\n        games,\n        sets,\n        finalResult,\n    };\n};\n\n/**\n * Reduce a sequence of games into three sets.\n *\n * @param games A sequence of games in order played\n */\nexport const reduceGames = (games: Game[]): [GinSet, GinSet, GinSet] => {\n    const [frame1, frame1End] = reduceSet(games);\n    const [frame2, frame2End] = reduceSet(games, 1, [frame1End]);\n    const [frame3] = reduceSet(games, 2, [frame1End, frame2End]);\n\n    return [frame1, frame2, frame3];\n};\n\n/**\n * Checks if a set is finished. This function assumes that sets are built by\n * `reduceSet` and therefore will always have bonuses applied as soon as a\n * player \"goes out\".\n */\nexport const isSetFinished = (ginSet: GinSet): ginSet is GinSetFinal =>\n    Boolean(ginSet.finalResult);\n\nexport const isSetInProgress = (ginSet: GinSet): ginSet is GinSetInProgress =>\n    Boolean(ginSet.currentScores);\n\n/**\n * Transform a sequence of games into a set.\n * @param games A raw sequence of games\n * @param offset The 0-indexed frame number. In gin, a player's first win\n * is not propagated to frames 2 or 3.\n * @param endIndices The index of the last game from the previous set.\n *\n * @return An array containing a gin set, and - if the set is finished - the\n * index of the last game processed.\n */\nconst reduceSet = (\n    games: Game[],\n    offset: number = 0,\n    endIndices: (number | undefined)[] = [],\n): [GinSet, number?] => {\n    /**\n     * Map of player ID to win count, adjusted for the frame entry requirement.\n     * This is used for applying bonuses for win count at the end of the frame,\n     * in addition to gating game entry into the frame.\n     */\n    const wins = {\n        [Player.One]: offset * -1,\n        [Player.Two]: offset * -1,\n    };\n\n    const scores = {\n        [Player.One]: 0,\n        [Player.Two]: 0,\n    };\n\n    const setGames: GameInSet[] = [];\n    const bonuses: Bonus[] = [];\n\n    endIndices.reverse();\n    let nextEnd = endIndices.pop();\n\n    for (const [index, game] of games.entries()) {\n        console.info('set', offset, 'game', index, nextEnd, wins);\n        // If we've passed the end of a previous set, then we reduce the barrier\n        // to entry for the current set by 1 if the player is winless.\n        if (typeof nextEnd === 'number' && index >= nextEnd + 1) {\n            wins[Player.One] = Math.max(-1 * (endIndices.length), wins[Player.One]);\n            wins[Player.Two] = Math.max(-1 * (endIndices.length), wins[Player.Two]);\n            nextEnd = endIndices.pop();\n        }\n\n        // Increment win counter to maybe qualify for frame and to\n        // ensure the player gets credit for the win in bonus calculation.\n        wins[game.winner] += 1;\n\n        // For frame 2 and frame 3, skip games that don't qualify\n        if (wins[game.winner] <= 0) continue;\n\n        scores[game.winner] += game.points;\n        const runningTotal = scores[game.winner];\n\n        setGames.push({\n            ...game,\n            runningTotal,\n        });\n\n        if (runningTotal >= 100) {\n            bonuses.push({\n                player: game.winner,\n                points: 100,\n                label: 'Going out',\n            });\n\n            PLAYERS.forEach(player => {\n                if (wins[player] > 0) {\n                    bonuses.push({\n                        player,\n                        points: 10 * wins[player],\n                        label: 'Wins',\n                    });\n                }\n            });\n\n            PLAYERS.forEach(player => {\n                const points = setGames\n                    .filter(wonBy(player))\n                    .reduce((bonus, g) => bonus + ginBonus(g.gin), 0);\n\n                if (points) {\n                    bonuses.push({\n                        player,\n                        points,\n                        label: 'Gins',\n                    });\n                }\n            });\n\n            if (wins[Player.Two] <= 0) {\n                bonuses.push({\n                    player: Player.One,\n                    points:\n                        runningTotal +\n                        bonuses\n                            .filter(g => g.player === Player.One)\n                            .reduce((b, { points }) => b + points, 0),\n                    label: 'Blitz',\n                });\n            }\n\n            if (wins[Player.One] <= 0) {\n                bonuses.push({\n                    player: Player.Two,\n                    points:\n                        runningTotal +\n                        bonuses\n                            .filter(g => g.player === Player.Two)\n                            .reduce((b, { points }) => b + points, 0),\n                    label: 'Blitz',\n                });\n            }\n\n            scores[Player.One] += bonuses\n                .filter(g => g.player === Player.One)\n                .reduce((b, { points }) => b + points, 0);\n\n            scores[Player.Two] += bonuses\n                .filter(g => g.player === Player.Two)\n                .reduce((b, { points }) => b + points, 0);\n\n            const finalResult = {\n                winner: getWinner(scores),\n                points: Math.abs(scores[Player.One] - scores[Player.Two]),\n            };\n\n            // We don't include running totals if the game has ended\n            return [{ bonuses, finalResult, games: setGames }, index];\n        }\n    }\n\n    return [\n        {\n            bonuses,\n            currentScores: scores,\n            games: setGames,\n        },\n        // The game didn't end, so no end marker is returned.\n        undefined,\n    ];\n};\n\nconst getWinner = (scores: {\n    [Player.One]: number;\n    [Player.Two]: number;\n}): Player =>\n    scores[Player.One] > scores[Player.Two] ? Player.One : Player.Two;\n\nconst ginBonus = (gin: Gin): number => {\n    switch (gin) {\n        case Gin.None:\n            return 0;\n        case Gin.Normal:\n            return 25;\n        case Gin.Super:\n            return 50;\n    }\n};\n\nconst wonBy = (player: Player) => (game: Game): boolean =>\n    game.winner === player;\n\nconst computeMatchResult = (sets: GinSet[], games: Game[]): GinMatchResult => {\n    const scores = {\n        [Player.One]: 0,\n        [Player.Two]: 0,\n    };\n\n    sets.forEach(v => (scores[v.finalResult!.winner] += v.finalResult!.points));\n\n    const winner = getWinner(scores);\n    const isHollywood = games.every(wonBy(winner));\n    return {\n        winner,\n        isHollywood,\n        points: isHollywood\n            ? 2 * scores[winner]\n            : scores[winner] - scores[otherPlayer(winner)],\n    };\n};\n","export * from './outcome';\n\nexport enum Player {\n    One = 1,\n    Two = 2,\n}\n\nexport const PLAYERS = [Player.One, Player.Two];\n\nexport interface PlayerNames {\n    player1Name: string;\n    player2Name: string;\n}\n\n/**\n * Get the name of a player from a pair of names.\n */\nexport const nameOfPlayer = (players: PlayerNames, player: Player): string =>\n    player === Player.One ? players.player1Name : players.player2Name;\n\n/**\n * Get the opponent of the passed-in player.\n */\nexport const otherPlayer = (player: Player): Player =>\n    player === Player.One ? Player.Two : Player.One;\n\nexport enum Gin {\n    None = 'none',\n    Normal = 'normal',\n    Super = 'super',\n}\n\n/**\n * A single game of gin; undercuts are not tracked separately.\n */\nexport interface Game {\n    winner: Player;\n    points: number;\n    gin: Gin;\n}\n\nexport const Game = {\n    guard: (x: any): x is Game =>\n        x.winner !== null &&\n        typeof x === 'object' &&\n        typeof x.points === 'number' &&\n        typeof x.gin === 'string' &&\n        x.winner !== undefined,\n};\n","import { Game, otherPlayer, Player } from '.';\n\nexport interface PerPlayer<T = number> {\n    [Player.One]: T;\n    [Player.Two]: T;\n}\n\nexport interface Stats {\n    /**\n     * The number of games won by each player in the current match.\n     */\n    wins: PerPlayer;\n    /**\n     * The maximum number of consecutive games won by each player in\n     * the current match.\n     */\n    maxStreak: PerPlayer;\n    /**\n     * The average number of points each player received on winning a\n     * game in the current match.\n     */\n    meanWinSize: PerPlayer;\n    /**\n     * The max number of points earned by each player in a single game.\n     */\n    biggestWin: PerPlayer;\n}\n\nconst newPerPlayer = (): PerPlayer => ({\n    [Player.One]: 0,\n    [Player.Two]: 0,\n});\n\nexport const reduceGamesToStats = (games: Game[]): Stats => {\n    const wins = reduceGamesToWins(games);\n\n    return {\n        wins,\n        meanWinSize: reduceGamesToMeanPoints(games, wins),\n        maxStreak: reduceGamesToMaxStreak(games),\n        biggestWin: reduceGamesToBiggestWin(games),\n    };\n};\n\nconst reduceGamesToWins = (games: Game[]): PerPlayer =>\n    games.reduce((state, game) => {\n        state[game.winner] += 1;\n        return state;\n    }, newPerPlayer());\n\nconst reduceGamesToMeanPoints = (games: Game[], wins: PerPlayer): PerPlayer => {\n    const perPlayer = games.reduce((state, game) => {\n        state[game.winner] += game.points;\n        return state;\n    }, newPerPlayer());\n    if (wins[Player.One]) perPlayer[Player.One] /= wins[Player.One];\n    if (wins[Player.Two]) perPlayer[Player.Two] /= wins[Player.Two];\n\n    return perPlayer;\n};\n\nconst reduceGamesToMaxStreak = (games: Game[]): PerPlayer => {\n    const currentStreak = newPerPlayer();\n    const maxStreak = newPerPlayer();\n\n    for (const game of games) {\n        currentStreak[game.winner] += 1;\n        currentStreak[otherPlayer(game.winner)] = 0;\n\n        if (currentStreak[game.winner] > maxStreak[game.winner]) {\n            maxStreak[game.winner] = currentStreak[game.winner];\n        }\n    }\n\n    return maxStreak;\n};\n\nconst reduceGamesToBiggestWin = (games: Game[]): PerPlayer =>\n    games.reduce((state, game) => {\n        state[game.winner] = Math.max(state[game.winner], game.points);\n        return state;\n    }, newPerPlayer());\n","import classNames from 'classnames';\nimport React from 'react';\n\nimport { ControlledInput } from '../ControlledInput';\n\nexport interface NumberInputProps extends ControlledInput<number | null> {\n    min?: number;\n    max?: number;\n    step?: number;\n    className?: string;\n}\n\nexport class NumberInput extends React.Component<NumberInputProps> {\n    public render(): React.ReactNode {\n        const { value, className, ...props } = this.props;\n        return (\n            <input\n                {...props}\n                className={classNames('c-number-input', className)}\n                type=\"number\"\n                value={value !== null ? value.toString() : ''}\n                onChange={this.handleChange}\n            />\n        );\n    }\n\n    private readonly handleChange = (\n        evt: React.ChangeEvent<HTMLInputElement>,\n    ): void => {\n        const { value } = evt.target;\n        const parsed = value === '' ? null : Number.parseInt(value, 10);\n        if (this.props.onChange) {\n            this.props.onChange(parsed, this.props.name);\n        }\n    };\n}\n","import classNames from 'classnames';\nimport React from 'react';\n\nimport { focusRef, refChildHasFocus } from '../util/Ref';\nimport './Radio.css';\n\nexport interface RadioProps<T extends string | number = string> {\n    className?: string;\n    label?: string;\n    selected: boolean;\n    value: T;\n    disabled?: boolean;\n    name?: string;\n    /**\n     * When `true`, the native radio element will be rendered as 0x0 to avoid\n     * showing. The caller should then use classes to style the component as-desired.\n     */\n    hideNative?: boolean;\n    onChange(newValue: T, name?: string): void;\n}\n\nexport class Radio<T extends string | number = string> extends React.Component<\n    RadioProps<T>\n> {\n    private readonly root = React.createRef<HTMLLabelElement>();\n\n    // tslint:disable-next-line:member-ordering\n    public readonly hasFocus = refChildHasFocus(this.root);\n\n    public render(): React.ReactNode {\n        const { className, children, value, label, ...props } = this.props;\n\n        return (\n            <label\n                ref={this.root}\n                className={classNames('c-radio', className, {\n                    'c-radio--checked': props.selected,\n                    'c-radio--disabled': props.disabled,\n                    'c-radio--nonative': props.hideNative,\n                    'c-radio--has-focus': this.hasFocus(),\n                })}\n            >\n                <input\n                    name={props.name}\n                    disabled={props.disabled}\n                    checked={props.selected}\n                    onChange={this.handleChange}\n                    value={value.toString()}\n                    type=\"radio\"\n                    onFocus={this.handleFocusChange}\n                    onBlur={this.handleFocusChange}\n                />\n                {label}\n            </label>\n        );\n    }\n\n    public readonly focus = () => focusRef(this.root);\n\n    private readonly handleFocusChange = () => this.forceUpdate();\n\n    private readonly handleChange = () => {\n        this.props.onChange?.(this.props.value, this.props.name);\n    };\n}\n","import classNames from 'classnames';\nimport React from 'react';\n\nimport { ControlledInput } from '../../ControlledInput';\nimport { Radio } from '../Radio';\nimport { focusRef } from '../util/Ref';\nimport './RadioGroup.css';\n\nexport interface Choice<T extends string | number = string> {\n    label: string;\n    value: T;\n}\n\nexport interface RadioGroupProps<T extends string | number = string>\n    extends ControlledInput<T> {\n    className?: string;\n    label?: string;\n    choices: Choice<T>[];\n    name: string;\n    hideNative?: boolean;\n    horizontal?: boolean;\n}\n\n/** A set of radio buttons */\nexport class RadioGroup<\n    T extends string | number = string\n> extends React.Component<RadioGroupProps<T>> {\n    private readonly first = React.createRef<Radio<T>>();\n\n    public render(): React.ReactNode {\n        const { className, name, ...props } = this.props;\n        return (\n            <div\n                className={classNames('c-radio-group', className, {\n                    'c-radio-group--horizontal': props.horizontal,\n                    'c-radio-group--hide-native': props.hideNative,\n                })}\n            >\n                {props.label && (\n                    <span className=\"c-radio-group__label\">{props.label}</span>\n                )}\n                {props.choices.map((choice, idx) => (\n                    <Radio<T>\n                        {...choice}\n                        key={choice.value}\n                        ref={idx === 0 ? this.first : undefined}\n                        name={name}\n                        disabled={props.disabled}\n                        hideNative={props.hideNative}\n                        selected={props.value === choice.value}\n                        onChange={props.onChange}\n                    />\n                ))}\n            </div>\n        );\n    }\n\n    public focus = () => focusRef(this.first);\n}\n","import React from 'react';\n\nimport { ControlledInput, makeFieldChangeHandler } from '../../ControlledInput';\nimport { Game, Gin, Player } from '../../models';\nimport { NumberInput } from '../NumberInput';\nimport { RadioGroup } from '../RadioGroup';\nimport { focusRef } from '../util/Ref';\nimport './GameInput.css';\n\n/**\n * A variant of the `Game` interface optimized for input.\n */\nexport interface PartialGame {\n    winner: Game['winner'];\n    points: number | null;\n    gin: Game['gin'];\n}\n\nconst DEFAULT_PARTIAL_GAME: PartialGame = {\n    winner: Player.One,\n    points: null,\n    gin: Gin.None,\n};\n\nexport const PartialGame = {\n    DEFAULT: DEFAULT_PARTIAL_GAME,\n};\n\nexport interface GameInputProps extends ControlledInput<PartialGame> {\n    player1Name: string;\n    player2Name: string;\n}\n\nexport class GameInput extends React.Component<GameInputProps> {\n    private readonly focusTarget = React.createRef<RadioGroup<any>>();\n    private readonly handleChange = makeFieldChangeHandler(this);\n\n    public render(): React.ReactNode {\n        const { value, disabled, ...props } = this.props;\n\n        return (\n            <div className=\"c-game-input\">\n                <RadioGroup<Player>\n                    name=\"winner\"\n                    className=\"c-game-input__players\"\n                    choices={[\n                        { value: Player.One, label: props.player1Name },\n                        { value: Player.Two, label: props.player2Name },\n                    ]}\n                    value={value.winner}\n                    disabled={disabled}\n                    label=\"Winner\"\n                    onChange={this.handleChange}\n                    hideNative\n                    horizontal\n                    ref={this.focusTarget}\n                />\n                <div className=\"c-game-input__points\">\n                    <NumberInput\n                        name=\"points\"\n                        value={value.points}\n                        min={1}\n                        disabled={disabled}\n                        onChange={this.handleChange}\n                    />\n                    &nbsp; points\n                </div>\n                <RadioGroup<Gin>\n                    name=\"gin\"\n                    value={value.gin}\n                    className=\"c-game-input__gin\"\n                    choices={[\n                        { value: Gin.None, label: 'No Gin' },\n                        { value: Gin.Normal, label: 'Gin' },\n                        { value: Gin.Super, label: 'Super Gin' },\n                    ]}\n                    disabled={disabled}\n                    onChange={this.handleChange}\n                    horizontal\n                    hideNative\n                />\n            </div>\n        );\n    }\n\n    public readonly focus = () => focusRef(this.focusTarget);\n}\n","import React, { FC } from 'react';\n\nimport classNames from 'classnames';\nimport { Bonus, GameInSet, Gin, GinSet, Player, PlayerNames } from 'src/models';\nimport './ScoreColumn.css';\n\nexport interface ScoreColumnProps extends PlayerNames {\n    className?: string;\n    value: GinSet;\n}\n\nexport const ScoreColumn: FC<\n    PlayerNames & {\n        className?: string;\n        value: GinSet;\n    }\n> = ({ value, ...props }) => (\n    <div className={classNames('c-scorecolumn', props.className)}>\n        <div className=\"c-scorecolumn__header\">\n            <div className=\"c-scorecolumn__player\">{props.player1Name}</div>\n            <div className=\"c-scorecolumn__player\">{props.player2Name}</div>\n        </div>\n        {value.games.map((game, index) => (\n            <ScoreRow {...game} key={`game-${index}`} />\n        ))}\n        {value.bonuses.map((bonus, index) => (\n            <BonusRow key={`bonus-${index}`} {...bonus} isFirst={index === 0} />\n        ))}\n    </div>\n);\n\nconst ScoreRow: React.SFC<GameInSet> = ({ winner, gin, runningTotal }) => {\n    const winnerCell = (\n        <div className=\"c-scorerow__winner\" data-gin={gin} key=\"winner\">\n            {runningTotal}\n            {gin === Gin.Normal && '*'}\n            {gin === Gin.Super && '**'}\n        </div>\n    );\n    const loserCell = <div className=\"c-scorerow__loser\" key=\"loser\" />;\n\n    return (\n        <div className=\"c-scorerow\">\n            {winner === Player.One\n                ? [winnerCell, loserCell]\n                : [loserCell, winnerCell]}\n        </div>\n    );\n};\n\nconst BonusRow: React.SFC<Bonus & { isFirst?: boolean }> = props => {\n    const bonusCell = (\n        <div className=\"c-bonusrow__recipient\" key=\"winner\">\n            <span className=\"c-bonusrow__points\">{props.points}</span>\n            <span className=\"c-bonusrow__label\">{props.label}</span>\n        </div>\n    );\n\n    const loserCell = <div className=\"c-bonusrow__loser\" key=\"loser\" />;\n\n    return (\n        <div\n            className={classNames('c-bonusrow', {\n                'c-bonusrow--first': props.isFirst,\n            })}\n        >\n            {props.player === Player.One\n                ? [bonusCell, loserCell]\n                : [loserCell, bonusCell]}\n        </div>\n    );\n};\n","import classNames from 'classnames';\nimport React from 'react';\n\nimport './ScrollViewer.css';\n\nexport interface ScrollViewerProps {\n    className?: string;\n    overflowX?: 'hidden' | 'auto';\n    overflowY?: 'hidden' | 'auto';\n}\n\nexport const ScrollViewer: React.SFC<ScrollViewerProps> = ({\n    className,\n    children,\n    overflowX = 'auto' as 'auto',\n    overflowY = 'auto' as 'auto',\n}) => (\n    <div\n        className={classNames('c-scroll-viewer', className)}\n        style={{ overflowX, overflowY }}\n    >\n        {children}\n    </div>\n);\n","import React, { FC } from 'react';\n\nimport classNames from 'classnames';\nimport {\n    GinSet,\n    isSetFinished,\n    nameOfPlayer,\n    Player,\n    PlayerNames,\n} from '../../models';\nimport './Summary.css';\n\nexport interface SetSummaryProps extends PlayerNames {\n    className?: string;\n    value: GinSet;\n    onClick?(): void;\n}\n\nexport const SetSummary: FC<SetSummaryProps> = props => {\n    const { value, ...outerProps } = props;\n    // If a player has won the set, don't show loser's points\n    if (isSetFinished(value)) {\n        return (\n            <SetSummaryContainer {...outerProps} finished>\n                <span className=\"c-set-summary--final__winner\">\n                    {nameOfPlayer(props, value.finalResult.winner)} won\n                </span>\n                <span className=\"c-set-summary--final__points\">\n                    {value.finalResult.points}\n                </span>\n            </SetSummaryContainer>\n        );\n    }\n\n    return (\n        <SetSummaryContainer {...outerProps}>\n            <div className=\"c-set-summary__player\">\n                <span className=\"c-set-summary__player-name\">\n                    {props.player1Name}\n                </span>\n                <span className=\"c-set-summary__points\">\n                    {value.currentScores[Player.One]}\n                </span>\n            </div>\n            <div className=\"c-set-summary__player\">\n                <span className=\"c-set-summary__player-name\">\n                    {props.player2Name}\n                </span>\n                <span className=\"c-set-summary__points\">\n                    {value.currentScores[Player.Two]}\n                </span>\n            </div>\n        </SetSummaryContainer>\n    );\n};\n\n/**\n * Outer container element for the set summary.\n */\nconst SetSummaryContainer: FC<\n    Pick<SetSummaryProps, 'className' | 'onClick'> & { finished?: boolean }\n> = ({ className, onClick, finished, children }) => (\n    <div\n        className={classNames(\n            'c-set-summary',\n            finished ? 'c-set-summary--final' : 'c-set-summary--in-progress',\n            className,\n            {\n                'c-set-summary--clickable': Boolean(onClick),\n            },\n        )}\n        onClick={onClick}\n    >\n        {children}\n    </div>\n);\n","import React from 'react';\n\nimport { GinSet, PlayerNames } from '../../models';\nimport { ToggleDrawer } from '../Drawer';\nimport { ScoreColumn } from '../ScoreColumn';\nimport './SetView.css';\nimport { SetSummary } from './Summary';\n\nexport interface SetViewProps extends PlayerNames {\n    value: GinSet;\n}\n\nexport class SetView extends React.PureComponent<SetViewProps> {\n    public render(): React.ReactNode {\n        return (\n            <ToggleDrawer\n                activator={({ openDrawer }) => (\n                    <SetSummary\n                        {...this.props}\n                        onClick={openDrawer}\n                        className=\"c-set-view\"\n                    />\n                )}\n            >\n                <ScoreColumn\n                    {...this.props}\n                    className=\"c-set-view__score-column\"\n                />\n            </ToggleDrawer>\n        );\n    }\n}\n","import classNames from 'classnames';\nimport React, { FC, ReactNode } from 'react';\n\nimport { nameOfPlayer, Player, PlayerNames } from 'src/models';\nimport { PerPlayer, Stats } from 'src/models/stats';\nimport './StatsViewer.css';\n\nexport const StatsViewer: FC<\n    PlayerNames & {\n        className?: string;\n        value: Stats;\n    }\n> = ({ player1Name, player2Name, value, ...props }) => {\n    const players = { player1Name, player2Name };\n    return (\n        <div className={classNames('c-stats-viewer', props.className)}>\n            <ShareChart title=\"Wins\" {...players} {...value.wins} />\n            <ShareChart title=\"Max Streak\" {...players} {...value.maxStreak} />\n            <ShareChart title=\"Mean PPG\" {...players} {...value.meanWinSize} />\n            <ShareChart\n                title=\"Biggest Win\"\n                {...players}\n                {...value.biggestWin}\n            />\n        </div>\n    );\n};\n\nconst ShareChart: FC<\n    PlayerNames &\n        PerPlayer & {\n            title: ReactNode;\n        }\n> = props => (\n    <div className=\"c-share-chart\">\n        <h3>{props.title}</h3>\n        {nameOfPlayer(props, Player.One)}: {formatNumber(props[Player.One])}\n        <br />\n        {nameOfPlayer(props, Player.Two)}: {formatNumber(props[Player.Two])}\n        <br />\n    </div>\n);\n\nconst formatNumber = (value: number) =>\n    value % 1 === 0 ? value.toString() : value.toFixed(2);\n","import classNames from 'classnames';\nimport React, { FC } from 'react';\n\nimport { GinMatchResult, Player, PlayerNames } from 'src/models';\nimport { Button } from '../Button';\nimport './MatchResultViewer.css';\n\nexport const MatchResultViewer: FC<\n    GinMatchResult &\n        PlayerNames & {\n            className?: string;\n            onNewMatch?(): void;\n        }\n> = props => (\n    <div className={classNames('c-match-result-viewer', classNames)}>\n        <div className=\"c-match-result-viewer__winner\">\n            {props.winner === Player.One\n                ? props.player1Name\n                : props.player2Name}{' '}\n            wins!\n        </div>\n        <div className=\"c-match-result-viewer__points\">\n            <span className=\"c-match-result-viewer__points-value\">\n                {props.points}\n            </span>\n            &nbsp;\n            <span className=\"c-match-result-viewer__points-label\">points</span>\n        </div>\n        <div className=\"c-match-result-viewer__actions\">\n            {props.onNewMatch && (\n                <Button onClick={props.onNewMatch}>Play again</Button>\n            )}\n        </div>\n    </div>\n);\n","import classNames from 'classnames';\nimport React, { FC, useMemo, useRef, useState } from 'react';\nimport MediaQuery from 'react-responsive';\n\nimport { reduceGamesToStats } from 'src/models/stats';\nimport { Game, GinMatch } from '../../models';\nimport { Drawer, DrawerTitleSpacer } from '../Drawer/Drawer';\nimport { Form } from '../Form';\nimport { GameInput, GameInputProps, PartialGame } from '../GameInput';\nimport { ScoreColumn } from '../ScoreColumn';\nimport { ScrollViewer } from '../ScrollViewer';\nimport { SetView } from '../SetView';\nimport { StatsViewer } from '../StatsViewer';\nimport { focusRef } from '../util/Ref';\nimport { MatchResultViewer } from './MatchResultViewer';\nimport './MatchViewer.css';\n\nexport interface MatchViewerProps {\n    value: GinMatch;\n    readOnly?: boolean;\n    onSubmitGame?(game: Game): void;\n    onNewMatch?(): void;\n}\n\nexport const MatchViewer: FC<MatchViewerProps> = ({\n    value: { player1Name, player2Name, ...value },\n    readOnly,\n    ...props\n}) => {\n    const gameFormRef = useRef<GameForm>(null);\n    const stats = useMemo(() => reduceGamesToStats(value.games), [value.games]);\n    const [drawerOpen, setDrawerOpen] = useState(false);\n\n    const players = { player1Name, player2Name };\n\n    const closeGameForm = (): void => {\n        setDrawerOpen(false);\n    };\n\n    const gameForm = (\n        <GameForm\n            ref={gameFormRef}\n            {...players}\n            onSubmitGame={game => {\n                props.onSubmitGame?.(game);\n                closeGameForm();\n            }}\n        />\n    );\n\n    return (\n        <div\n            className={classNames('c-match-viewer', {\n                'c-match-viewer--finished': Boolean(value.finalResult),\n            })}\n        >\n            <MediaQuery minWidth={600}>\n                <ScrollViewer className=\"c-match-viewer__main\">\n                    <div className=\"c-match-viewer__sets\">\n                        {value.sets.map((s, i) => (\n                            <ScoreColumn key={i} {...players} value={s} />\n                        ))}\n                    </div>\n                    <StatsViewer value={stats} {...players} />\n                </ScrollViewer>\n            </MediaQuery>\n            <MediaQuery maxWidth={600}>\n                <ScrollViewer overflowX=\"hidden\">\n                    {value.sets.map((v, i) => (\n                        <SetView key={i} value={v} {...players} />\n                    ))}\n                    <StatsViewer value={stats} {...players} />\n                </ScrollViewer>\n            </MediaQuery>\n            {value.finalResult && (\n                <MatchResultViewer\n                    {...players}\n                    {...value.finalResult}\n                    onNewMatch={props.onNewMatch}\n                />\n            )}\n            {!readOnly && (\n                <>\n                    <MediaQuery maxWidth={1000}>\n                        <DrawerTitleSpacer />\n                        <Drawer\n                            open={drawerOpen}\n                            title=\"Add game\"\n                            onTitleClick={() => {\n                                setDrawerOpen(true);\n                                gameFormRef.current?.focus();\n                            }}\n                            onDismiss={closeGameForm}\n                            hideTitle={!!value.finalResult}\n                        >\n                            {gameForm}\n                        </Drawer>\n                    </MediaQuery>\n                    <MediaQuery minWidth={1000}>\n                        <div className=\"c-match-viewer__add-game\">\n                            <h1>Add game</h1>\n                            {gameForm}\n                        </div>\n                    </MediaQuery>\n                </>\n            )}\n        </div>\n    );\n};\n\ntype GameFormProps = Pick<MatchViewerProps, 'onSubmitGame'> &\n    Pick<GameInputProps, 'player1Name' | 'player2Name' | 'disabled'>;\n\nclass GameForm extends React.Component<GameFormProps, PartialGame> {\n    private readonly input = React.createRef<GameInput>();\n\n    constructor(props: GameFormProps) {\n        super(props);\n        this.state = PartialGame.DEFAULT;\n    }\n\n    public render() {\n        return (\n            <Form\n                className=\"c-gameform\"\n                onSubmit={this.handleSubmit}\n                disableSubmit={this.props.disabled || !Game.guard(this.state)}\n                submitLabel=\"Submit\"\n            >\n                <GameInput\n                    ref={this.input}\n                    player1Name={this.props.player1Name}\n                    player2Name={this.props.player2Name}\n                    disabled={this.props.disabled}\n                    value={this.state}\n                    onChange={this.handleChange}\n                />\n            </Form>\n        );\n    }\n\n    public readonly focus = () => focusRef(this.input);\n\n    private readonly handleChange = (value: PartialGame) => {\n        this.setState(value);\n    };\n\n    private readonly handleSubmit = () => {\n        // Don't allow submission of incomplete games\n        // TODO show an error in this case\n        if (!Game.guard(this.state)) return;\n\n        if (this.props.onSubmitGame) this.props.onSubmitGame(this.state);\n\n        // Wipe the state, so we're ready for the next game input.\n        this.setState(PartialGame.DEFAULT);\n\n        this.focus();\n    };\n}\n","import { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\n\nimport { creators } from '../Actions';\nimport { MatchViewer, MatchViewerProps } from '../components/MatchViewer';\nimport { reduceGamesToMatch } from '../models';\nimport { gameSelector, playerNameSelector } from '../Reducer';\nimport { State } from '../State';\n\nconst matchSelector = createSelector(\n    gameSelector,\n    playerNameSelector,\n    (games, players) => reduceGamesToMatch(players)(games),\n);\n\ntype StateProps = Pick<MatchViewerProps, 'value'>;\ntype DispatchProps = Pick<MatchViewerProps, 'onSubmitGame' | 'onNewMatch'>;\n\nconst mapStateToProps = (state: State): StateProps => ({\n    value: matchSelector(state),\n});\n\nconst mapDispatchToProps: DispatchProps = {\n    onSubmitGame: creators.FinishGame,\n    onNewMatch: creators.StartNewMatch,\n};\n\nexport const CurrentMatchViewer = connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(MatchViewer);\n","import React from 'react';\n\nimport { AppHeader } from '../../components/AppHeader';\nimport { CommandBar } from '../../containers/CommandBar';\nimport { CurrentMatchViewer } from '../../containers/CurrentMatchViewer';\n\nimport './Playing.css';\n\nexport const Playing: React.SFC = props => (\n    <div className=\"l-playing\">\n        <AppHeader />\n        <CommandBar />\n        <CurrentMatchViewer />\n    </div>\n);\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport { install } from 'redux-loop';\nimport './App.css';\n\nimport { retrieveState } from './Effects';\nimport { Playing } from './layouts/playing';\nimport { reducer } from './Reducer';\nimport { INITIAL_STATE } from './State';\n\n// XXX figure out why this didn't work.\nconst devtools = () =>\n    (window as any).__REDUX_DEVTOOLS_EXTENSION__ &&\n    (window as any).__REDUX_DEVTOOLS_EXTENSION__();\n\nexport const middleware = compose(\n    applyMiddleware(devtools),\n    install(),\n);\n\nconst store = createStore(\n    reducer,\n    retrieveState() || INITIAL_STATE,\n    // Hook enhancer for redux dev-tools\n    install(),\n);\n\nclass App extends React.Component {\n    public render() {\n        return (\n            <Provider store={store}>\n                <Playing />\n            </Provider>\n        );\n    }\n}\n\nexport default App;\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root') as HTMLElement\n);\nregisterServiceWorker();\n"],"sourceRoot":""}