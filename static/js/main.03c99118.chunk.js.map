{"version":3,"sources":["models/outcome.ts","models/index.ts","State.ts","Effects.ts","components/AppHeader/AppHeader.tsx","components/util/Event.ts","components/Button/index.tsx","Actions.ts","components/util/Ref.ts","components/Drawer/Drawer.tsx","components/Drawer/Toggle.tsx","components/Form.tsx","ControlledInput.ts","components/Input/Base.tsx","components/Input/Input.tsx","components/Input/Number.tsx","components/PlayersInput/PlayersInput.tsx","components/PlayersForm.tsx","Reducer.ts","containers/CommandBar/index.tsx","models/stats.ts","components/Radio/Radio.tsx","components/RadioGroup/RadioGroup.tsx","components/GameInput/GameInput.tsx","components/ScoreColumn/ScoreColumn.tsx","components/ScrollViewer/index.tsx","components/SetView/Summary.tsx","components/SetView/SetView.tsx","components/StatsViewer/StatsViewer.tsx","components/MatchViewer/MatchResultViewer.tsx","components/MatchViewer/MatchViewer.tsx","containers/CurrentMatchViewer.ts","layouts/playing/Playing.tsx","App.tsx","serviceWorkerRegistration.ts","index.tsx"],"names":["reduceGames","games","frame1","frame1End","reduceSet","frame2","frame2End","frame3","isSetFinished","ginSet","Boolean","finalResult","offset","endIndices","wins","Player","One","Two","scores","setGames","bonuses","reverse","nextEnd","pop","index","game","entries","Math","max","length","winner","points","runningTotal","push","player","label","PLAYERS","forEach","filter","wonBy","reduce","bonus","g","ginBonus","gin","b","getWinner","abs","currentScores","undefined","Gin","None","Normal","Super","computeMatchResult","sets","v","isHollywood","every","otherPlayer","nameOfPlayer","players","player1Name","player2Name","Game","x","State","state","version","migrateV1ToV2","UnknownVersionError","MigrationError","Error","constructor","message","super","this","INITIAL_STATE","initialDealer","LOCAL_STORAGE_KEY","persistState","window","localStorage","setItem","JSON","stringify","Promise","resolve","AppHeader","className","consumeEvent","e","stopPropagation","preventDefault","Button","forwardRef","ref","primary","props","classNames","onClick","button","confirmation","confirm","creators","UndoGame","type","RenamePlayers","names","FinishGame","result","StartNewMatch","SetInitialDealer","dealer","focusRef","current","focus","Drawer","drawerElement","useRef","titleButton","windowHeight","setWindowHeight","useState","innerHeight","useEffect","hideTitle","title","handler","addEventListener","removeEventListener","useLayoutEffect","navigator","standalone","bottom","getBoundingClientRect","bottomFix","style","setProperty","createPortal","CSSTransition","in","open","timeout","appear","mountOnEnter","unmountOnExit","onDismiss","onExit","onEntered","onExited","onKeyDown","key","Key","Escape","role","onTitleClick","Transition","children","document","body","DrawerTitleSpacer","ToggleDrawer","activator","setOpen","openDrawer","Form","onSubmit","disableSubmit","submitLabel","disabled","useFieldChangeHandler","newVal","fieldName","value","onChange","name","console","error","BaseInput","Input","target","NumberInput","rest","toString","evt","parseInputToInt","text","Number","parseInt","PlayersInput","handleChange","required","maxLength","PlayersForm","setValue","input","stopRenaming","defaultValue","marginLeft","marginRight","maxWidth","display","flexDirection","height","playerNameSelector","canUndoSelector","dealerSelector","matchHasStartedSelector","persisted","loop","Cmd","run","args","mapDispatchToProps","onStartNewMatch","onRenamePlayers","onUndoGame","CommandBar","connect","playerNames","canUndo","hasMatchStarted","newPerPlayer","reduceGamesToWins","reduceGamesToMeanPoints","perPlayer","reduceGamesToMaxStreak","currentStreak","maxStreak","reduceGamesToBiggestWin","reduceGamesToGins","Radio","Component","root","createRef","hasFocus","contains","activeElement","handleFocusChange","forceUpdate","render","selected","hideNative","checked","onFocus","onBlur","RadioGroup","React","first","horizontal","choices","map","choice","idx","PartialGame","DEFAULT","GameInput","focusTarget","useImperativeHandle","min","ScoreColumn","ScoreRow","BonusRow","isFirst","winnerCell","loserCell","bonusCell","ScrollViewer","overflowX","overflowY","SetSummary","outerProps","SetSummaryContainer","finished","SetView","PureComponent","StatsViewer","layout","showDealer","useSelector","StatsStack","StatsGrid","renderStats","formatter","StackRow","formatNumber","toFixed","formatGinCount","normals","supers","normal","whiteSpace","superSpan","opacity","DealerToken","StatsGridRow","row","identity","meanWinSize","biggestWin","ginGames","dispatch","useDispatch","Arrow","direction","viewBox","width","d","fill","transform","MatchResultViewer","onNewMatch","GameForm","draft","setDraft","onSubmitGame","matchSelector","createSelector","CurrentMatchViewer","readOnly","gameFormRef","stats","useMemo","reduceGamesToStats","drawerOpen","setDrawerOpen","closeGameForm","gameForm","minWidth","s","i","Playing","store","compose","applyMiddleware","__REDUX_DEVTOOLS_EXTENSION__","install","createStore","action","slice","raw","getItem","parsed","parse","retrieveState","App","isLocalhost","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","catch","ReactDOM","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.03c99118.chunk.js","sourcesContent":["import { Game, Gin, otherPlayer, Player, PLAYERS } from '.';\n\n// Output models for showing the result of a match.\n\n/**\n * A bonus awarded to a player at the end of a set. For example,\n * the first player to exceed 100 game points receives a 100-point\n * bonus for \"going over\".\n */\nexport interface Bonus {\n    player: Player;\n    points: number;\n    label: string;\n}\n\nexport interface GameInSet extends Game {\n    runningTotal: number;\n}\n\nexport type GinSet = GinSetInProgress | GinSetFinal;\n\nexport interface GinSetInProgress {\n    games: GameInSet[];\n    currentScores: {\n        [Player.One]: number;\n        [Player.Two]: number;\n    };\n    bonuses: Bonus[];\n    finalResult?: never;\n}\n\nexport interface GinSetFinal {\n    games: GameInSet[];\n    currentScores?: never;\n    bonuses: Bonus[];\n    finalResult: GinSetResult;\n}\n\nexport interface GinSetResult {\n    winner: Player;\n    /**\n     * The total number of points the player earned for the set.\n     */\n    points: number;\n}\n\nexport interface GinMatch {\n    games: Game[];\n    sets: GinSet[];\n    finalResult?: GinMatchResult;\n}\n\nexport interface GinMatchResult {\n    /**\n     * Whether the winning player won every single match. In this case,\n     * the `points` property will be 2x the sum of the three sets.\n     */\n    isHollywood: boolean;\n    winner: Player;\n    points: number;\n}\n\nexport const reduceGamesToMatch = (games: Game[]): GinMatch => {\n    const sets = reduceGames(games);\n    const finalResult = sets.every(isSetFinished)\n        ? computeMatchResult(sets, games)\n        : undefined;\n\n    return {\n        games,\n        sets,\n        finalResult,\n    };\n};\n\n/**\n * Reduce a sequence of games into three sets.\n *\n * @param games A sequence of games in order played\n */\nexport const reduceGames = (games: Game[]): [GinSet, GinSet, GinSet] => {\n    const [frame1, frame1End] = reduceSet(games);\n    const [frame2, frame2End] = reduceSet(games, 1, [frame1End]);\n    const [frame3] = reduceSet(games, 2, [frame1End, frame2End]);\n\n    return [frame1, frame2, frame3];\n};\n\n/**\n * Checks if a set is finished. This function assumes that sets are built by\n * `reduceSet` and therefore will always have bonuses applied as soon as a\n * player \"goes out\".\n */\nexport const isSetFinished = (ginSet: GinSet): ginSet is GinSetFinal =>\n    Boolean(ginSet.finalResult);\n\nexport const isSetInProgress = (ginSet: GinSet): ginSet is GinSetInProgress =>\n    Boolean(ginSet.currentScores);\n\n/**\n * Transform a sequence of games into a set.\n * @param games A raw sequence of games\n * @param offset The 0-indexed frame number. In gin, a player's first win\n * is not propagated to frames 2 or 3.\n * @param endIndices The index of the last game from the previous set.\n *\n * @return An array containing a gin set, and - if the set is finished - the\n * index of the last game processed.\n */\nconst reduceSet = (\n    games: Game[],\n    offset: number = 0,\n    endIndices: (number | undefined)[] = [],\n): [GinSet, number?] => {\n    /**\n     * Map of player ID to win count, adjusted for the frame entry requirement.\n     * This is used for applying bonuses for win count at the end of the frame,\n     * in addition to gating game entry into the frame.\n     */\n    const wins = {\n        [Player.One]: offset * -1,\n        [Player.Two]: offset * -1,\n    };\n\n    const scores = {\n        [Player.One]: 0,\n        [Player.Two]: 0,\n    };\n\n    const setGames: GameInSet[] = [];\n    const bonuses: Bonus[] = [];\n\n    endIndices.reverse();\n    let nextEnd = endIndices.pop();\n\n    for (const [index, game] of games.entries()) {\n        // If we've passed the end of a previous set, then we reduce the barrier\n        // to entry for the current set by 1 if the player is winless.\n        if (typeof nextEnd === 'number' && index >= nextEnd + 1) {\n            wins[Player.One] = Math.max(\n                -1 * endIndices.length,\n                wins[Player.One],\n            );\n            wins[Player.Two] = Math.max(\n                -1 * endIndices.length,\n                wins[Player.Two],\n            );\n            nextEnd = endIndices.pop();\n        }\n\n        // Increment win counter to maybe qualify for frame and to\n        // ensure the player gets credit for the win in bonus calculation.\n        wins[game.winner] += 1;\n\n        // For frame 2 and frame 3, skip games that don't qualify\n        if (wins[game.winner] <= 0) continue;\n\n        scores[game.winner] += game.points;\n        const runningTotal = scores[game.winner];\n\n        setGames.push({\n            ...game,\n            runningTotal,\n        });\n\n        if (runningTotal >= 100) {\n            bonuses.push({\n                player: game.winner,\n                points: 100,\n                label: 'Going out',\n            });\n\n            PLAYERS.forEach(player => {\n                if (wins[player] > 0) {\n                    bonuses.push({\n                        player,\n                        points: 10 * wins[player],\n                        label: 'Wins',\n                    });\n                }\n            });\n\n            PLAYERS.forEach(player => {\n                const points = setGames\n                    .filter(wonBy(player))\n                    .reduce((bonus, g) => bonus + ginBonus(g.gin), 0);\n\n                if (points) {\n                    bonuses.push({\n                        player,\n                        points,\n                        label: 'Gins',\n                    });\n                }\n            });\n\n            if (wins[Player.Two] <= 0) {\n                bonuses.push({\n                    player: Player.One,\n                    points:\n                        runningTotal +\n                        bonuses\n                            .filter(g => g.player === Player.One)\n                            .reduce((b, { points }) => b + points, 0),\n                    label: 'Blitz',\n                });\n            }\n\n            if (wins[Player.One] <= 0) {\n                bonuses.push({\n                    player: Player.Two,\n                    points:\n                        runningTotal +\n                        bonuses\n                            .filter(g => g.player === Player.Two)\n                            .reduce((b, { points }) => b + points, 0),\n                    label: 'Blitz',\n                });\n            }\n\n            scores[Player.One] += bonuses\n                .filter(g => g.player === Player.One)\n                .reduce((b, { points }) => b + points, 0);\n\n            scores[Player.Two] += bonuses\n                .filter(g => g.player === Player.Two)\n                .reduce((b, { points }) => b + points, 0);\n\n            const finalResult = {\n                winner: getWinner(scores),\n                points: Math.abs(scores[Player.One] - scores[Player.Two]),\n            };\n\n            // We don't include running totals if the game has ended\n            return [{ bonuses, finalResult, games: setGames }, index];\n        }\n    }\n\n    return [\n        {\n            bonuses,\n            currentScores: scores,\n            games: setGames,\n        },\n        // The game didn't end, so no end marker is returned.\n        undefined,\n    ];\n};\n\nconst getWinner = (scores: {\n    [Player.One]: number;\n    [Player.Two]: number;\n}): Player =>\n    scores[Player.One] > scores[Player.Two] ? Player.One : Player.Two;\n\nconst ginBonus = (gin: Gin): number => {\n    switch (gin) {\n        case Gin.None:\n            return 0;\n        case Gin.Normal:\n            return 25;\n        case Gin.Super:\n            return 50;\n    }\n};\n\nconst wonBy =\n    (player: Player) =>\n    (game: Game): boolean =>\n        game.winner === player;\n\nconst computeMatchResult = (sets: GinSet[], games: Game[]): GinMatchResult => {\n    const scores = {\n        [Player.One]: 0,\n        [Player.Two]: 0,\n    };\n\n    sets.forEach(v => (scores[v.finalResult!.winner] += v.finalResult!.points));\n\n    const winner = getWinner(scores);\n    const isHollywood = games.every(wonBy(winner));\n    return {\n        winner,\n        isHollywood,\n        points: isHollywood\n            ? 2 * scores[winner]\n            : scores[winner] - scores[otherPlayer(winner)],\n    };\n};\n","export * from './outcome';\n\nexport enum Player {\n    One = 1,\n    Two = 2,\n}\n\nexport const PLAYERS = [Player.One, Player.Two];\n\nexport interface PlayerNames {\n    player1Name: string;\n    player2Name: string;\n}\n\n/**\n * Get the name of a player from a pair of names.\n */\nexport const nameOfPlayer = (players: PlayerNames, player: Player): string =>\n    player === Player.One ? players.player1Name : players.player2Name;\n\n/**\n * Get the opponent of the passed-in player.\n */\nexport const otherPlayer = (player: Player): Player =>\n    player === Player.One ? Player.Two : Player.One;\n\nexport enum Gin {\n    None = 'none',\n    Normal = 'normal',\n    Super = 'super',\n}\n\n/**\n * A single game of gin; undercuts are not tracked separately.\n */\nexport interface Game {\n    winner: Player;\n    points: number;\n    gin: Gin;\n}\n\nexport const Game = {\n    guard: (x: any): x is Game =>\n        x.winner !== null &&\n        typeof x === 'object' &&\n        typeof x.points === 'number' &&\n        typeof x.gin === 'string' &&\n        x.winner !== undefined,\n};\n","import { Game, Player, PLAYERS } from './models';\n\nexport const LATEST_STATE_VERSION = 2 as const;\n\nexport interface StateV1 {\n    version: 1;\n    player1Name: string;\n    player2Name: string;\n    games: Game[];\n}\n\nexport const StateV1 = {\n    guard: (x: any): x is StateV1 =>\n        typeof x === 'object' &&\n        typeof x.player1Name === 'string' &&\n        typeof x.player2Name === 'string' &&\n        x.version === 1 &&\n        Array.isArray(x.games),\n};\n\nexport interface StateV2 {\n    version: 2;\n    player1Name: string;\n    player2Name: string;\n    games: Game[];\n    initialDealer: Player;\n}\n\nexport const StateV2 = {\n    guard: (x: any): x is StateV2 =>\n        typeof x === 'object' &&\n        typeof x.player1Name === 'string' &&\n        typeof x.player2Name === 'string' &&\n        x.version === 1 &&\n        Array.isArray(x.games) &&\n        PLAYERS.includes(x.initialDealer),\n};\n\nexport type HistoricalState = StateV1 | StateV2;\n\nexport type State = StateV2;\n\nexport const State = {\n    /**\n     * Migrate a state object forward to the latest version expected by\n     * the app.\n     *\n     * @param state A valid state emitted by an earlier version of the app\n     * @returns A state object on the current version\n     */\n    modernize: (state: HistoricalState): State => {\n        switch (state.version) {\n            case 2:\n                return state;\n            case 1:\n                return migrateV1ToV2(state);\n            default:\n                throw new UnknownVersionError(state);\n        }\n    },\n};\n\nclass MigrationError extends Error {\n    constructor(message: string, public readonly state: unknown) {\n        super(message);\n    }\n}\n\nclass UnknownVersionError extends MigrationError {\n    public readonly version: unknown;\n    constructor(state: HistoricalState) {\n        super(`Unknown state version '${state.version}'`, state);\n        this.version = state.version;\n    }\n}\n\nexport const INITIAL_STATE: State = {\n    version: LATEST_STATE_VERSION,\n    player1Name: 'Player 1',\n    player2Name: 'Player 2',\n    games: [],\n    initialDealer: Player.One,\n};\n\nexport const isState = (x: any): x is State =>\n    typeof x === 'object' &&\n    typeof x.player1Name === 'string' &&\n    typeof x.player2Name === 'string' &&\n    typeof x.version === 'number';\n\nconst migrateV1ToV2 = (state: StateV1): StateV2 => ({\n    ...state,\n    version: 2,\n    initialDealer: Player.One,\n});\n","import { isState, State } from './State';\n\nconst LOCAL_STORAGE_KEY = 'reduxState';\n\n/**\n * Write the current redux state into local storage.\n */\nexport const persistState = (state: State): Promise<void> => {\n    window.localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(state));\n    return Promise.resolve();\n};\n\n/**\n * Read the redux state from local storage.\n */\nexport const retrieveState = (): State | undefined => {\n    const raw = window.localStorage.getItem(LOCAL_STORAGE_KEY);\n    if (!raw) return;\n\n    try {\n        const parsed = JSON.parse(raw);\n        if (!isState(parsed)) return;\n        try {\n            return State.modernize(parsed);\n        } catch (e) {\n            console.error(e);\n            return;\n        }\n    } catch (e) {\n        console.error('Could not read state as JSON', e);\n        return;\n    }\n};\n","import { FC } from 'react';\n\nimport './AppHeader.scss';\n\nexport const AppHeader: FC = () => (\n    <header className=\"c-app-header\">\n        <h1>Gin Scorer</h1>\n    </header>\n);\n","export interface ConsumableEvent {\n    preventDefault(): void;\n    stopPropagation(): void;\n}\n\nexport const consumeEvent = (e: ConsumableEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n};\n","import classNames from 'classnames';\nimport { ButtonHTMLAttributes, forwardRef } from 'react';\n\nimport { consumeEvent } from '../util/Event';\n\nimport './Button.scss';\n\nexport type ButtonRef = Pick<\n    HTMLButtonElement,\n    'getBoundingClientRect' | 'focus'\n>;\n\nexport const Button = forwardRef<\n    ButtonRef,\n    Omit<ButtonHTMLAttributes<HTMLButtonElement>, 'onClick'> & {\n        primary?: boolean;\n        /**\n         * When set to a non-empty string, a confirmation message to show to\n         * the user. If they click the button and confirm at the prompt,\n         * the button's `onClick` function will be called.\n         */\n        confirmation?: string;\n        onClick?(): void;\n    }\n>(({ primary, ...props }, ref) => (\n    <button\n        {...props}\n        ref={ref as any}\n        className={classNames(\n            'c-button',\n            primary && 'c-button--primary',\n            props.className,\n        )}\n        onClick={e => {\n            if (e.button || !props.onClick) return;\n            consumeEvent(e);\n            if (props.confirmation && !window.confirm(props.confirmation)) {\n                return;\n            }\n            props.onClick();\n        }}\n    />\n));\n","import { Game, Player, PlayerNames } from './models';\n\n/**\n * Action emitted when a game has been finished and a new result is ready.\n * The provided game will be added to the end of the game list.\n */\nexport interface FinishGame {\n    type: 'FinishGame';\n    result: Game;\n}\n\n/**\n * Remove the most recent game from the history; useful for correcting\n * mistakes in submission.\n */\nexport interface UndoGame {\n    type: 'UndoGame';\n}\n\n/**\n * Start a new match, clearing all game history.\n */\nexport interface StartNewMatch {\n    type: 'StartNewMatch';\n}\n\nexport interface RenamePlayers extends PlayerNames {\n    type: 'RenamePlayers';\n}\n\nexport interface SetInitialDealer {\n    type: 'SetInitialDealer';\n    dealer: Player;\n}\n\nexport type Action =\n    | RenamePlayers\n    | FinishGame\n    | StartNewMatch\n    | UndoGame\n    | SetInitialDealer;\n\nexport const creators = {\n    UndoGame: (): UndoGame => ({\n        type: 'UndoGame',\n    }),\n    RenamePlayers: (names: PlayerNames): RenamePlayers => ({\n        ...names,\n        type: 'RenamePlayers',\n    }),\n    FinishGame: (result: Game): FinishGame => ({\n        type: 'FinishGame',\n        result,\n    }),\n    StartNewMatch: (): StartNewMatch => ({\n        type: 'StartNewMatch',\n    }),\n    SetInitialDealer: (dealer: Player): SetInitialDealer => ({\n        type: 'SetInitialDealer',\n        dealer,\n    }),\n};\n","import { RefObject } from 'react';\n\nexport const focusRef = (ref: RefObject<{ focus(): void }>): void => {\n    ref.current?.focus();\n};\n\nexport const refChildHasFocus = (ref: RefObject<HTMLElement>) => (): boolean =>\n    ref.current?.contains(document.activeElement) ?? false;\n\nexport const mapRef = <T, U>(ref: RefObject<T>, mapFn: (r: T) => U): U | null =>\n    ref.current ? mapFn(ref.current) : null;\n","import classNames from 'classnames';\nimport {\n    FC,\n    KeyboardEvent,\n    useEffect,\n    useLayoutEffect,\n    useRef,\n    useState,\n} from 'react';\nimport { createPortal } from 'react-dom';\nimport { CSSTransition, Transition } from 'react-transition-group';\nimport { Key } from 'w3c-keys';\n\nimport { consumeEvent } from '../util/Event';\nimport { focusRef } from '../util/Ref';\nimport './Drawer.scss';\n\nconst TRANSITION_TIMEOUT_MS = 125;\n\nexport const Drawer: FC<{\n    open?: boolean;\n    hideTitle?: boolean;\n    title?: string;\n    onTitleClick?(): void;\n    onEntered?(): void;\n    onExited?(): void;\n    /**\n     * Event handler called when the user attempts to dismiss the\n     * drawer. If no handler is provided, the user cannot dismiss\n     * the drawer.\n     */\n    onDismiss?(): void;\n}> = props => {\n    const drawerElement = useRef<HTMLDivElement>(null);\n    const titleButton = useRef<HTMLButtonElement>(null);\n    const handleKeyDown = (e: KeyboardEvent<unknown>): void => {\n        if (e.key === Key.Escape && props.onDismiss) {\n            consumeEvent(e);\n            props.onDismiss();\n        }\n    };\n    const [windowHeight, setWindowHeight] = useState(window.innerHeight);\n    useEffect(() => {\n        if (props.hideTitle || !props.title) return;\n        const handler = () => setWindowHeight(window.innerHeight);\n        window.addEventListener('resize', handler);\n        return () => window.removeEventListener('resize', handler);\n    }, [props.title, props.hideTitle]);\n\n    // Safari's address bar interacts frustratingly with the 100vh measurement\n    // used to anchor the drawer to the bottom of the screen. To avoid drawer\n    // buttons being drawn inaccessibly out of view, push the button in the\n    // closed state up by the amount it's out of frame.\n    useLayoutEffect(() => {\n        if (!titleButton.current) return;\n        // There's no address bar in standalone mode\n        if ('standalone' in navigator && (navigator as any).standalone) return;\n        const { bottom } = titleButton.current.getBoundingClientRect();\n        const bottomFix = Math.max(0, bottom - windowHeight);\n        drawerElement.current?.style.setProperty(\n            '--safari-correction',\n            `${bottomFix}px`,\n        );\n    }, [windowHeight]);\n\n    return createPortal(\n        <>\n            <CSSTransition\n                in={props.open}\n                timeout={TRANSITION_TIMEOUT_MS}\n                classNames=\"c-drawer__backdrop\"\n                appear\n                mountOnEnter\n                unmountOnExit\n            >\n                <div\n                    onClick={e => {\n                        // only consider primary clicks\n                        if (e.button !== 0) return;\n                        props.onDismiss?.();\n                    }}\n                    className=\"c-drawer__backdrop\"\n                />\n            </CSSTransition>\n            <CSSTransition\n                in={props.open}\n                classNames=\"c-drawer\"\n                timeout={TRANSITION_TIMEOUT_MS}\n                onExit={() => focusRef(titleButton)}\n                onEntered={props.onEntered}\n                onExited={props.onExited}\n                appear\n            >\n                <div\n                    ref={drawerElement}\n                    className={classNames('c-drawer', {\n                        'c-drawer--has-title':\n                            Boolean(props.title) && !props.hideTitle,\n                    })}\n                    onKeyDown={handleKeyDown}\n                    role=\"dialog\"\n                >\n                    {props.title && (\n                        <button\n                            ref={titleButton}\n                            className=\"c-drawer__title\"\n                            onClick={e => {\n                                consumeEvent(e);\n                                props.onTitleClick?.();\n                            }}\n                        >\n                            <span className=\"c-drawer__title__text\">\n                                {props.title}\n                            </span>\n                        </button>\n                    )}\n                    <Transition\n                        in={props.open}\n                        timeout={TRANSITION_TIMEOUT_MS}\n                        appear\n                        mountOnEnter\n                        unmountOnExit\n                    >\n                        {props.children}\n                    </Transition>\n                </div>\n            </CSSTransition>\n        </>,\n        document.body,\n    );\n};\n\n/**\n * Placeholder element which can be used to make sure scrolling content isn't\n * hidden by the drawer title.\n */\nexport const DrawerTitleSpacer: FC = () => (\n    <div className=\"c-drawer-title-placeholder\" />\n);\n","import { FC, ReactNode, useState } from 'react';\nimport { Drawer } from '.';\n\nexport const ToggleDrawer: FC<{\n    activator(props: { openDrawer(): void }): ReactNode;\n}> = ({ activator, children }) => {\n    const [open, setOpen] = useState(false);\n    return (\n        <>\n            {activator({ openDrawer: () => setOpen(true) })}\n            <Drawer open={open} onDismiss={() => setOpen(false)}>\n                {children}\n            </Drawer>\n        </>\n    );\n};\n","import { FC } from 'react';\n\nimport { Button } from './Button';\nimport { consumeEvent } from './util/Event';\n\n/**\n * A wrapper for a native form that provides Enter-key submission abilities\n * and semantic correctness.\n */\nexport const Form: FC<{\n    className?: string;\n    style?: React.CSSProperties;\n    disableSubmit?: boolean;\n    submitLabel?: React.ReactNode;\n    onSubmit(): void;\n}> = props => (\n    <form\n        style={props.style}\n        className={props.className}\n        onSubmit={e => {\n            consumeEvent(e);\n            if (props.disableSubmit) return;\n            props.onSubmit();\n        }}\n    >\n        {props.children}\n        {props.submitLabel && (\n            <Button primary disabled={props.disableSubmit} type=\"submit\">\n                {props.submitLabel}\n            </Button>\n        )}\n    </form>\n);\n","export type ChangeHandler<T> = (newVal: T, name?: string) => void;\n\nexport interface ControlledInput<T> {\n    value: T;\n    disabled?: boolean;\n    name?: string;\n    onChange: ChangeHandler<T>;\n}\n\nexport const useFieldChangeHandler =\n    <T extends {}>(props: ControlledInput<T>): ChangeHandler<T[keyof T]> =>\n    (newVal, fieldName) => {\n        const { value, onChange, disabled, name } = props;\n\n        if (disabled) return;\n\n        if (fieldName === undefined) {\n            console.error(\n                'Field change handler got value',\n                newVal,\n                'with no field name',\n            );\n            return;\n        }\n\n        onChange?.(\n            {\n                ...(value as any),\n                [fieldName]: newVal,\n            },\n            name,\n        );\n    };\n","import classNames from 'classnames';\nimport { forwardRef, InputHTMLAttributes } from 'react';\n\nimport './Input.scss';\n\nexport const BaseInput = forwardRef<\n    HTMLInputElement,\n    InputHTMLAttributes<HTMLInputElement>\n>((props, ref) => (\n    <input\n        ref={ref}\n        {...props}\n        className={classNames('c-base-input', props.className)}\n    />\n));\n","import classNames from 'classnames';\nimport { forwardRef, InputHTMLAttributes } from 'react';\n\nimport { ControlledInput } from '../../ControlledInput';\nimport { Focus } from '../util/Focus';\nimport { BaseInput } from './Base';\nimport './Input.scss';\n\nexport const Input = forwardRef<\n    Focus,\n    ControlledInput<string> & {\n        className?: string;\n        label?: string;\n    } & Pick<InputHTMLAttributes<HTMLInputElement>, 'required' | 'maxLength'>\n>(({ onChange, label, className, ...props }, ref) => (\n    <label className={classNames('c-input', className)}>\n        {label && <div className=\"c-input-label\">{label}</div>}\n        <BaseInput\n            {...props}\n            ref={ref as any}\n            onChange={e => onChange(e.target.value, props.name)}\n        />\n    </label>\n));\n","import classNames from 'classnames';\nimport { FC } from 'react';\n\nimport { ControlledInput } from '../../ControlledInput';\nimport { BaseInput } from './Base';\n\nexport interface NumberInputProps extends ControlledInput<number | null> {\n    min?: number;\n    max?: number;\n    step?: number;\n    className?: string;\n}\n\nexport const NumberInput: FC<NumberInputProps> = props => {\n    const { value, className, ...rest } = props;\n    return (\n        <BaseInput\n            {...rest}\n            className={classNames('c-number-input', className)}\n            type=\"number\"\n            value={value !== null ? value.toString() : ''}\n            onChange={evt => {\n                props.onChange(parseInputToInt(evt.target.value), props.name);\n            }}\n        />\n    );\n};\n\nconst parseInputToInt = (text: string): number | null =>\n    text === '' ? null : Number.parseInt(text, 10);\n","import { forwardRef } from 'react';\n\nimport { ControlledInput, useFieldChangeHandler } from '../../ControlledInput';\nimport { PlayerNames } from '../../models';\nimport { Input } from '../Input';\nimport { Focus } from '../util/Focus';\nimport './PlayersInput.scss';\n\nexport const PlayersInput = forwardRef<Focus, ControlledInput<PlayerNames>>(\n    (props, ref) => {\n        const handleChange = useFieldChangeHandler(props);\n\n        const { value, disabled } = props;\n        return (\n            <div className=\"c-players-input\">\n                <Input\n                    ref={ref}\n                    label=\"Player 1\"\n                    name=\"player1Name\"\n                    value={value.player1Name}\n                    disabled={disabled}\n                    onChange={handleChange}\n                    required\n                    maxLength={15}\n                />\n                <Input\n                    label=\"Player 2\"\n                    name=\"player2Name\"\n                    value={value.player2Name}\n                    disabled={disabled}\n                    onChange={handleChange}\n                    required\n                    maxLength={15}\n                />\n            </div>\n        );\n    },\n);\n","import { FC, useRef, useState } from 'react';\n\nimport { PlayerNames } from '../models';\nimport { Button, ButtonRef } from './Button';\nimport { Drawer } from './Drawer';\nimport { Form } from './Form';\nimport { PlayersInput } from './PlayersInput';\nimport { Focus } from './util/Focus';\n\nexport interface PlayersFormProps {\n    value: PlayerNames;\n    onPlayersSubmit(players: PlayerNames): void;\n}\n\nexport const PlayersForm: FC<{\n    /**\n     * The currently-committed player names. Updates to this property while\n     * the renaming form is shown will not take effect until the form is\n     * closed, and may be superseded by a form submission.\n     */\n    defaultValue: PlayerNames;\n    onSubmit(names: PlayerNames): void;\n}> = props => {\n    // The draft values for player names. The presence of a draft means the\n    // form is currently open; if this is `null` the form is not visible.\n    const [value, setValue] = useState<PlayerNames | null>(null);\n    const button = useRef<ButtonRef>(null);\n    const input = useRef<Focus>(null);\n\n    const stopRenaming = () => setValue(null);\n\n    return (\n        <>\n            <Button ref={button} onClick={() => setValue(props.defaultValue)}>\n                Rename Players\n            </Button>\n            <Drawer\n                hideTitle\n                title=\"Rename Players\"\n                open={value !== null}\n                onDismiss={stopRenaming}\n                onEntered={() => input.current?.focus()}\n                onExited={() => button.current?.focus()}\n            >\n                <Form\n                    style={{\n                        marginLeft: 10,\n                        marginRight: 10,\n                        maxWidth: '30em',\n                        display: 'flex',\n                        flexDirection: 'column',\n                    }}\n                    onSubmit={() => {\n                        if (!value) return;\n                        props.onSubmit(value);\n                        stopRenaming();\n                    }}\n                >\n                    <PlayersInput\n                        ref={input}\n                        value={value ?? props.defaultValue}\n                        onChange={v => setValue(v)}\n                    />\n                    <div style={{ height: 20 }} />\n                    <Button primary type=\"submit\">\n                        Update\n                    </Button>\n                </Form>\n            </Drawer>\n        </>\n    );\n};\n","import { Cmd, Loop, loop, LoopReducer } from 'redux-loop';\nimport { Action } from './Actions';\nimport { persistState } from './Effects';\nimport { Game, nameOfPlayer, otherPlayer, Player } from './models';\nimport { State } from './State';\n\nexport const gameSelector = (state: State): Game[] => state.games;\n\nexport const playerNameSelector = ({\n    player1Name,\n    player2Name,\n}: State): Pick<State, 'player1Name' | 'player2Name'> => ({\n    player1Name,\n    player2Name,\n});\n\nexport const canUndoSelector = ({ games }: State): boolean =>\n    Boolean(games.length);\n\nexport const dealerSelector = ({ games, initialDealer }: State): Player =>\n    games.length % 2 === 0 ? initialDealer : otherPlayer(initialDealer);\n\nexport const dealerNameSelector = (state: State): string =>\n    nameOfPlayer(state, dealerSelector(state));\n\nexport const matchHasStartedSelector = (state: State): boolean =>\n    Boolean(state.games.length);\n\nexport const reducer: LoopReducer<State, Action> = (\n    state: State,\n    action: Action,\n) => {\n    switch (action.type) {\n        case 'RenamePlayers': {\n            const { player1Name, player2Name } = action;\n            return persisted({\n                ...state,\n                player1Name,\n                player2Name,\n            });\n        }\n        case 'FinishGame': {\n            return persisted({\n                ...state,\n                games: [...state.games, action.result],\n            });\n        }\n        case 'UndoGame': {\n            return persisted({\n                ...state,\n                games: state.games.slice(0, state.games.length - 1),\n            });\n        }\n        case 'StartNewMatch': {\n            return persisted({\n                ...state,\n                games: [],\n            });\n        }\n        case 'SetInitialDealer': {\n            // If the match is in progress, don't allow the initial dealer to\n            // change.\n            if (state.games.length) return state;\n\n            return persisted({\n                ...state,\n                initialDealer: action.dealer,\n            });\n        }\n        default: {\n            return state;\n        }\n    }\n};\n\nconst persisted = (state: State): Loop<State> =>\n    loop(\n        state,\n        Cmd.run(persistState, {\n            args: [state],\n        }),\n    );\n","import { FC } from 'react';\n\nimport { connect } from 'react-redux';\nimport { Button } from '../../components/Button';\nimport { PlayerNames } from '../../models';\nimport { creators } from '../../Actions';\nimport { PlayersForm } from '../../components/PlayersForm';\nimport {\n    canUndoSelector,\n    matchHasStartedSelector,\n    playerNameSelector,\n} from '../../Reducer';\nimport { State } from '../../State';\n\ninterface StateProps {\n    playerNames: PlayerNames;\n    canUndo: boolean;\n    hasMatchStarted: boolean;\n}\n\ninterface DispatchProps {\n    onRenamePlayers: typeof creators.RenamePlayers;\n    onStartNewMatch(): void;\n    onUndoGame(): void;\n}\n\nconst mapStateToProps = (state: State): StateProps => ({\n    playerNames: playerNameSelector(state),\n    canUndo: canUndoSelector(state),\n    hasMatchStarted: matchHasStartedSelector(state),\n});\n\nconst mapDispatchToProps: DispatchProps = {\n    onStartNewMatch: creators.StartNewMatch,\n    onRenamePlayers: creators.RenamePlayers,\n    onUndoGame: creators.UndoGame,\n};\n\nconst DisconnectedCommandBar: FC<StateProps & DispatchProps> = props => (\n    <div className=\"c-command-bar\">\n        <Button onClick={props.onUndoGame} disabled={!props.canUndo}>\n            Undo Last Game\n        </Button>\n        <Button\n            onClick={props.onStartNewMatch}\n            disabled={!props.hasMatchStarted}\n            confirmation=\"Are you sure you want to start a new match?\"\n        >\n            New Match\n        </Button>\n        <PlayersForm\n            defaultValue={props.playerNames}\n            onSubmit={props.onRenamePlayers}\n        />\n    </div>\n);\n\nexport const CommandBar = connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(DisconnectedCommandBar);\n","import { Game, Gin, otherPlayer, Player } from '.';\n\nexport interface PerPlayer<T = number> {\n    [Player.One]: T;\n    [Player.Two]: T;\n}\n\nexport interface Stats {\n    /**\n     * The number of games won by each player in the current match.\n     */\n    wins: PerPlayer;\n    /**\n     * The maximum number of consecutive games won by each player in\n     * the current match.\n     */\n    maxStreak: PerPlayer;\n    /**\n     * The average number of points each player received on winning a\n     * game in the current match.\n     */\n    meanWinSize: PerPlayer;\n    /**\n     * The max number of points earned by each player in a single game.\n     */\n    biggestWin: PerPlayer;\n    /**\n     * The number of games in which a player earned normal and super gins.\n     * A gin in multiple columns will only count once in this stat.\n     */\n    ginGames: PerPlayer<{ [Gin.Normal]: number; [Gin.Super]: number }>;\n}\n\nconst newPerPlayer = (): PerPlayer => ({\n    [Player.One]: 0,\n    [Player.Two]: 0,\n});\n\nexport const reduceGamesToStats = (games: Game[]): Stats => {\n    const wins = reduceGamesToWins(games);\n\n    return {\n        wins,\n        meanWinSize: reduceGamesToMeanPoints(games, wins),\n        maxStreak: reduceGamesToMaxStreak(games),\n        biggestWin: reduceGamesToBiggestWin(games),\n        ginGames: reduceGamesToGins(games),\n    };\n};\n\nconst reduceGamesToWins = (games: Game[]): PerPlayer =>\n    games.reduce((state, game) => {\n        state[game.winner] += 1;\n        return state;\n    }, newPerPlayer());\n\nconst reduceGamesToMeanPoints = (games: Game[], wins: PerPlayer): PerPlayer => {\n    const perPlayer = games.reduce((state, game) => {\n        state[game.winner] += game.points;\n        return state;\n    }, newPerPlayer());\n    if (wins[Player.One]) perPlayer[Player.One] /= wins[Player.One];\n    if (wins[Player.Two]) perPlayer[Player.Two] /= wins[Player.Two];\n\n    return perPlayer;\n};\n\nconst reduceGamesToMaxStreak = (games: Game[]): PerPlayer => {\n    const currentStreak = newPerPlayer();\n    const maxStreak = newPerPlayer();\n\n    for (const game of games) {\n        currentStreak[game.winner] += 1;\n        currentStreak[otherPlayer(game.winner)] = 0;\n\n        if (currentStreak[game.winner] > maxStreak[game.winner]) {\n            maxStreak[game.winner] = currentStreak[game.winner];\n        }\n    }\n\n    return maxStreak;\n};\n\nconst reduceGamesToBiggestWin = (games: Game[]): PerPlayer =>\n    games.reduce((state, game) => {\n        state[game.winner] = Math.max(state[game.winner], game.points);\n        return state;\n    }, newPerPlayer());\n\nconst reduceGamesToGins = (\n    games: Game[],\n): PerPlayer<{ [Gin.Normal]: number; [Gin.Super]: number }> =>\n    games.reduce(\n        (state, game) => {\n            if (game.gin !== Gin.None) {\n                state[game.winner][game.gin] += 1;\n            }\n\n            return state;\n        },\n        {\n            [Player.One]: { [Gin.Normal]: 0, [Gin.Super]: 0 },\n            [Player.Two]: { [Gin.Normal]: 0, [Gin.Super]: 0 },\n        },\n    );\n","import classNames from 'classnames';\nimport { Component, createRef, ReactNode } from 'react';\n\nimport { focusRef, refChildHasFocus } from '../util/Ref';\nimport './Radio.scss';\n\nexport interface RadioProps<T extends string | number = string> {\n    className?: string;\n    label?: string;\n    selected: boolean;\n    value: T;\n    disabled?: boolean;\n    name?: string;\n    /**\n     * When `true`, the native radio element will be rendered as 0x0 to avoid\n     * showing. The caller should then use classes to style the component as-desired.\n     */\n    hideNative?: boolean;\n    onChange(newValue: T, name?: string): void;\n}\n\nexport class Radio<T extends string | number = string> extends Component<\n    RadioProps<T>\n> {\n    private readonly root = createRef<HTMLLabelElement>();\n\n    public readonly hasFocus = refChildHasFocus(this.root);\n\n    public render(): ReactNode {\n        const { className, children, value, label, ...props } = this.props;\n\n        return (\n            <label\n                ref={this.root}\n                className={classNames('c-radio', className, {\n                    'c-radio--checked': props.selected,\n                    'c-radio--disabled': props.disabled,\n                    'c-radio--nonative': props.hideNative,\n                    'c-radio--has-focus': this.hasFocus(),\n                })}\n            >\n                <input\n                    name={props.name}\n                    disabled={props.disabled}\n                    checked={props.selected}\n                    onChange={this.handleChange}\n                    value={value.toString()}\n                    type=\"radio\"\n                    onFocus={this.handleFocusChange}\n                    onBlur={this.handleFocusChange}\n                />\n                {label}\n            </label>\n        );\n    }\n\n    public readonly focus = () => focusRef(this.root);\n\n    private readonly handleFocusChange = () => this.forceUpdate();\n\n    private readonly handleChange = () => {\n        this.props.onChange?.(this.props.value, this.props.name);\n    };\n}\n","import classNames from 'classnames';\nimport React from 'react';\n\nimport { ControlledInput } from '../../ControlledInput';\nimport { Radio } from '../Radio';\nimport { focusRef } from '../util/Ref';\nimport './RadioGroup.scss';\n\nexport interface Choice<T extends string | number = string> {\n    label: string;\n    value: T;\n}\n\nexport interface RadioGroupProps<T extends string | number = string>\n    extends ControlledInput<T> {\n    className?: string;\n    label?: string;\n    choices: Choice<T>[];\n    name: string;\n    hideNative?: boolean;\n    horizontal?: boolean;\n}\n\n/** A set of radio buttons */\nexport class RadioGroup<\n    T extends string | number = string,\n> extends React.Component<RadioGroupProps<T>> {\n    private readonly first = React.createRef<Radio<T>>();\n\n    public render(): React.ReactNode {\n        const { className, name, ...props } = this.props;\n        return (\n            <div\n                className={classNames('c-radio-group', className, {\n                    'c-radio-group--horizontal': props.horizontal,\n                    'c-radio-group--hide-native': props.hideNative,\n                })}\n            >\n                {props.label && (\n                    <span className=\"c-radio-group__label\">{props.label}</span>\n                )}\n                {props.choices.map((choice, idx) => (\n                    <Radio<T>\n                        {...choice}\n                        key={choice.value}\n                        ref={idx === 0 ? this.first : undefined}\n                        name={name}\n                        disabled={props.disabled}\n                        hideNative={props.hideNative}\n                        selected={props.value === choice.value}\n                        onChange={props.onChange}\n                    />\n                ))}\n            </div>\n        );\n    }\n\n    public focus = () => focusRef(this.first);\n}\n","import { forwardRef, useImperativeHandle, useRef } from 'react';\n\nimport { ControlledInput, useFieldChangeHandler } from '../../ControlledInput';\nimport { Game, Gin, Player } from '../../models';\nimport { NumberInput } from '../Input';\nimport { RadioGroup } from '../RadioGroup';\nimport { Focus } from '../util/Focus';\nimport './GameInput.scss';\n\n/**\n * A variant of the `Game` interface optimized for input.\n */\nexport interface PartialGame {\n    winner: Game['winner'];\n    points: number | null;\n    gin: Game['gin'];\n}\n\nconst DEFAULT_PARTIAL_GAME: PartialGame = {\n    winner: Player.One,\n    points: null,\n    gin: Gin.None,\n};\n\nexport const PartialGame = {\n    DEFAULT: DEFAULT_PARTIAL_GAME,\n};\n\nexport interface GameInputProps extends ControlledInput<PartialGame> {\n    player1Name: string;\n    player2Name: string;\n}\n\nexport const GameInput = forwardRef<Focus, GameInputProps>((props, ref) => {\n    const focusTarget = useRef<RadioGroup<Player>>(null);\n    const handleChange = useFieldChangeHandler(props);\n    const { value, disabled } = props;\n\n    useImperativeHandle(ref, () => ({\n        focus: () => focusTarget.current?.focus(),\n    }));\n\n    return (\n        <div className=\"c-game-input\">\n            <RadioGroup<Player>\n                name=\"winner\"\n                className=\"c-game-input__players\"\n                choices={[\n                    { value: Player.One, label: props.player1Name },\n                    { value: Player.Two, label: props.player2Name },\n                ]}\n                value={value.winner}\n                disabled={disabled}\n                label=\"Winner\"\n                onChange={handleChange}\n                hideNative\n                horizontal\n                ref={focusTarget}\n            />\n            <div className=\"c-game-input__points\">\n                <NumberInput\n                    name=\"points\"\n                    value={value.points}\n                    min={1}\n                    disabled={disabled}\n                    onChange={handleChange}\n                />\n                &nbsp; points\n            </div>\n            <RadioGroup<Gin>\n                name=\"gin\"\n                value={value.gin}\n                className=\"c-game-input__gin\"\n                choices={[\n                    { value: Gin.None, label: 'No Gin' },\n                    { value: Gin.Normal, label: 'Gin' },\n                    { value: Gin.Super, label: 'Super Gin' },\n                ]}\n                disabled={disabled}\n                onChange={handleChange}\n                horizontal\n                hideNative\n            />\n        </div>\n    );\n});\n","import { FC } from 'react';\n\nimport classNames from 'classnames';\nimport {\n    Bonus,\n    GameInSet,\n    Gin,\n    GinSet,\n    Player,\n    PlayerNames,\n} from '../../models';\nimport './ScoreColumn.scss';\n\nexport const ScoreColumn: FC<\n    PlayerNames & {\n        className?: string;\n        value: GinSet;\n    }\n> = ({ value, ...props }) => (\n    <div className={classNames('c-scorecolumn', props.className)}>\n        <div className=\"c-scorecolumn__header\">\n            <div className=\"c-scorecolumn__player\">{props.player1Name}</div>\n            <div className=\"c-scorecolumn__player\">{props.player2Name}</div>\n        </div>\n        {value.games.map((game, index) => (\n            <ScoreRow {...game} key={`game-${index}`} />\n        ))}\n        {value.bonuses.map((bonus, index) => (\n            <BonusRow key={`bonus-${index}`} {...bonus} isFirst={index === 0} />\n        ))}\n    </div>\n);\n\nconst ScoreRow: FC<GameInSet> = ({ winner, gin, runningTotal }) => {\n    const winnerCell = (\n        <div className=\"c-scorerow__winner\" data-gin={gin} key=\"winner\">\n            {runningTotal}\n            {gin !== Gin.None && (\n                <span className=\"c-scorerow__winner__gin__star\">\n                    {' '}\n                    {gin === Gin.Normal && '★'}\n                    {gin === Gin.Super && '★★'}\n                </span>\n            )}\n        </div>\n    );\n    const loserCell = <div className=\"c-scorerow__loser\" key=\"loser\" />;\n\n    return (\n        <div className=\"c-scorerow\">\n            {winner === Player.One\n                ? [winnerCell, loserCell]\n                : [loserCell, winnerCell]}\n        </div>\n    );\n};\n\nconst BonusRow: FC<Bonus & { isFirst?: boolean }> = props => {\n    const bonusCell = (\n        <div className=\"c-bonusrow__recipient\" key=\"winner\">\n            <span className=\"c-bonusrow__points\">{props.points}</span>\n            <span className=\"c-bonusrow__label\">{props.label}</span>\n        </div>\n    );\n\n    const loserCell = <div className=\"c-bonusrow__loser\" key=\"loser\" />;\n\n    return (\n        <div\n            className={classNames('c-bonusrow', {\n                'c-bonusrow--first': props.isFirst,\n            })}\n        >\n            {props.player === Player.One\n                ? [bonusCell, loserCell]\n                : [loserCell, bonusCell]}\n        </div>\n    );\n};\n","import classNames from 'classnames';\nimport { FC } from 'react';\n\nimport './ScrollViewer.scss';\n\nexport const ScrollViewer: FC<{\n    className?: string;\n    overflowX?: 'hidden' | 'auto';\n    overflowY?: 'hidden' | 'auto';\n}> = ({\n    className,\n    children,\n    overflowX = 'auto' as 'auto',\n    overflowY = 'auto' as 'auto',\n}) => (\n    <div\n        className={classNames('c-scroll-viewer', className)}\n        style={{ overflowX, overflowY }}\n    >\n        {children}\n    </div>\n);\n","import { FC } from 'react';\n\nimport classNames from 'classnames';\nimport {\n    GinSet,\n    isSetFinished,\n    nameOfPlayer,\n    Player,\n    PlayerNames,\n} from '../../models';\nimport './Summary.scss';\n\nexport interface SetSummaryProps extends PlayerNames {\n    className?: string;\n    value: GinSet;\n    onClick?(): void;\n}\n\nexport const SetSummary: FC<SetSummaryProps> = props => {\n    const { value, ...outerProps } = props;\n    // If a player has won the set, don't show loser's points\n    if (isSetFinished(value)) {\n        return (\n            <SetSummaryContainer {...outerProps} finished>\n                <span className=\"c-set-summary--final__winner\">\n                    {nameOfPlayer(props, value.finalResult.winner)} won\n                </span>\n                <span className=\"c-set-summary--final__points\">\n                    {value.finalResult.points}\n                </span>\n            </SetSummaryContainer>\n        );\n    }\n\n    return (\n        <SetSummaryContainer {...outerProps}>\n            <div className=\"c-set-summary__player\">\n                <span className=\"c-set-summary__player-name\">\n                    {props.player1Name}\n                </span>\n                <span className=\"c-set-summary__points\">\n                    {value.currentScores[Player.One]}\n                </span>\n            </div>\n            <div className=\"c-set-summary__player\">\n                <span className=\"c-set-summary__player-name\">\n                    {props.player2Name}\n                </span>\n                <span className=\"c-set-summary__points\">\n                    {value.currentScores[Player.Two]}\n                </span>\n            </div>\n        </SetSummaryContainer>\n    );\n};\n\n/**\n * Outer container element for the set summary.\n */\nconst SetSummaryContainer: FC<\n    Pick<SetSummaryProps, 'className' | 'onClick'> & { finished?: boolean }\n> = ({ className, onClick, finished, children }) => (\n    <div\n        className={classNames(\n            'c-set-summary',\n            finished ? 'c-set-summary--final' : 'c-set-summary--in-progress',\n            className,\n            {\n                'c-set-summary--clickable': Boolean(onClick),\n            },\n        )}\n        onClick={onClick}\n    >\n        {children}\n    </div>\n);\n","import { PureComponent, ReactNode } from 'react';\n\nimport { GinSet, PlayerNames } from '../../models';\nimport { ToggleDrawer } from '../Drawer';\nimport { ScoreColumn } from '../ScoreColumn';\nimport './SetView.scss';\nimport { SetSummary } from './Summary';\n\nexport interface SetViewProps extends PlayerNames {\n    value: GinSet;\n}\n\nexport class SetView extends PureComponent<SetViewProps> {\n    public render(): ReactNode {\n        return (\n            <ToggleDrawer\n                activator={({ openDrawer }) => (\n                    <SetSummary\n                        {...this.props}\n                        onClick={openDrawer}\n                        className=\"c-set-view\"\n                    />\n                )}\n            >\n                <ScoreColumn\n                    {...this.props}\n                    className=\"c-set-view__score-column\"\n                />\n            </ToggleDrawer>\n        );\n    }\n}\n","import classNames from 'classnames';\nimport { identity } from 'lodash';\nimport { FC, ReactChild, ReactElement, ReactNode } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { Action, creators } from '../../Actions';\n\nimport { Gin, nameOfPlayer, otherPlayer, Player } from '../../models';\nimport { PerPlayer, Stats } from '../../models/stats';\nimport {\n    dealerSelector,\n    matchHasStartedSelector,\n    playerNameSelector,\n} from '../../Reducer';\nimport './StatsViewer.scss';\n\ntype StatRowRenderer = <T extends unknown>(\n    title: ReactNode,\n    value: PerPlayer<T>,\n    formatter: (value: T) => ReactChild,\n) => ReactNode;\n\nexport const StatsViewer: FC<{\n    value: Stats;\n    showDealer: boolean;\n    layout: 'grid' | 'stack';\n}> = ({ layout, value, showDealer }) => {\n    const dealer = useSelector(dealerSelector);\n    switch (layout) {\n        case 'stack':\n            return (\n                <StatsStack\n                    value={value}\n                    dealer={showDealer ? dealer : undefined}\n                />\n            );\n        case 'grid':\n            return (\n                <StatsGrid\n                    value={value}\n                    dealer={showDealer ? dealer : undefined}\n                />\n            );\n    }\n};\n\nconst StatsStack: FC<{ value: Stats; dealer: Player | undefined }> = ({\n    value,\n    dealer,\n}) => {\n    const players = useSelector(playerNameSelector);\n    return (\n        <div className=\"c-stats-viewer\">\n            {dealer !== undefined && (\n                <div>Dealer: {nameOfPlayer(players, dealer)}</div>\n            )}\n            {renderStats(\n                (title, v, formatter) => (\n                    <StackRow title={title} value={v} formatter={formatter} />\n                ),\n                value,\n            )}\n        </div>\n    );\n};\n\nconst StackRow = <T extends unknown>(props: {\n    value: PerPlayer<T>;\n    title: ReactNode;\n    formatter(value: T): ReactChild;\n}): ReactElement => {\n    const players = useSelector(playerNameSelector);\n    return (\n        <div className=\"c-share-chart\">\n            <h3>{props.title}</h3>\n            {nameOfPlayer(players, Player.One)}:{' '}\n            {props.formatter(props.value[Player.One])}\n            <br />\n            {nameOfPlayer(players, Player.Two)}:{' '}\n            {props.formatter(props.value[Player.Two])}\n            <br />\n        </div>\n    );\n};\n\nconst formatNumber = (value: number) =>\n    value % 1 === 0 ? value.toString() : value.toFixed(2);\n\nconst formatGinCount = (value: {\n    [Gin.Normal]: number;\n    [Gin.Super]: number;\n}): ReactChild => {\n    const normals = value[Gin.Normal];\n    const supers = value[Gin.Super];\n\n    const normal = <span style={{ whiteSpace: 'nowrap' }}>{normals}★</span>;\n    const superSpan = <span style={{ whiteSpace: 'nowrap' }}>{supers}★★</span>;\n\n    if (normals && supers) {\n        return (\n            <>\n                {normal} <span style={{ opacity: 0.5 }}>|</span> {superSpan}\n            </>\n        );\n    } else if (normals) return normal;\n    else if (supers) return superSpan;\n    else return 0;\n};\n\nconst StatsGrid: FC<{ value: Stats; dealer: Player | undefined }> = ({\n    value,\n    dealer,\n}) => {\n    const players = useSelector(playerNameSelector);\n\n    return (\n        <table className=\"c-stats-viewer c-stats-viewer--grid\">\n            <thead>\n                <tr>\n                    <td className=\"c-stats-viewer--grid__player\">\n                        {nameOfPlayer(players, Player.One)}\n                    </td>\n                    <td>\n                        {dealer !== undefined && (\n                            <DealerToken dealer={dealer} />\n                        )}\n                    </td>\n                    <td className=\"c-stats-viewer--grid__player\">\n                        {nameOfPlayer(players, Player.Two)}\n                    </td>\n                </tr>\n            </thead>\n            <tbody>\n                {renderStats(\n                    (title, v, formatter) => (\n                        <StatsGridRow\n                            title={title}\n                            value={v}\n                            formatter={formatter}\n                        />\n                    ),\n                    value,\n                )}\n            </tbody>\n        </table>\n    );\n};\n\nconst StatsGridRow = <T extends unknown>(props: {\n    value: PerPlayer<T>;\n    title: ReactNode;\n    formatter(value: T): ReactChild;\n}): ReactElement => (\n    <tr>\n        <td>{props.formatter(props.value[Player.One])}</td>\n        <td>{props.title}</td>\n        <td>{props.formatter(props.value[Player.Two])}</td>\n    </tr>\n);\n\nconst renderStats = (row: StatRowRenderer, value: Stats): ReactNode => (\n    <>\n        {row('Wins', value.wins, identity)}\n        {row('Max Streak', value.maxStreak, identity)}\n        {row('Mean PPG', value.meanWinSize, formatNumber)}\n        {row('Biggest Win', value.biggestWin, identity)}\n        {row('Gins', value.ginGames, formatGinCount)}\n    </>\n);\n\n/**\n * Badge for the player who is currently the dealer in the stats grid.\n */\nconst DealerToken: FC<{ dealer: Player }> = ({ dealer }) => {\n    const hasMatchStarted = useSelector(matchHasStartedSelector);\n    const dispatch = useDispatch<Dispatch<Action>>();\n    return (\n        <div\n            className={classNames(\n                'c-dealer-token',\n                dealer === Player.One\n                    ? 'c-dealer-token--p1'\n                    : 'c-dealer-token--p2',\n            )}\n            onClick={\n                hasMatchStarted\n                    ? undefined\n                    : () =>\n                          dispatch(\n                              creators.SetInitialDealer(otherPlayer(dealer)),\n                          )\n            }\n        >\n            <span className=\"c-dealer-token__arrow c-dealer-token__arrow--p1\">\n                <Arrow direction=\"left\" />\n            </span>{' '}\n            Dealer{' '}\n            <span className=\"c-dealer-token__arrow c-dealer-token__arrow--p2\">\n                <Arrow direction=\"right\" />\n            </span>\n        </div>\n    );\n};\n\n/**\n * Platform-agnostic sideways-pointing arrow. ▶️, the right-pointing triangle\n * emoji, renders as a stylized play button on mobile operating systems which\n * is undesirable.\n */\nconst Arrow: FC<{ direction: 'left' | 'right' }> = ({ direction }) => (\n    <svg viewBox=\"0 0 5 6\" width={10} height={12}>\n        <path\n            d=\"M 0 0 L 5 3 L 0 6 Z\"\n            style={{\n                fill: 'var(--text-color)',\n            }}\n            transform={direction === 'left' ? 'rotate(180 2.5 3)' : undefined}\n        ></path>\n    </svg>\n);\n","import classNames from 'classnames';\nimport { FC } from 'react';\n\nimport { GinMatchResult, Player, PlayerNames } from '../../models';\nimport { Button } from '../Button';\nimport './MatchResultViewer.scss';\n\nexport const MatchResultViewer: FC<\n    GinMatchResult &\n        PlayerNames & {\n            className?: string;\n            onNewMatch?(): void;\n        }\n> = props => (\n    <div className={classNames('c-match-result-viewer', classNames)}>\n        <div className=\"c-match-result-viewer__winner\">\n            {props.winner === Player.One\n                ? props.player1Name\n                : props.player2Name}{' '}\n            wins!\n        </div>\n        <div className=\"c-match-result-viewer__points\">\n            <span className=\"c-match-result-viewer__points-value\">\n                {props.points}\n            </span>\n            &nbsp;\n            <span className=\"c-match-result-viewer__points-label\">points</span>\n        </div>\n        <div className=\"c-match-result-viewer__actions\">\n            {props.onNewMatch && (\n                <Button onClick={props.onNewMatch}>Play again</Button>\n            )}\n        </div>\n    </div>\n);\n","import classNames from 'classnames';\nimport {\n    FC,\n    forwardRef,\n    useImperativeHandle,\n    useMemo,\n    useRef,\n    useState,\n} from 'react';\nimport MediaQuery from 'react-responsive';\n\nimport { reduceGamesToStats } from '../../models/stats';\nimport { Game, GinMatch, PlayerNames } from '../../models';\nimport { Drawer, DrawerTitleSpacer } from '../Drawer/Drawer';\nimport { Form } from '../Form';\nimport { GameInput, GameInputProps, PartialGame } from '../GameInput';\nimport { ScoreColumn } from '../ScoreColumn';\nimport { ScrollViewer } from '../ScrollViewer';\nimport { SetView } from '../SetView';\nimport { StatsViewer } from '../StatsViewer';\nimport { Focus } from '../util/Focus';\nimport { MatchResultViewer } from './MatchResultViewer';\nimport './MatchViewer.scss';\n\nexport interface MatchViewerProps {\n    players: PlayerNames;\n    value: GinMatch;\n    readOnly?: boolean;\n    onSubmitGame?(game: Game): void;\n    onNewMatch?(): void;\n}\n\nexport const MatchViewer: FC<MatchViewerProps> = ({\n    players,\n    value,\n    readOnly,\n    ...props\n}) => {\n    const gameFormRef = useRef<Focus>(null);\n    const stats = useMemo(() => reduceGamesToStats(value.games), [value.games]);\n    const [drawerOpen, setDrawerOpen] = useState(false);\n\n    const closeGameForm = (): void => {\n        setDrawerOpen(false);\n    };\n\n    const gameForm = (\n        <GameForm\n            ref={gameFormRef}\n            {...players}\n            onSubmitGame={game => {\n                props.onSubmitGame?.(game);\n                closeGameForm();\n            }}\n        />\n    );\n\n    return (\n        <div\n            className={classNames('c-match-viewer', {\n                'c-match-viewer--finished': Boolean(value.finalResult),\n            })}\n        >\n            <MediaQuery minWidth={600}>\n                <ScrollViewer className=\"c-match-viewer__main\">\n                    <div className=\"c-match-viewer__sets\">\n                        {value.sets.map((s, i) => (\n                            <ScoreColumn key={i} {...players} value={s} />\n                        ))}\n                    </div>\n                    <StatsViewer\n                        layout=\"stack\"\n                        value={stats}\n                        showDealer={!value.finalResult}\n                    />\n                </ScrollViewer>\n            </MediaQuery>\n            <MediaQuery maxWidth={600}>\n                <ScrollViewer overflowX=\"hidden\">\n                    {value.sets.map((v, i) => (\n                        <SetView key={i} value={v} {...players} />\n                    ))}\n                    <StatsViewer\n                        layout=\"grid\"\n                        value={stats}\n                        showDealer={!value.finalResult}\n                    />\n                </ScrollViewer>\n            </MediaQuery>\n            {value.finalResult && (\n                <MatchResultViewer\n                    {...players}\n                    {...value.finalResult}\n                    onNewMatch={props.onNewMatch}\n                />\n            )}\n            {!readOnly && (\n                <>\n                    <MediaQuery maxWidth={1000}>\n                        <DrawerTitleSpacer />\n                        <Drawer\n                            open={drawerOpen}\n                            title=\"Add game\"\n                            onTitleClick={() => setDrawerOpen(true)}\n                            onEntered={() => gameFormRef.current?.focus()}\n                            onDismiss={closeGameForm}\n                            hideTitle={!!value.finalResult}\n                        >\n                            {gameForm}\n                        </Drawer>\n                    </MediaQuery>\n                    <MediaQuery minWidth={1000}>\n                        <div className=\"c-match-viewer__add-game\">\n                            <h1>Add game</h1>\n                            {gameForm}\n                        </div>\n                    </MediaQuery>\n                </>\n            )}\n        </div>\n    );\n};\n\ntype GameFormProps = Pick<MatchViewerProps, 'onSubmitGame'> &\n    Pick<GameInputProps, 'player1Name' | 'player2Name' | 'disabled'>;\n\nconst GameForm = forwardRef<Focus, GameFormProps>((props, ref) => {\n    const input = useRef<Focus>(null);\n    const [draft, setDraft] = useState(PartialGame.DEFAULT);\n\n    useImperativeHandle(\n        ref,\n        () => ({\n            focus: () => input.current?.focus(),\n        }),\n        [],\n    );\n\n    return (\n        <Form\n            className=\"c-gameform\"\n            onSubmit={(): void => {\n                // Don't allow submission of incomplete games\n                // TODO show an error in this case\n                if (!Game.guard(draft)) return;\n\n                props.onSubmitGame?.(draft);\n\n                // Wipe the state, so we're ready for the next game input.\n                setDraft(PartialGame.DEFAULT);\n\n                // Move focus back to the top of the form after game entry so that,\n                // if the input form is persistently visible, we're prepared for the\n                // next game.\n                input.current?.focus();\n            }}\n            disableSubmit={props.disabled || !Game.guard(draft)}\n            submitLabel=\"Submit\"\n        >\n            <GameInput\n                ref={input}\n                player1Name={props.player1Name}\n                player2Name={props.player2Name}\n                disabled={props.disabled}\n                value={draft}\n                onChange={v => setDraft(v)}\n            />\n        </Form>\n    );\n});\n","import { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\n\nimport { creators } from '../Actions';\nimport { MatchViewer, MatchViewerProps } from '../components/MatchViewer';\nimport { reduceGamesToMatch } from '../models';\nimport { gameSelector, playerNameSelector } from '../Reducer';\nimport { State } from '../State';\n\nconst matchSelector = createSelector(gameSelector, reduceGamesToMatch);\n\ntype StateProps = Pick<MatchViewerProps, 'value' | 'players'>;\ntype DispatchProps = Pick<MatchViewerProps, 'onSubmitGame' | 'onNewMatch'>;\n\nconst mapStateToProps = (state: State): StateProps => ({\n    value: matchSelector(state),\n    players: playerNameSelector(state),\n});\n\nconst mapDispatchToProps: DispatchProps = {\n    onSubmitGame: creators.FinishGame,\n    onNewMatch: creators.StartNewMatch,\n};\n\nexport const CurrentMatchViewer = connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(MatchViewer);\n","import { FC } from 'react';\n\nimport { AppHeader } from '../../components/AppHeader';\nimport { CommandBar } from '../../containers/CommandBar';\nimport { CurrentMatchViewer } from '../../containers/CurrentMatchViewer';\n\nimport './Playing.scss';\n\nexport const Playing: FC = props => (\n    <div className=\"l-playing\">\n        <AppHeader />\n        <CommandBar />\n        <CurrentMatchViewer />\n    </div>\n);\n","import { Component } from 'react';\nimport { Provider } from 'react-redux';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport { install } from 'redux-loop';\nimport './App.scss';\n\nimport { retrieveState } from './Effects';\nimport { Playing } from './layouts/playing';\nimport { reducer } from './Reducer';\nimport { INITIAL_STATE } from './State';\n\n// XXX figure out why this didn't work.\nconst devtools = () =>\n    (window as any).__REDUX_DEVTOOLS_EXTENSION__ &&\n    (window as any).__REDUX_DEVTOOLS_EXTENSION__();\n\nexport const middleware = compose(applyMiddleware(devtools), install());\n\nconst store = createStore(\n    reducer,\n    retrieveState() || INITIAL_STATE,\n    // Hook enhancer for redux dev-tools\n    install(),\n);\n\nclass App extends Component {\n    public render() {\n        return (\n            <Provider store={store}>\n                <Playing />\n            </Provider>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n        ),\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://cra.link/PWA',\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://cra.link/PWA.',\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.',\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}\n","import * as ReactDOM from 'react-dom';\nimport App from './App';\nimport { register } from './serviceWorkerRegistration';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregister();\n"],"sourceRoot":""}