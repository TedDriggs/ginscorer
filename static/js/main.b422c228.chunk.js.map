{"version":3,"sources":["State.ts","Effects.ts","components/AppHeader/AppHeader.tsx","components/util/Event.ts","components/util/Ref.ts","components/Button/index.tsx","Actions.ts","components/Drawer/Drawer.tsx","components/Drawer/Toggle.tsx","components/Form.tsx","ControlledInput.ts","components/Input/Input.tsx","components/PlayersInput/PlayersInput.tsx","components/PlayersForm.tsx","Reducer.ts","containers/CommandBar/index.tsx","models/outcome.ts","models/index.ts","models/stats.ts","components/NumberInput.tsx","components/Radio/Radio.tsx","components/RadioGroup/RadioGroup.tsx","components/GameInput/GameInput.tsx","components/ScoreColumn/ScoreColumn.tsx","components/ScrollViewer/index.tsx","components/SetView/Summary.tsx","components/SetView/SetView.tsx","components/StatsViewer/StatsViewer.tsx","components/MatchViewer/MatchResultViewer.tsx","components/MatchViewer/MatchViewer.tsx","containers/CurrentMatchViewer.ts","layouts/playing/Playing.tsx","App.tsx","registerServiceWorker.ts","index.tsx"],"names":["INITIAL_STATE","version","player1Name","player2Name","games","persistState","state","window","localStorage","setItem","JSON","stringify","Promise","resolve","AppHeader_AppHeader","props","react","className","consumeEvent","e","stopPropagation","preventDefault","focusRef","ref","current","focus","refChildHasFocus","contains","document","activeElement","Button_Button","[object Object]","this","handleClick","button","onClick","_a","disabled","children","__rest","Object","assign","classnames","creators","UndoGame","type","RenamePlayers","names","FinishGame","result","StartNewMatch","TRANSITION_TIMEOUT_MS","Drawer_Drawer_Drawer","titleButton","handleBackdropClick","onDismiss","handleKeyDown","key","dist","Escape","handleExit","react_dom","react_transition_group","in","open","timeout","classNames","appear","mountOnEnter","unmountOnExit","onExit","onEntered","c-drawer--has-title","Boolean","title","hideTitle","onKeyDown","role","onTitleClick","body","DrawerTitleSpacer","Toggle_INITIAL_STATE","Toggle_ToggleDrawer","super","openDrawer","setState","closeDrawer","activator","Form_Form","handleSubmit","disableSubmit","onSubmit","submitLabel","makeFieldChangeHandler","c","newVal","fieldName","value","onChange","name","Input_Input_Input","root","hasFocus","handleChange","target","label","Input_rest","PlayersInput_PlayersInput_PlayersInput","focusTarget","PlayersForm_PlayersForm","input","handleEditButtonClick","isRenaming","handleDrawerEntered","onPlayersSubmit","stopRenaming","undefined","playerNameSelector","canUndoSelector","length","persisted","redux_loop_es","run","args","mapDispatchToProps","onStartNewMatch","onRenamePlayers","onUndoGame","CommandBar","es","playerNames","canUndo","reduceGames","frame1","frame1End","reduceSet","frame2","frame2End","frame3","isSetFinished","ginSet","finalResult","offset","endIndices","wins","Player","One","Two","scores","setGames","bonuses","reverse","nextEnd","pop","index","game","entries","console","info","Math","max","winner","points","runningTotal","push","player","PLAYERS","forEach","filter","wonBy","reduce","bonus","g","ginBonus","gin","b","getWinner","abs","currentScores","Gin","None","Normal","Super","computeMatchResult","sets","v","isHollywood","every","otherPlayer","nameOfPlayer","players","isGame","x","newPerPlayer","reduceGamesToStats","reduceGamesToWins","meanWinSize","reduceGamesToMeanPoints","maxStreak","reduceGamesToMaxStreak","biggestWin","reduceGamesToBiggestWin","perPlayer","currentStreak","NumberInput_NumberInput","evt","parsed","Number","parseInt","NumberInput_rest","toString","Radio_Radio_Radio","handleFocusChange","forceUpdate","Radio_rest","c-radio--checked","selected","c-radio--disabled","c-radio--nonative","hideNative","c-radio--has-focus","checked","onFocus","onBlur","RadioGroup_RadioGroup_RadioGroup","first","RadioGroup_rest","c-radio-group--horizontal","horizontal","c-radio-group--hide-native","choices","map","choice","idx","PartialGame","DEFAULT","GameInput_GameInput_GameInput","GameInput_rest","min","ScoreColumn_ScoreColumn","ScoreColumn_rest","ScoreRow","BonusRow","isFirst","winnerCell","data-gin","loserCell","bonusCell","c-bonusrow--first","ScrollViewer_ScrollViewer","overflowX","overflowY","style","SetSummary","outerProps","Summary_rest","SetSummaryContainer","finished","c-set-summary--clickable","SetView_SetView_SetView","StatsViewer_StatsViewer_StatsViewer","StatsViewer_rest","ShareChart","formatNumber","toFixed","MatchResultViewer_MatchResultViewer","onNewMatch","MatchViewer_INITIAL_STATE","drawerOpen","MatchViewer_GameForm","onSubmitGame","matchSelector","lib","reduceGamesToMatch","CurrentMatchViewer_mapDispatchToProps","CurrentMatchViewer","gameForm","computeStats","memoize_one_esm","handleGameSubmit","closeGameForm","handleGameFormOpen","_b","MatchViewer_rest","readOnly","c-match-viewer--finished","react_responsive_default","a","minWidth","s","i","maxWidth","Playing_Playing","store","redux","__REDUX_DEVTOOLS_EXTENSION__","action","slice","raw","getItem","parse","isState","error","retrieveState","src_App_0","isLocalhost","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","catch","getElementById","URL","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b422c228.chunk.js","sourcesContent":["import { Game } from './models';\n\nexport const STATE_VERSION: 1 = 1;\n\nexport interface State {\n    version: number;\n    player1Name: string;\n    player2Name: string;\n    games: Game[];\n}\n\nexport const INITIAL_STATE: State = {\n    version: STATE_VERSION,\n    player1Name: 'Player 1',\n    player2Name: 'Player 2',\n    games: [],\n};\n\nexport const isState = (x: any): x is State =>\n    typeof x === 'object' &&\n    typeof x.player1Name === 'string' &&\n    typeof x.player2Name === 'string';\n","import { isState, State, STATE_VERSION } from './State';\n\nconst LOCAL_STORAGE_KEY = 'reduxState';\n\n/**\n * Write the current redux state into local storage.\n */\nexport const persistState = (state: State): Promise<void> => {\n    window.localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(state));\n    return Promise.resolve();\n};\n\n/**\n * Read the redux state from local storage.\n */\nexport const retrieveState = (): State | undefined => {\n    const raw = window.localStorage.getItem(LOCAL_STORAGE_KEY);\n    if (!raw) return;\n\n    try {\n        const parsed = JSON.parse(raw);\n        if (!isState(parsed)) return;\n        if (parsed.version !== STATE_VERSION) return;\n\n        return parsed;\n    } catch (e) {\n        console.error('Could not read state as JSON', e);\n        return;\n    }\n};\n","import * as React from 'react';\n\nimport './AppHeader.css';\n\nexport interface AppHeaderProps {}\n\nexport const AppHeader: React.SFC<AppHeaderProps> = props => (\n    <header className=\"c-app-header\">\n        <h1>Gin Scorer</h1>\n    </header>\n);\n","export interface ConsumableEvent {\n    preventDefault(): void;\n    stopPropagation(): void;\n}\n\nexport const consumeEvent = (e: ConsumableEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n}","import { RefObject } from 'react';\n\nexport const focusRef = (ref: RefObject<{ focus(): void }>): void => {\n    if (ref.current) ref.current.focus();\n};\n\nexport const refChildHasFocus = (ref: RefObject<HTMLElement>) => (): boolean =>\n    (ref.current && ref.current.contains(document.activeElement)) || false;\n\nexport const mapRef = <T, U>(ref: RefObject<T>, mapFn: (r: T) => U): U | null =>\n    ref.current ? mapFn(ref.current) : null;\n","import * as classNames from 'classnames';\nimport * as React from 'react';\n\nimport { consumeEvent } from '../util/Event';\nimport { focusRef } from '../util/Ref';\n\nexport interface ButtonProps {\n    className?: string;\n    disabled?: boolean;\n    type?: string;\n    onClick?(): void;\n}\n\nexport class Button extends React.Component<ButtonProps> {\n    private readonly ref = React.createRef<HTMLButtonElement>();\n\n    public render(): React.ReactNode {\n        const { className, disabled, onClick, children, ...props } = this.props;\n\n        return (\n            <button\n                {...props}\n                ref={this.ref}\n                className={classNames('c-button', className)}\n                disabled={disabled}\n                onClick={this.handleClick}\n            >\n                {children}\n            </button>\n        );\n    }\n\n    public readonly focus = () => focusRef(this.ref);\n\n    private readonly handleClick = (e: React.MouseEvent<HTMLButtonElement>): void => {\n        // Ignore non-primary mouse buttons or uses dependent on the native button\n        if (e.button || !this.props.onClick) return;\n\n        consumeEvent(e);\n\n        this.props.onClick();\n    }\n}\n","import { Game, PlayerNames } from './models';\n\n/**\n * Action emitted when a game has been finished and a new result is ready.\n * The provided game will be added to the end of the game list.\n */\nexport interface FinishGame {\n    type: 'FinishGame';\n    result: Game;\n}\n\n/**\n * Remove the most recent game from the history; useful for correcting\n * mistakes in submission.\n */\nexport interface UndoGame {\n    type: 'UndoGame';\n}\n\n/**\n * Start a new match, clearing all game history.\n */\nexport interface StartNewMatch {\n    type: 'StartNewMatch';\n}\n\nexport interface RenamePlayers extends PlayerNames {\n    type: 'RenamePlayers';\n}\n\nexport type Action = RenamePlayers | FinishGame | StartNewMatch | UndoGame;\n\nexport const creators = {\n    UndoGame: (): UndoGame => ({\n        type: 'UndoGame',\n    }),\n    RenamePlayers: (names: PlayerNames): RenamePlayers => ({\n        ...names,\n        type: 'RenamePlayers',\n    }),\n    FinishGame: (result: Game): FinishGame => ({\n        type: 'FinishGame',\n        result,\n    }),\n    StartNewMatch: (): StartNewMatch => ({\n        type: 'StartNewMatch',\n    }),\n};\n","import * as classNames from 'classnames';\nimport * as React from 'react';\nimport { createPortal } from 'react-dom';\nimport { CSSTransition, Transition } from 'react-transition-group';\nimport { Key } from 'w3c-keys';\n\nimport { Button } from '../Button';\nimport { consumeEvent } from '../util/Event';\nimport { focusRef } from '../util/Ref';\nimport './Drawer.css';\n\nconst TRANSITION_TIMEOUT_MS = 125;\n\nexport interface DrawerProps {\n    open?: boolean;\n    hideTitle?: boolean;\n    title?: string;\n    onTitleClick?(): void;\n    onEntered?(): void;\n    /**\n     * Event handler called when the user attempts to dismiss the\n     * drawer. If no handler is provided, the user cannot dismiss\n     * the drawer.\n     */\n    onDismiss?(): void;\n}\n\nexport class Drawer extends React.Component<DrawerProps> {\n    private readonly titleButton = React.createRef<Button>();\n\n    public render(): React.ReactNode {\n        const { props } = this;\n\n        return createPortal(\n            <>\n                <CSSTransition\n                    in={props.open}\n                    timeout={TRANSITION_TIMEOUT_MS}\n                    classNames=\"c-drawer__backdrop\"\n                    appear\n                    mountOnEnter\n                    unmountOnExit\n                >\n                    <div\n                        onClick={this.handleBackdropClick}\n                        className=\"c-drawer__backdrop\"\n                    />\n                </CSSTransition>\n                <CSSTransition\n                    in={props.open}\n                    classNames=\"c-drawer\"\n                    timeout={TRANSITION_TIMEOUT_MS}\n                    onExit={this.handleExit}\n                    onEntered={props.onEntered}\n                    appear\n                >\n                    <div\n                        className={classNames('c-drawer', {\n                            'c-drawer--has-title':\n                                Boolean(props.title) && !props.hideTitle,\n                        })}\n                        onKeyDown={this.handleKeyDown}\n                        role=\"dialog\"\n                    >\n                        {props.title && (\n                            <Button\n                                ref={this.titleButton}\n                                className=\"c-drawer__title\"\n                                onClick={props.onTitleClick}\n                            >\n                                <span className=\"c-drawer__title__text\">\n                                    {props.title}\n                                </span>\n                            </Button>\n                        )}\n                        <Transition\n                            in={props.open}\n                            timeout={TRANSITION_TIMEOUT_MS}\n                            appear\n                            mountOnEnter\n                            unmountOnExit\n                        >\n                            {props.children}\n                        </Transition>\n                    </div>\n                </CSSTransition>\n            </>,\n            document.body,\n        );\n    }\n\n    private readonly handleBackdropClick = (e: React.MouseEvent<any>) => {\n        if (e.button || !this.props.onDismiss) return;\n        this.props.onDismiss();\n    };\n\n    private readonly handleKeyDown = (e: React.KeyboardEvent<any>) => {\n        const { onDismiss } = this.props;\n\n        if (onDismiss && e.key === Key.Escape) {\n            consumeEvent(e);\n            onDismiss();\n        }\n    };\n\n    private readonly handleExit = () => {\n        focusRef(this.titleButton);\n    };\n}\n\n/**\n * Placeholder element which can be used to make sure scrolling content isn't\n * hidden by the drawer title.\n */\nexport const DrawerTitleSpacer: React.SFC = () => (\n    <div className=\"c-drawer-title-placeholder\" />\n);\n","import * as React from 'react';\nimport { Drawer } from '.';\n\nexport interface ToggleDrawerProps {\n    activator(props: { openDrawer(): void }): React.ReactNode;\n}\n\nconst INITIAL_STATE = {\n    open: false,\n};\n\ntype State = typeof INITIAL_STATE;\n\nexport class ToggleDrawer extends React.Component<ToggleDrawerProps, State> {\n    constructor(props: ToggleDrawerProps) {\n        super(props);\n        this.state = INITIAL_STATE;\n    }\n\n    public render(): React.ReactNode {\n        const { activator, children } = this.props;\n        return (\n            <>\n                {activator({ openDrawer: this.openDrawer })}\n                <Drawer open={this.state.open} onDismiss={this.closeDrawer}>\n                    {children}\n                </Drawer>\n            </>\n        );\n    }\n\n    private readonly openDrawer = () => {\n        this.setState({ open: true });\n    };\n\n    private readonly closeDrawer = () => {\n        this.setState({ open: false });\n    };\n}\n","import * as React from 'react';\n\nimport { Button } from './Button';\nimport { ConsumableEvent, consumeEvent } from './util/Event';\n\nexport interface FormProps {\n    className?: string;\n    disableSubmit?: boolean;\n    submitLabel?: React.ReactNode;\n    onSubmit(): void;\n}\n\n/**\n * A wrapper for a native form that provides Enter-key submission abilities\n * and semantic correctness.\n */\nexport class Form extends React.PureComponent<FormProps> {\n    public render(): React.ReactNode {\n        const { props } = this;\n\n        return (\n            <form className={props.className} onSubmit={this.handleSubmit}>\n                {props.children}\n                {props.submitLabel && (\n                    <Button disabled={props.disableSubmit} type=\"submit\">\n                        {props.submitLabel}\n                    </Button>\n                )}\n            </form>\n        );\n    }\n\n    private readonly handleSubmit = (e: ConsumableEvent) => {\n        consumeEvent(e);\n\n        if (this.props.disableSubmit) return;\n\n        this.props.onSubmit();\n    }\n}\n","import { Component } from 'react';\n\nexport type ChangeHandler<T> = (newVal: T, name?: string) => void;\n\nexport interface ControlledInput<T> {\n    value: T;\n    disabled?: boolean;\n    name?: string;\n    onChange: ChangeHandler<T>;\n}\n\nexport const makeFieldChangeHandler = <T extends {}>(\n    c: Component<ControlledInput<T>>,\n) => (newVal: T[keyof T], fieldName: keyof T): void => {\n    const { value, onChange, disabled, name } = c.props;\n\n    if (disabled) return;\n\n    if (onChange) {\n        onChange(\n            {\n                ...(value as any),\n                [fieldName]: newVal,\n            },\n            name,\n        );\n    }\n};\n","import * as classNames from 'classnames';\nimport * as React from 'react';\n\nimport { ControlledInput } from '../../ControlledInput';\nimport { focusRef, refChildHasFocus } from '../util/Ref';\nimport './Input.css';\n\nexport interface InputProps extends ControlledInput<string> {\n    className?: string;\n    label?: string;\n}\n\nexport class Input extends React.Component<InputProps> {\n    private readonly root = React.createRef<HTMLInputElement>();\n\n    // tslint:disable-next-line:member-ordering\n    public readonly hasFocus = refChildHasFocus(this.root);\n\n    public render(): React.ReactNode {\n        const { label, className, ...props } = this.props;\n        return (\n            <label className={classNames('c-input', className)}>\n                {label && <div className=\"c-input-label\">{label}</div>}\n                <input\n                    {...props}\n                    ref={this.root}\n                    onChange={this.handleChange}\n                />\n            </label>\n        );\n    }\n\n    public readonly focus = () => focusRef(this.root);\n\n    private readonly handleChange = (\n        e: React.ChangeEvent<HTMLInputElement>,\n    ): void => {\n        this.props.onChange(e.target.value, this.props.name);\n    };\n}\n","import * as React from 'react';\n\nimport { ControlledInput, makeFieldChangeHandler } from '../../ControlledInput';\nimport { PlayerNames } from '../../models';\nimport { Input } from '../Input';\nimport { focusRef } from '../util/Ref';\nimport './PlayersInput.css';\n\nexport interface PlayersInputProps\n    extends ControlledInput<PlayerNames> {}\n\nexport class PlayersInput extends React.Component<PlayersInputProps> {\n    private readonly handleChange = makeFieldChangeHandler(this);\n    private readonly focusTarget = React.createRef<Input>();\n\n    public render(): React.ReactNode {\n        const { value, disabled } = this.props;\n        return (\n            <div className=\"c-players-input\">\n                <Input\n                    ref={this.focusTarget}\n                    label=\"Player 1\"\n                    name=\"player1Name\"\n                    value={value.player1Name}\n                    disabled={disabled}\n                    onChange={this.handleChange}\n                />\n                <Input\n                    label=\"Player 2\"\n                    name=\"player2Name\"\n                    value={value.player2Name}\n                    disabled={disabled}\n                    onChange={this.handleChange}\n                />\n            </div>\n        );\n    }\n\n    public readonly focus = () => focusRef(this.focusTarget);\n}\n","import * as React from 'react';\n\nimport { PlayerNames } from '../models';\nimport { Button } from './Button';\nimport { Drawer } from './Drawer';\nimport { Form } from './Form';\nimport { PlayersInput } from './PlayersInput';\nimport { focusRef } from './util/Ref';\n\nexport interface PlayersFormProps {\n    value: PlayerNames;\n    onPlayersSubmit(players: PlayerNames): void;\n}\n\ninterface PlayersFormState {\n    isRenaming: boolean;\n    value?: PlayerNames;\n}\n\nexport class PlayersForm extends React.Component<\n    PlayersFormProps,\n    PlayersFormState\n> {\n    private readonly input = React.createRef<PlayersInput>();\n    private readonly button = React.createRef<Button>();\n\n    constructor(props: PlayersFormProps) {\n        super(props);\n        this.state = {\n            isRenaming: false,\n        };\n    }\n\n    public render(): React.ReactNode {\n        return (\n            <>\n                <Button ref={this.button} onClick={this.handleEditButtonClick}>\n                    Rename Players\n                </Button>\n                <Drawer\n                    open={this.state.isRenaming}\n                    onDismiss={this.stopRenaming}\n                    onEntered={this.handleDrawerEntered}\n                >\n                    <Form onSubmit={this.handleSubmit} submitLabel=\"Update\">\n                        <PlayersInput\n                            ref={this.input}\n                            value={this.state.value || this.props.value}\n                            onChange={this.handleChange}\n                        />\n                    </Form>\n                </Drawer>\n            </>\n        );\n    }\n\n    private readonly handleEditButtonClick = () => {\n        this.setState({ isRenaming: true });\n    };\n\n    private readonly handleDrawerEntered = () => focusRef(this.input);\n\n    private readonly handleChange = (value: PlayersFormProps['value']) => {\n        this.setState({ value });\n    };\n\n    private readonly handleSubmit = () => {\n        if (!this.state.value) return;\n        this.props.onPlayersSubmit(this.state.value);\n        this.stopRenaming();\n    };\n\n    private readonly stopRenaming = () => {\n        this.setState({ isRenaming: false, value: undefined });\n        focusRef(this.button);\n    };\n}\n","import { Cmd, Loop, loop, LoopReducer } from 'redux-loop';\nimport { Action } from './Actions';\nimport { persistState } from './Effects';\nimport { Game } from './models';\nimport { State } from './State';\n\nexport const gameSelector = (state: State): Game[] => state.games;\n\nexport const playerNameSelector = ({\n    player1Name,\n    player2Name,\n}: State): Pick<State, 'player1Name' | 'player2Name'> => ({\n    player1Name,\n    player2Name,\n});\n\nexport const canUndoSelector = ({ games }: State): boolean =>\n    Boolean(games.length);\n\nexport const reducer: LoopReducer<State, Action> = (\n    state: State,\n    action: Action,\n) => {\n    switch (action.type) {\n        case 'RenamePlayers': {\n            const { player1Name, player2Name } = action;\n            return persisted({\n                ...state,\n                player1Name,\n                player2Name,\n            });\n        }\n        case 'FinishGame': {\n            return persisted({\n                ...state,\n                games: [...state.games, action.result],\n            });\n        }\n        case 'UndoGame': {\n            return persisted({\n                ...state,\n                games: state.games.slice(0, state.games.length - 1),\n            });\n        }\n        case 'StartNewMatch': {\n            return persisted({\n                ...state,\n                games: [],\n            });\n        }\n        default: {\n            return state;\n        }\n    }\n};\n\nconst persisted = (state: State): Loop<State, Action> =>\n    loop(\n        state,\n        Cmd.run(persistState, {\n            args: [state],\n        }),\n    );\n","import * as React from 'react';\n\nimport { connect } from 'react-redux';\nimport { Button } from 'src/components/Button';\nimport { creators } from '../../Actions';\nimport { PlayersForm, PlayersFormProps } from '../../components/PlayersForm';\nimport { canUndoSelector, playerNameSelector } from '../../Reducer';\nimport { State } from '../../State';\n\ninterface StateProps {\n    playerNames: PlayersFormProps['value'];\n    canUndo: boolean;\n}\n\ninterface DispatchProps {\n    onRenamePlayers: typeof creators.RenamePlayers;\n    onStartNewMatch(): void;\n    onUndoGame(): void;\n}\n\nconst mapStateToProps = (state: State): StateProps => ({\n    playerNames: playerNameSelector(state),\n    canUndo: canUndoSelector(state),\n});\n\nconst mapDispatchToProps: DispatchProps = {\n    onStartNewMatch: creators.StartNewMatch,\n    onRenamePlayers: creators.RenamePlayers,\n    onUndoGame: creators.UndoGame,\n};\n\nconst DisconnectedCommandBar: React.SFC<StateProps & DispatchProps> = props => (\n    <div className=\"c-command-bar\">\n        <Button onClick={props.onUndoGame} disabled={!props.canUndo}>\n            Undo Last Game\n        </Button>\n        <Button onClick={props.onStartNewMatch}>New Match</Button>\n        <PlayersForm\n            value={props.playerNames}\n            onPlayersSubmit={props.onRenamePlayers}\n        />\n    </div>\n);\n\nexport const CommandBar = connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(DisconnectedCommandBar);\n","import { Game, Gin, otherPlayer, Player, PlayerNames, PLAYERS } from '.';\n\n// Output models for showing the result of a match.\n\n/**\n * A bonus awarded to a player at the end of a set. For example,\n * the first player to exceed 100 game points receives a 100-point\n * bonus for \"going over\".\n */\nexport interface Bonus {\n    player: Player;\n    points: number;\n    label: string;\n}\n\nexport interface GameInSet extends Game {\n    runningTotal: number;\n}\n\nexport type GinSet = GinSetInProgress | GinSetFinal;\n\nexport interface GinSetInProgress {\n    games: GameInSet[];\n    currentScores: {\n        [Player.One]: number;\n        [Player.Two]: number;\n    };\n    bonuses: Bonus[];\n    finalResult?: never;\n}\n\nexport interface GinSetFinal {\n    games: GameInSet[];\n    currentScores?: never;\n    bonuses: Bonus[];\n    finalResult: GinSetResult;\n}\n\nexport interface GinSetResult {\n    winner: Player;\n    /**\n     * The total number of points the player earned for the set.\n     */\n    points: number;\n}\n\nexport interface GinMatch extends PlayerNames {\n    games: Game[];\n    sets: GinSet[];\n    finalResult?: GinMatchResult;\n}\n\nexport interface GinMatchResult {\n    /**\n     * Whether the winning player won every single match. In this case,\n     * the `points` property will be 2x the sum of the three sets.\n     */\n    isHollywood: boolean;\n    winner: Player;\n    points: number;\n}\n\nexport const reduceGamesToMatch = (players: PlayerNames) => (\n    games: Game[],\n): GinMatch => {\n    const sets = reduceGames(games);\n    const finalResult = sets.every(isSetFinished)\n        ? computeMatchResult(sets, games)\n        : undefined;\n\n    return {\n        ...players,\n        games,\n        sets,\n        finalResult,\n    };\n};\n\n/**\n * Reduce a sequence of games into three sets.\n *\n * @param games A sequence of games in order played\n */\nexport const reduceGames = (games: Game[]): [GinSet, GinSet, GinSet] => {\n    const [frame1, frame1End] = reduceSet(games);\n    const [frame2, frame2End] = reduceSet(games, 1, [frame1End]);\n    const [frame3] = reduceSet(games, 2, [frame1End, frame2End]);\n\n    return [frame1, frame2, frame3];\n};\n\n/**\n * Checks if a set is finished. This function assumes that sets are built by\n * `reduceSet` and therefore will always have bonuses applied as soon as a\n * player \"goes out\".\n */\nexport const isSetFinished = (ginSet: GinSet): ginSet is GinSetFinal =>\n    Boolean(ginSet.finalResult);\n\nexport const isSetInProgress = (ginSet: GinSet): ginSet is GinSetInProgress =>\n    Boolean(ginSet.currentScores);\n\n/**\n * Transform a sequence of games into a set.\n * @param games A raw sequence of games\n * @param offset The 0-indexed frame number. In gin, a player's first win\n * is not propagated to frames 2 or 3.\n * @param endIndices The index of the last game from the previous set.\n *\n * @return An array containing a gin set, and - if the set is finished - the\n * index of the last game processed.\n */\nconst reduceSet = (\n    games: Game[],\n    offset: number = 0,\n    endIndices: (number | undefined)[] = [],\n): [GinSet, number?] => {\n    /**\n     * Map of player ID to win count, adjusted for the frame entry requirement.\n     * This is used for applying bonuses for win count at the end of the frame,\n     * in addition to gating game entry into the frame.\n     */\n    const wins = {\n        [Player.One]: offset * -1,\n        [Player.Two]: offset * -1,\n    };\n\n    const scores = {\n        [Player.One]: 0,\n        [Player.Two]: 0,\n    };\n\n    const setGames: GameInSet[] = [];\n    const bonuses: Bonus[] = [];\n\n    endIndices.reverse();\n    let nextEnd = endIndices.pop();\n\n    for (const [index, game] of games.entries()) {\n        console.info('set', offset, 'game', index, nextEnd, wins);\n        // If we've passed the end of a previous set, then we reduce the barrier\n        // to entry for the current set by 1 if the player is winless.\n        if (typeof nextEnd === 'number' && index >= nextEnd + 1) {\n            wins[Player.One] = Math.max(-1 * (endIndices.length), wins[Player.One]);\n            wins[Player.Two] = Math.max(-1 * (endIndices.length), wins[Player.Two]);\n            nextEnd = endIndices.pop();\n        }\n\n        // Increment win counter to maybe qualify for frame and to\n        // ensure the player gets credit for the win in bonus calculation.\n        wins[game.winner] += 1;\n\n        // For frame 2 and frame 3, skip games that don't qualify\n        if (wins[game.winner] <= 0) continue;\n\n        scores[game.winner] += game.points;\n        const runningTotal = scores[game.winner];\n\n        setGames.push({\n            ...game,\n            runningTotal,\n        });\n\n        if (runningTotal >= 100) {\n            bonuses.push({\n                player: game.winner,\n                points: 100,\n                label: 'Going out',\n            });\n\n            PLAYERS.forEach(player => {\n                if (wins[player] > 0) {\n                    bonuses.push({\n                        player,\n                        points: 10 * wins[player],\n                        label: 'Wins',\n                    });\n                }\n            });\n\n            PLAYERS.forEach(player => {\n                const points = setGames\n                    .filter(wonBy(player))\n                    .reduce((bonus, g) => bonus + ginBonus(g.gin), 0);\n\n                if (points) {\n                    bonuses.push({\n                        player,\n                        points,\n                        label: 'Gins',\n                    });\n                }\n            });\n\n            if (wins[Player.Two] <= 0) {\n                bonuses.push({\n                    player: Player.One,\n                    points:\n                        runningTotal +\n                        bonuses\n                            .filter(g => g.player === Player.One)\n                            .reduce((b, { points }) => b + points, 0),\n                    label: 'Blitz',\n                });\n            }\n\n            if (wins[Player.One] <= 0) {\n                bonuses.push({\n                    player: Player.Two,\n                    points:\n                        runningTotal +\n                        bonuses\n                            .filter(g => g.player === Player.Two)\n                            .reduce((b, { points }) => b + points, 0),\n                    label: 'Blitz',\n                });\n            }\n\n            scores[Player.One] += bonuses\n                .filter(g => g.player === Player.One)\n                .reduce((b, { points }) => b + points, 0);\n\n            scores[Player.Two] += bonuses\n                .filter(g => g.player === Player.Two)\n                .reduce((b, { points }) => b + points, 0);\n\n            const finalResult = {\n                winner: getWinner(scores),\n                points: Math.abs(scores[Player.One] - scores[Player.Two]),\n            };\n\n            // We don't include running totals if the game has ended\n            return [{ bonuses, finalResult, games: setGames }, index];\n        }\n    }\n\n    return [\n        {\n            bonuses,\n            currentScores: scores,\n            games: setGames,\n        },\n        // The game didn't end, so no end marker is returned.\n        undefined,\n    ];\n};\n\nconst getWinner = (scores: {\n    [Player.One]: number;\n    [Player.Two]: number;\n}): Player =>\n    scores[Player.One] > scores[Player.Two] ? Player.One : Player.Two;\n\nconst ginBonus = (gin: Gin): number => {\n    switch (gin) {\n        case Gin.None:\n            return 0;\n        case Gin.Normal:\n            return 25;\n        case Gin.Super:\n            return 50;\n    }\n};\n\nconst wonBy = (player: Player) => (game: Game): boolean =>\n    game.winner === player;\n\nconst computeMatchResult = (sets: GinSet[], games: Game[]): GinMatchResult => {\n    const scores = {\n        [Player.One]: 0,\n        [Player.Two]: 0,\n    };\n\n    sets.forEach(v => (scores[v.finalResult!.winner] += v.finalResult!.points));\n\n    const winner = getWinner(scores);\n    const isHollywood = games.every(wonBy(winner));\n    return {\n        winner,\n        isHollywood,\n        points: isHollywood\n            ? 2 * scores[winner]\n            : scores[winner] - scores[otherPlayer(winner)],\n    };\n};\n","export * from './outcome';\n\nexport enum Player {\n    One = 1,\n    Two = 2,\n}\n\nexport const PLAYERS = [Player.One, Player.Two];\n\nexport interface PlayerNames {\n    player1Name: string;\n    player2Name: string;\n}\n\n/**\n * Get the name of a player from a pair of names.\n */\nexport const nameOfPlayer = (players: PlayerNames, player: Player): string =>\n    player === Player.One ? players.player1Name : players.player2Name;\n\n/**\n * Get the opponent of the passed-in player.\n */\nexport const otherPlayer = (player: Player): Player =>\n    player === Player.One ? Player.Two : Player.One;\n\nexport enum Gin {\n    None = 'none',\n    Normal = 'normal',\n    Super = 'super',\n}\n\n/**\n * A single game of gin; undercuts are not tracked separately.\n */\nexport interface Game {\n    winner: Player;\n    points: number;\n    gin: Gin;\n}\n\n/**\n * Checks if the value is a complete `Game` object.\n */\nexport const isGame = (x: any): x is Game =>\n    typeof x === 'object' &&\n    typeof x.points === 'number' &&\n    typeof x.gin === 'string' &&\n    x.winner !== null &&\n    x.winner !== undefined;\n","import { Game, otherPlayer, Player } from '.';\n\nexport interface PerPlayer<T = number> {\n    [Player.One]: T;\n    [Player.Two]: T;\n}\n\nexport interface Stats {\n    /**\n     * The number of games won by each player in the current match.\n     */\n    wins: PerPlayer;\n    /**\n     * The maximum number of consecutive games won by each player in\n     * the current match.\n     */\n    maxStreak: PerPlayer;\n    /**\n     * The average number of points each player received on winning a\n     * game in the current match.\n     */\n    meanWinSize: PerPlayer;\n    /**\n     * The max number of points earned by each player in a single game.\n     */\n    biggestWin: PerPlayer;\n}\n\nconst newPerPlayer = (): PerPlayer => ({\n    [Player.One]: 0,\n    [Player.Two]: 0,\n});\n\nexport const reduceGamesToStats = (games: Game[]): Stats => {\n    const wins = reduceGamesToWins(games);\n\n    return {\n        wins,\n        meanWinSize: reduceGamesToMeanPoints(games, wins),\n        maxStreak: reduceGamesToMaxStreak(games),\n        biggestWin: reduceGamesToBiggestWin(games),\n    };\n};\n\nconst reduceGamesToWins = (games: Game[]): PerPlayer =>\n    games.reduce((state, game) => {\n        state[game.winner] += 1;\n        return state;\n    }, newPerPlayer());\n\nconst reduceGamesToMeanPoints = (games: Game[], wins: PerPlayer): PerPlayer => {\n    const perPlayer = games.reduce((state, game) => {\n        state[game.winner] += game.points;\n        return state;\n    }, newPerPlayer());\n    if (wins[Player.One]) perPlayer[Player.One] /= wins[Player.One];\n    if (wins[Player.Two]) perPlayer[Player.Two] /= wins[Player.Two];\n\n    return perPlayer;\n};\n\nconst reduceGamesToMaxStreak = (games: Game[]): PerPlayer => {\n    const currentStreak = newPerPlayer();\n    const maxStreak = newPerPlayer();\n\n    for (const game of games) {\n        currentStreak[game.winner] += 1;\n        currentStreak[otherPlayer(game.winner)] = 0;\n\n        if (currentStreak[game.winner] > maxStreak[game.winner]) {\n            maxStreak[game.winner] = currentStreak[game.winner];\n        }\n    }\n\n    return maxStreak;\n};\n\nconst reduceGamesToBiggestWin = (games: Game[]): PerPlayer =>\n    games.reduce((state, game) => {\n        state[game.winner] = Math.max(state[game.winner], game.points);\n        return state;\n    }, newPerPlayer());\n","import * as classNames from 'classnames';\nimport * as React from 'react';\n\nimport { ControlledInput } from '../ControlledInput';\n\nexport interface NumberInputProps extends ControlledInput<number | null> {\n    min?: number;\n    max?: number;\n    step?: number;\n    className?: string;\n}\n\nexport class NumberInput extends React.Component<NumberInputProps> {\n    public render(): React.ReactNode {\n        const { value, className, ...props } = this.props;\n        return (\n            <input\n                {...props}\n                className={classNames('c-number-input', className)}\n                type=\"number\"\n                value={value !== null ? value.toString() : ''}\n                onChange={this.handleChange}\n            />\n        );\n    }\n\n    private readonly handleChange = (\n        evt: React.ChangeEvent<HTMLInputElement>,\n    ): void => {\n        const { value } = evt.target;\n        const parsed = value === '' ? null : Number.parseInt(value, 10);\n        if (this.props.onChange) {\n            this.props.onChange(parsed, this.props.name);\n        }\n    };\n}\n","import * as classNames from 'classnames';\nimport * as React from 'react';\n\nimport { focusRef, refChildHasFocus } from '../util/Ref';\nimport './Radio.css';\n\nexport interface RadioProps<T extends string | number = string> {\n    className?: string;\n    label?: string;\n    selected: boolean;\n    value: T;\n    disabled?: boolean;\n    name?: string;\n    /**\n     * When `true`, the native radio element will be rendered as 0x0 to avoid\n     * showing. The caller should then use classes to style the component as-desired.\n     */\n    hideNative?: boolean;\n    onChange(newValue: T, name?: string): void;\n}\n\nexport class Radio<T extends string | number = string> extends React.Component<\n    RadioProps<T>\n> {\n    private readonly root = React.createRef<HTMLLabelElement>();\n\n    // tslint:disable-next-line:member-ordering\n    public readonly hasFocus = refChildHasFocus(this.root);\n\n    public render(): React.ReactNode {\n        const { className, children, value, label, ...props } = this.props;\n\n        return (\n            <label\n                ref={this.root}\n                className={classNames('c-radio', className, {\n                    'c-radio--checked': props.selected,\n                    'c-radio--disabled': props.disabled,\n                    'c-radio--nonative': props.hideNative,\n                    'c-radio--has-focus': this.hasFocus(),\n                })}\n            >\n                <input\n                    name={props.name}\n                    disabled={props.disabled}\n                    checked={props.selected}\n                    onChange={this.handleChange}\n                    value={value.toString()}\n                    type=\"radio\"\n                    onFocus={this.handleFocusChange}\n                    onBlur={this.handleFocusChange}\n                />\n                {label}\n            </label>\n        );\n    }\n\n    public readonly focus = () => focusRef(this.root);\n\n    private readonly handleFocusChange = () => this.forceUpdate();\n\n    private readonly handleChange = () => {\n        if (this.props.onChange) {\n            this.props.onChange(this.props.value, this.props.name);\n        }\n    };\n}\n","import * as classNames from 'classnames';\nimport * as React from 'react';\n\nimport { ControlledInput } from '../../ControlledInput';\nimport { Radio } from '../Radio';\nimport { focusRef } from '../util/Ref';\nimport './RadioGroup.css';\n\nexport interface Choice<T extends string | number = string> {\n    label: string;\n    value: T;\n}\n\nexport interface RadioGroupProps<T extends string | number = string>\n    extends ControlledInput<T> {\n    className?: string;\n    label?: string;\n    choices: Choice<T>[];\n    name: string;\n    hideNative?: boolean;\n    horizontal?: boolean;\n}\n\n/** A set of radio buttons */\nexport class RadioGroup<\n    T extends string | number = string\n> extends React.Component<RadioGroupProps<T>> {\n    private readonly first = React.createRef<Radio<T>>();\n\n    public render(): React.ReactNode {\n        const { className, name, ...props } = this.props;\n        return (\n            <div\n                className={classNames('c-radio-group', className, {\n                    'c-radio-group--horizontal': props.horizontal,\n                    'c-radio-group--hide-native': props.hideNative,\n                })}\n            >\n                {props.label && (\n                    <span className=\"c-radio-group__label\">{props.label}</span>\n                )}\n                {props.choices.map((choice, idx) => (\n                    <Radio<T>\n                        {...choice}\n                        key={choice.value}\n                        ref={idx === 0 ? this.first : undefined}\n                        name={name}\n                        disabled={props.disabled}\n                        hideNative={props.hideNative}\n                        selected={props.value === choice.value}\n                        onChange={props.onChange}\n                    />\n                ))}\n            </div>\n        );\n    }\n\n    public focus = () => focusRef(this.first);\n}\n","import * as React from 'react';\n\nimport { ControlledInput, makeFieldChangeHandler } from '../../ControlledInput';\nimport { Game, Gin, Player } from '../../models';\nimport { NumberInput } from '../NumberInput';\nimport { RadioGroup } from '../RadioGroup';\nimport { focusRef } from '../util/Ref';\nimport './GameInput.css';\n\n/**\n * A variant of the `Game` interface optimized for input.\n */\nexport interface PartialGame {\n    winner: Game['winner'];\n    points: number | null;\n    gin: Game['gin'];\n}\n\nconst DEFAULT_PARTIAL_GAME: PartialGame = {\n    winner: Player.One,\n    points: null,\n    gin: Gin.None,\n};\n\nexport const PartialGame = {\n    DEFAULT: DEFAULT_PARTIAL_GAME,\n};\n\nexport interface GameInputProps extends ControlledInput<PartialGame> {\n    player1Name: string;\n    player2Name: string;\n}\n\nexport class GameInput extends React.Component<GameInputProps> {\n    private readonly focusTarget = React.createRef<RadioGroup<any>>();\n    private readonly handleChange = makeFieldChangeHandler(this);\n\n    public render(): React.ReactNode {\n        const { value, disabled, ...props } = this.props;\n\n        return (\n            <div className=\"c-game-input\">\n                <RadioGroup<Player>\n                    name=\"winner\"\n                    className=\"c-game-input__players\"\n                    choices={[\n                        { value: Player.One, label: props.player1Name },\n                        { value: Player.Two, label: props.player2Name },\n                    ]}\n                    value={value.winner}\n                    disabled={disabled}\n                    label=\"Winner\"\n                    onChange={this.handleChange}\n                    hideNative\n                    horizontal\n                    ref={this.focusTarget}\n                />\n                <div className=\"c-game-input__points\">\n                    <NumberInput\n                        name=\"points\"\n                        value={value.points}\n                        min={1}\n                        disabled={disabled}\n                        onChange={this.handleChange}\n                    />\n                    &nbsp; points\n                </div>\n                <RadioGroup<Gin>\n                    name=\"gin\"\n                    value={value.gin}\n                    className=\"c-game-input__gin\"\n                    choices={[\n                        { value: Gin.None, label: 'No Gin' },\n                        { value: Gin.Normal, label: 'Gin' },\n                        { value: Gin.Super, label: 'Super Gin' },\n                    ]}\n                    disabled={disabled}\n                    onChange={this.handleChange}\n                    horizontal\n                    hideNative\n                />\n            </div>\n        );\n    }\n\n    public readonly focus = () => focusRef(this.focusTarget);\n}\n","import * as React from 'react';\n\nimport * as classNames from 'classnames';\nimport { Bonus, GameInSet, Gin, GinSet, Player, PlayerNames } from 'src/models';\nimport './ScoreColumn.css';\n\nexport interface ScoreColumnProps extends PlayerNames {\n    className?: string;\n    value: GinSet;\n}\n\nexport const ScoreColumn: React.SFC<ScoreColumnProps> = ({\n    value,\n    ...props\n}) => (\n    <div className={classNames('c-scorecolumn', props.className)}>\n        <div className=\"c-scorecolumn__header\">\n            <div className=\"c-scorecolumn__player\">{props.player1Name}</div>\n            <div className=\"c-scorecolumn__player\">{props.player2Name}</div>\n        </div>\n        {value.games.map((game, index) => (\n            <ScoreRow {...game} key={`game-${index}`} />\n        ))}\n        {value.bonuses.map((bonus, index) => (\n            <BonusRow key={`bonus-${index}`} {...bonus} isFirst={index === 0} />\n        ))}\n    </div>\n);\n\nconst ScoreRow: React.SFC<GameInSet> = ({ winner, gin, runningTotal }) => {\n    const winnerCell = (\n        <div className=\"c-scorerow__winner\" data-gin={gin} key=\"winner\">\n            {runningTotal}\n            {gin === Gin.Normal && '*'}\n            {gin === Gin.Super && '**'}\n        </div>\n    );\n    const loserCell = <div className=\"c-scorerow__loser\" key=\"loser\" />;\n\n    return (\n        <div className=\"c-scorerow\">\n            {winner === Player.One\n                ? [winnerCell, loserCell]\n                : [loserCell, winnerCell]}\n        </div>\n    );\n};\n\nconst BonusRow: React.SFC<Bonus & { isFirst?: boolean }> = props => {\n    const bonusCell = (\n        <div className=\"c-bonusrow__recipient\" key=\"winner\">\n            <span className=\"c-bonusrow__points\">{props.points}</span>\n            <span className=\"c-bonusrow__label\">{props.label}</span>\n        </div>\n    );\n\n    const loserCell = <div className=\"c-bonusrow__loser\" key=\"loser\" />;\n\n    return (\n        <div\n            className={classNames('c-bonusrow', {\n                'c-bonusrow--first': props.isFirst,\n            })}\n        >\n            {props.player === Player.One\n                ? [bonusCell, loserCell]\n                : [loserCell, bonusCell]}\n        </div>\n    );\n};\n","import * as classNames from 'classnames';\nimport * as React from 'react';\n\nimport './ScrollViewer.css';\n\nexport interface ScrollViewerProps {\n    className?: string;\n    overflowX?: 'hidden';\n    overflowY?: 'hidden';\n}\n\nexport const ScrollViewer: React.SFC<ScrollViewerProps> = ({\n    className,\n    children,\n    overflowX = 'auto',\n    overflowY = 'auto',\n}) => (\n    <div\n        className={classNames('c-scroll-viewer', className)}\n        style={{ overflowX, overflowY }}\n    >\n        {children}\n    </div>\n);\n","import * as React from 'react';\n\nimport * as classNames from 'classnames';\nimport {\n    GinSet,\n    isSetFinished,\n    nameOfPlayer,\n    Player,\n    PlayerNames,\n} from '../../models';\nimport './Summary.css';\n\nexport interface SetSummaryProps extends PlayerNames {\n    className?: string;\n    value: GinSet;\n    onClick?(): void;\n}\n\nexport const SetSummary: React.SFC<SetSummaryProps> = props => {\n    const { value, ...outerProps } = props;\n    // If a player has won the set, don't show loser's points\n    if (isSetFinished(value)) {\n        return (\n            <SetSummaryContainer {...outerProps} finished>\n                <span className=\"c-set-summary--final__winner\">\n                    {nameOfPlayer(props, value.finalResult.winner)} won\n                </span>\n                <span className=\"c-set-summary--final__points\">\n                    {value.finalResult.points}\n                </span>\n            </SetSummaryContainer>\n        );\n    }\n\n    return (\n        <SetSummaryContainer {...outerProps}>\n            <div className=\"c-set-summary__player\">\n                <span className=\"c-set-summary__player-name\">\n                    {props.player1Name}\n                </span>\n                <span className=\"c-set-summary__points\">\n                    {value.currentScores[Player.One]}\n                </span>\n            </div>\n            <div className=\"c-set-summary__player\">\n                <span className=\"c-set-summary__player-name\">\n                    {props.player2Name}\n                </span>\n                <span className=\"c-set-summary__points\">\n                    {value.currentScores[Player.Two]}\n                </span>\n            </div>\n        </SetSummaryContainer>\n    );\n};\n\n/**\n * Outer container element for the set summary.\n */\nconst SetSummaryContainer: React.SFC<\n    Pick<SetSummaryProps, 'className' | 'onClick'> & { finished?: boolean }\n> = ({ className, onClick, finished, children }) => (\n    <div\n        className={classNames(\n            'c-set-summary',\n            finished ? 'c-set-summary--final' : 'c-set-summary--in-progress',\n            className,\n            {\n                'c-set-summary--clickable': Boolean(onClick),\n            },\n        )}\n        onClick={onClick}\n    >\n        {children}\n    </div>\n);\n","import * as React from 'react';\n\nimport { GinSet, PlayerNames } from '../../models';\nimport { ToggleDrawer } from '../Drawer';\nimport { ScoreColumn } from '../ScoreColumn';\nimport './SetView.css';\nimport { SetSummary } from './Summary';\n\nexport interface SetViewProps extends PlayerNames {\n    value: GinSet;\n}\n\nexport class SetView extends React.PureComponent<SetViewProps> {\n    public render(): React.ReactNode {\n        return (\n            <ToggleDrawer\n                activator={({ openDrawer }) => (\n                    <SetSummary\n                        {...this.props}\n                        onClick={openDrawer}\n                        className=\"c-set-view\"\n                    />\n                )}\n            >\n                <ScoreColumn\n                    {...this.props}\n                    className=\"c-set-view__score-column\"\n                />\n            </ToggleDrawer>\n        );\n    }\n}\n","import * as classNames from 'classnames';\nimport * as React from 'react';\n\nimport { nameOfPlayer, Player, PlayerNames } from 'src/models';\nimport { PerPlayer, Stats } from 'src/models/stats';\nimport './StatsViewer.css';\n\nexport interface StatsViewerProps extends PlayerNames {\n    className?: string;\n    value: Stats;\n}\n\nexport class StatsViewer extends React.Component<StatsViewerProps> {\n    public render(): React.ReactNode {\n        const { player1Name, player2Name, value, ...props } = this.props;\n        const players = { player1Name, player2Name };\n        return (\n            <div className={classNames('c-stats-viewer', props.className)}>\n                <ShareChart title=\"Wins\" {...players} {...value.wins} />\n                <ShareChart\n                    title=\"Max Streak\"\n                    {...players}\n                    {...value.maxStreak}\n                />\n                <ShareChart\n                    title=\"Mean PPG\"\n                    {...players}\n                    {...value.meanWinSize}\n                />\n                <ShareChart\n                    title=\"Biggest Win\"\n                    {...players}\n                    {...value.biggestWin}\n                />\n            </div>\n        );\n    }\n}\n\ninterface ShareChartProps extends PlayerNames, PerPlayer {\n    title: React.ReactNode;\n}\n\nexport const ShareChart: React.SFC<ShareChartProps> = props => (\n    <div className=\"c-share-chart\">\n        <h3>{props.title}</h3>\n        {nameOfPlayer(props, Player.One)}: {formatNumber(props[Player.One])}\n        <br />\n        {nameOfPlayer(props, Player.Two)}: {formatNumber(props[Player.Two])}\n        <br />\n    </div>\n);\n\nconst formatNumber = (value: number) =>\n    value % 1 === 0 ? value.toString() : value.toFixed(2);\n","import * as React from 'react';\n\nimport * as classNames from 'classnames';\nimport { GinMatchResult, Player, PlayerNames } from 'src/models';\nimport { Button } from '../Button';\nimport './MatchResultViewer.css';\n\nexport interface MatchResultViewerProps extends GinMatchResult, PlayerNames {\n    className?: string;\n    onNewMatch?(): void;\n}\n\nexport const MatchResultViewer: React.SFC<MatchResultViewerProps> = props => (\n    <div className={classNames('c-match-result-viewer', classNames)}>\n        <div className=\"c-match-result-viewer__winner\">\n            {props.winner === Player.One\n                ? props.player1Name\n                : props.player2Name}\n            {' '}wins!\n        </div>\n        <div className=\"c-match-result-viewer__points\">\n            <span className=\"c-match-result-viewer__points-value\">{props.points}</span>\n            &nbsp;\n            <span className=\"c-match-result-viewer__points-label\">points</span>\n        </div>\n        <div className=\"c-match-result-viewer__actions\">\n            {props.onNewMatch && <Button onClick={props.onNewMatch}>Play again</Button>}\n        </div>\n    </div>\n);\n","import * as React from 'react';\nimport MediaQuery from 'react-responsive';\n\nimport * as classNames from 'classnames';\nimport memoizeOne from 'memoize-one';\nimport { reduceGamesToStats } from 'src/models/stats';\nimport { Game, GinMatch, isGame } from '../../models';\nimport { Drawer, DrawerTitleSpacer } from '../Drawer/Drawer';\nimport { Form } from '../Form';\nimport { GameInput, GameInputProps, PartialGame } from '../GameInput';\nimport { ScoreColumn } from '../ScoreColumn';\nimport { ScrollViewer } from '../ScrollViewer';\nimport { SetView } from '../SetView';\nimport { StatsViewer } from '../StatsViewer';\nimport { focusRef } from '../util/Ref';\nimport { MatchResultViewer } from './MatchResultViewer';\nimport './MatchViewer.css';\n\nexport interface MatchViewerProps {\n    value: GinMatch;\n    readOnly?: boolean;\n    onSubmitGame?(game: Game): void;\n    onNewMatch?(): void;\n}\n\nconst INITIAL_STATE = {\n    drawerOpen: false,\n};\n\ntype State = typeof INITIAL_STATE;\n\nexport class MatchViewer extends React.Component<MatchViewerProps, State> {\n    private readonly gameForm = React.createRef<GameForm>();\n\n    /**\n     * A memoized stats calculator. This keeps the component interface correct -\n     * the component takes a GinMatch - while avoiding unnecessary recalculation\n     * when the match hasn't changed. The memoization is done per-instance so\n     * that multiple MatchViewers will never cause thrashing on every render.\n     */\n    private readonly computeStats = memoizeOne(reduceGamesToStats);\n\n    constructor(props: MatchViewerProps) {\n        super(props);\n\n        this.state = INITIAL_STATE;\n    }\n\n    public render(): React.ReactNode {\n        const {\n            value: { player1Name, player2Name, ...value },\n            readOnly,\n            ...props\n        } = this.props;\n        const players = { player1Name, player2Name };\n\n        const gameForm = (\n            <GameForm\n                ref={this.gameForm}\n                {...players}\n                onSubmitGame={this.handleGameSubmit}\n            />\n        );\n\n        return (\n            <div\n                className={classNames('c-match-viewer', {\n                    'c-match-viewer--finished': Boolean(value.finalResult),\n                })}\n            >\n                <MediaQuery minWidth={600}>\n                    <ScrollViewer className=\"c-match-viewer__main\">\n                        <div className=\"c-match-viewer__sets\">\n                            {value.sets.map((s, i) => (\n                                <ScoreColumn key={i} {...players} value={s} />\n                            ))}\n                        </div>\n                        <StatsViewer\n                            value={this.computeStats(value.games)}\n                            {...players}\n                        />\n                    </ScrollViewer>\n                </MediaQuery>\n                <MediaQuery maxWidth={600}>\n                    <ScrollViewer overflowX=\"hidden\">\n                        {value.sets.map((v, i) => (\n                            <SetView key={i} value={v} {...players} />\n                        ))}\n                        <StatsViewer\n                            value={this.computeStats(value.games)}\n                            {...players}\n                        />\n                    </ScrollViewer>\n                </MediaQuery>\n                {value.finalResult && (\n                    <MatchResultViewer\n                        {...players}\n                        {...value.finalResult}\n                        onNewMatch={props.onNewMatch}\n                    />\n                )}\n                {!readOnly && (\n                    <>\n                        <MediaQuery maxWidth={1000}>\n                            <DrawerTitleSpacer />\n                            <Drawer\n                                open={this.state.drawerOpen}\n                                title=\"Add game\"\n                                onTitleClick={this.handleGameFormOpen}\n                                onDismiss={this.closeGameForm}\n                                hideTitle={!!value.finalResult}\n                            >\n                                {gameForm}\n                            </Drawer>\n                        </MediaQuery>\n                        <MediaQuery minWidth={1000}>\n                            <div className=\"c-match-viewer__add-game\">\n                                <h1>Add game</h1>\n                                {gameForm}\n                            </div>\n                        </MediaQuery>\n                    </>\n                )}\n            </div>\n        );\n    }\n\n    private readonly handleGameSubmit: MatchViewerProps['onSubmitGame'] = game => {\n        if (this.props.onSubmitGame) this.props.onSubmitGame(game);\n        this.closeGameForm();\n    };\n\n    private readonly closeGameForm = () => {\n        this.setState({ drawerOpen: false });\n    };\n\n    private readonly handleGameFormOpen = () => {\n        this.setState({ drawerOpen: true });\n        focusRef(this.gameForm);\n    };\n}\n\ntype GameFormProps = Pick<MatchViewerProps, 'onSubmitGame'> &\n    Pick<GameInputProps, 'player1Name' | 'player2Name' | 'disabled'>;\n\nclass GameForm extends React.Component<GameFormProps, PartialGame> {\n    private readonly input = React.createRef<GameInput>();\n\n    constructor(props: GameFormProps) {\n        super(props);\n        this.state = PartialGame.DEFAULT;\n    }\n\n    public render() {\n        return (\n            <Form\n                className=\"c-gameform\"\n                onSubmit={this.handleSubmit}\n                disableSubmit={this.props.disabled || !isGame(this.state)}\n                submitLabel=\"Submit\"\n            >\n                <GameInput\n                    ref={this.input}\n                    player1Name={this.props.player1Name}\n                    player2Name={this.props.player2Name}\n                    disabled={this.props.disabled}\n                    value={this.state}\n                    onChange={this.handleChange}\n                />\n            </Form>\n        );\n    }\n\n    public readonly focus = () => focusRef(this.input);\n\n    private readonly handleChange = (value: PartialGame) => {\n        this.setState(value);\n    };\n\n    private readonly handleSubmit = () => {\n        // Don't allow submission of incomplete games\n        // TODO show an error in this case\n        if (!isGame(this.state)) return;\n\n        if (this.props.onSubmitGame) this.props.onSubmitGame(this.state);\n\n        // Wipe the state, so we're ready for the next game input.\n        this.setState(PartialGame.DEFAULT);\n\n        this.focus();\n    };\n}\n","import { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\n\nimport { creators } from '../Actions';\nimport { MatchViewer, MatchViewerProps } from '../components/MatchViewer';\nimport { reduceGamesToMatch } from '../models';\nimport { gameSelector, playerNameSelector } from '../Reducer';\nimport { State } from '../State';\n\nconst matchSelector = createSelector(\n    gameSelector,\n    playerNameSelector,\n    (games, players) => reduceGamesToMatch(players)(games),\n);\n\ntype StateProps = Pick<MatchViewerProps, 'value'>;\ntype DispatchProps = Pick<MatchViewerProps, 'onSubmitGame' | 'onNewMatch'>;\n\nconst mapStateToProps = (state: State): StateProps => ({\n    value: matchSelector(state),\n});\n\nconst mapDispatchToProps: DispatchProps = {\n    onSubmitGame: creators.FinishGame,\n    onNewMatch: creators.StartNewMatch,\n};\n\nexport const CurrentMatchViewer = connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(MatchViewer);\n","import * as React from 'react';\n\nimport { AppHeader } from '../../components/AppHeader';\nimport { CommandBar } from '../../containers/CommandBar';\nimport { CurrentMatchViewer } from '../../containers/CurrentMatchViewer';\n\nimport './Playing.css';\n\nexport const Playing: React.SFC = props => (\n    <div className=\"l-playing\">\n        <AppHeader />\n        <CommandBar />\n        <CurrentMatchViewer />\n    </div>\n);\n","import * as React from 'react';\nimport { Provider } from 'react-redux';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport { install } from 'redux-loop';\nimport './App.css';\n\nimport { retrieveState } from './Effects';\nimport { Playing } from './layouts/playing';\nimport { reducer } from './Reducer';\nimport { INITIAL_STATE } from './State';\n\n// XXX figure out why this didn't work.\nconst devtools = () =>\n    (window as any).__REDUX_DEVTOOLS_EXTENSION__ &&\n    (window as any).__REDUX_DEVTOOLS_EXTENSION__();\n\nexport const middleware = compose(\n    applyMiddleware(devtools),\n    install(),\n);\n\nconst store = createStore(\n    reducer,\n    retrieveState() || INITIAL_STATE,\n    // Hook enhancer for redux dev-tools\n    install(),\n);\n\nclass App extends React.Component {\n    public render() {\n        return (\n            <Provider store={store}>\n                <Playing />\n            </Provider>\n        );\n    }\n}\n\nexport default App;\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root') as HTMLElement\n);\nregisterServiceWorker();\n"],"sourceRoot":""}